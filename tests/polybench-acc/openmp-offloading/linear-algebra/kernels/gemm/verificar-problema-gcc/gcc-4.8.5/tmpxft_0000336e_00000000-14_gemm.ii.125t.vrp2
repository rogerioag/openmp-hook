
;; Function void* xmalloc(size_t) (_ZL7xmallocm, funcdef_no=3275, decl_uid=67134, cgraph_uid=3097)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5
;; 2 succs { 4 3 }
;; 3 succs { 4 5 }
;; 4 succs { }
;; 5 succs { 1 }

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

newA.72_12 -> { newA.72_6 }
Incremental SSA update started at block: 2
Number of blocks in CFG: 6
Number of blocks to update: 3 ( 50%)



Value ranges after VRP:

ret_5: VARYING
newA.72_6: VARYING
stderr.73_8: VARYING
newA.72_12: ~[0B, 0B]  EQUIVALENCES: { newA.72_6 } (1 elements)


void* xmalloc(size_t) (size_t num)
{
  int ret;
  void * newA;
  struct _IO_FILE * stderr.73;
  void * newA.72;

  <bb 2>:
  newA = 0B;
  ret_5 = posix_memalign (&newA, 32, num_3(D));
  newA.72_6 = newA;
  if (newA.72_6 == 0B)
    goto <bb 4>;
  else
    goto <bb 3>;

  <bb 3>:
  if (ret_5 != 0)
    goto <bb 4>;
  else
    goto <bb 5>;

  <bb 4>:
  stderr.73_8 = stderr;
  __fprintf_chk (stderr.73_8, 1, "[PolyBench] posix_memalign: cannot allocate memory");
  exit (1);

  <bb 5>:
  newA ={v} {CLOBBER};
  return newA.72_6;

}



;; Function void __cudaUnregisterBinaryUtil() (_ZL26__cudaUnregisterBinaryUtilv, funcdef_no=3279, decl_uid=67214, cgraph_uid=3100)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }

Value ranges after VRP:

__cudaFatCubinHandle.84_3: VARYING


void __cudaUnregisterBinaryUtil() ()
{
  static volatile void * * __ref;
  void * * __cudaFatCubinHandle.84;

  <bb 2>:
  __ref = &__cudaFatCubinHandle;
  __cudaFatCubinHandle.84_3 = __cudaFatCubinHandle;
  __cudaUnregisterFatBinary (__cudaFatCubinHandle.84_3);
  return;

}



;; Function <built-in> (_Z15gemm_omp_kerneliiiddPA4096_dS0_S0_._omp_fn.0, funcdef_no=3306, decl_uid=67704, cgraph_uid=3135)

;; 5 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17
;;
;; Loop 1
;;  header 4, latch 9
;;  depth 1, outer 0
;;  nodes: 4 9 8 6 5 12 11 15 16 14 13 10 7
;;
;; Loop 2
;;  header 5, latch 7
;;  depth 2, outer 1
;;  nodes: 5 7 6 12 11 15 16 14 13 10
;;
;; Loop 3
;;  header 11, latch 13
;;  depth 3, outer 2
;;  nodes: 11 13 12 15 16 14
;;
;; Loop 4
;;  header 15, latch 16
;;  depth 4, outer 3
;;  nodes: 15 16
;; 2 succs { 3 17 }
;; 3 succs { 4 }
;; 4 succs { 5 }
;; 5 succs { 10 6 }
;; 6 succs { 7 8 }
;; 7 succs { 5 }
;; 8 succs { 17 9 }
;; 9 succs { 4 }
;; 10 succs { 11 }
;; 11 succs { 14 12 }
;; 12 succs { 13 6 }
;; 13 succs { 11 }
;; 14 succs { 15 }
;; 15 succs { 16 12 }
;; 16 succs { 15 }
;; 17 succs { 1 }

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

pretmp_80 -> { pretmp_82 }
.omp_data_i_89 -> { .omp_data_i_15(D) }
Incremental SSA update started at block: 2
Number of blocks in CFG: 18
Number of blocks to update: 7 ( 39%)



Value ranges after VRP:

i_1: VARYING
.MEM_4: VARYING
_7: [0, +INF]
.MEM_8: VARYING
.omp_data_i_15(D): VARYING
_16: VARYING
_17: [-2147483648, 2147483647]
_19: VARYING
.istart0.114_20: VARYING
i_21: VARYING
.iend0.115_22: VARYING
_23: VARYING
ivtmp.145_24: [0, +INF]
i_25: VARYING
_27: VARYING
ivtmp.142_28: [0, +INF]
_29: VARYING
ivtmp.145_30: VARYING
ivtmp.145_31: [0, +INF]
_32: VARYING
_33: VARYING
_34: VARYING
_36: [0, +INF]
ivtmp.158_37: VARYING
_39: VARYING
_40: VARYING
_41: VARYING
_42: VARYING
_43: VARYING
_44: VARYING
ivtmp.149_45: [1, 2147483647]
_46: [1, 2147483647]
_47: [0, +INF]
_48: [0, 2147483646]
_49: VARYING
_50: VARYING
_51: VARYING
_53: [0, 2147483646]
ivtmp.142_55: VARYING
ivtmp.142_60: [0, +INF]
j_61: [0, 2147483646]
ivtmp.149_62: [0, 2147483646]
_63: [0, 4294967295]
.MEM_64: VARYING
_65: [0, 34359738360]
.MEM_66: VARYING
pretmp_80: [1, +INF]  EQUIVALENCES: { pretmp_82 } (1 elements)
_81: ~[2147483648, 18446744071562067967]
pretmp_82: VARYING
_84: VARYING
ivtmp.158_85: [0, 18446744073709518848]
ivtmp.158_86: [0, +INF]
_87: [1, 2147483647]
_88: [0, +INF]
.omp_data_i_89: ~[0, 0]  EQUIVALENCES: { .omp_data_i_15(D) } (1 elements)
pretmp_90: [ivtmp.158_37, ivtmp.158_37]  EQUIVALENCES: { ivtmp.158_37 } (1 elements)
pretmp_91: VARYING
pretmp_93: VARYING
pretmp_94: VARYING
prephitmp_97: VARYING
pretmp_98: VARYING
pretmp_100: VARYING
pretmp_103: VARYING
_106: [8, 34359738368]
.MEM_107: VARYING
.MEM_108: VARYING
.MEM_109: VARYING


<built-in> (struct .omp_data_s.41 & restrict .omp_data_i)
{
  long unsigned int ivtmp.158;
  unsigned long ivtmp.149;
  unsigned long ivtmp.145;
  unsigned long ivtmp.142;
  int k;
  int j;
  long int .iend0.115;
  int i;
  long int .istart0.114;
  long int .iend0.113;
  long int .istart0.112;
  unsigned long _7;
  int _16;
  long int _17;
  bool _19;
  int _23;
  bool _27;
  double * _29;
  double _32;
  double _33;
  double _34;
  unsigned int _36;
  double * _39;
  void * _40;
  void * _41;
  double _42;
  double _43;
  double _44;
  unsigned int _46;
  unsigned int _47;
  unsigned long _48;
  double _49;
  double _50;
  double _51;
  unsigned int _53;
  unsigned long _63;
  unsigned long _65;
  long unsigned int _81;
  int pretmp_82;
  int _84;
  unsigned long _87;
  unsigned long _88;
  long unsigned int pretmp_90;
  double[4096] * pretmp_91;
  double[4096] * pretmp_93;
  int pretmp_94;
  double prephitmp_97;
  double[4096] * pretmp_98;
  double[4096] * pretmp_100;
  double[4096] * pretmp_103;
  unsigned long _106;

  <bb 2>:
  current_loop_index = 0;
  num_threads_defined = 8;
  q_data_transfer_write = 402653184;
  q_data_transfer_read = 134217728;
  type_of_data_allocation = 1;
  _16 = .omp_data_i_15(D)->ni;
  _17 = (long int) _16;
  _19 = __builtin_GOMP_loop_dynamic_start (0, _17, 1, 64, &.istart0.112, &.iend0.113);
  if (_19 != 0)
    goto <bb 3>;
  else
    goto <bb 17>;

  <bb 3>:

  <bb 4>:
  .istart0.114_20 = .istart0.112;
  i_21 = (int) .istart0.114_20;
  .iend0.115_22 = .iend0.113;
  _23 = (int) .iend0.115_22;
  pretmp_82 = .omp_data_i_15(D)->nj;
  _84 = (int) .istart0.114_20;
  _81 = (long unsigned int) _84;
  ivtmp.158_85 = _81 * 32768;

  <bb 5>:
  # i_1 = PHI <i_21(4), i_25(7)>
  # ivtmp.158_37 = PHI <ivtmp.158_85(4), ivtmp.158_86(7)>
  if (pretmp_82 > 0)
    goto <bb 10>;
  else
    goto <bb 6>;

  <bb 6>:
  i_25 = i_1 + 1;
  ivtmp.158_86 = ivtmp.158_37 + 32768;
  if (_23 > i_25)
    goto <bb 7>;
  else
    goto <bb 8>;

  <bb 7>:
  goto <bb 5>;

  <bb 8>:
  _27 = __builtin_GOMP_loop_dynamic_next (&.istart0.112, &.iend0.113);
  if (_27 != 0)
    goto <bb 9>;
  else
    goto <bb 17>;

  <bb 9>:
  goto <bb 4>;

  <bb 10>:
  pretmp_90 = ivtmp.158_37;
  pretmp_91 = .omp_data_i_15(D)->C;
  pretmp_93 = pretmp_91 + pretmp_90;
  pretmp_94 = .omp_data_i_15(D)->nk;
  _46 = (unsigned int) pretmp_82;
  _53 = _46 + 4294967295;
  _48 = (unsigned long) _53;
  _87 = _48 + 1;
  _47 = (unsigned int) pretmp_94;
  _36 = _47 + 4294967295;
  _63 = (unsigned long) _36;
  _65 = _63 * 8;

  <bb 11>:
  # ivtmp.149_62 = PHI <ivtmp.149_45(13), 0(10)>
  j_61 = (int) ivtmp.149_62;
  _32 = MEM[base: pretmp_93, index: ivtmp.149_62, step: 8, offset: 0B];
  _33 = .omp_data_i_15(D)->beta;
  _34 = _32 * _33;
  MEM[base: pretmp_93, index: ivtmp.149_62, step: 8, offset: 0B] = _34;
  if (pretmp_94 > 0)
    goto <bb 14>;
  else
    goto <bb 12>;

  <bb 12>:
  ivtmp.149_45 = ivtmp.149_62 + 1;
  if (ivtmp.149_45 != _87)
    goto <bb 13>;
  else
    goto <bb 6>;

  <bb 13>:
  goto <bb 11>;

  <bb 14>:
  pretmp_98 = .omp_data_i_15(D)->A;
  pretmp_100 = pretmp_98 + pretmp_90;
  pretmp_103 = .omp_data_i_15(D)->B;
  _29 = &*pretmp_100[0];
  ivtmp.142_28 = (unsigned long) _29;
  _39 = &*pretmp_103[j_61];
  ivtmp.145_24 = (unsigned long) _39;
  _7 = (unsigned long) pretmp_100;
  _106 = _65 + 8;
  _88 = _106 + _7;

  <bb 15>:
  # prephitmp_97 = PHI <_51(16), _34(14)>
  # ivtmp.142_55 = PHI <ivtmp.142_60(16), ivtmp.142_28(14)>
  # ivtmp.145_30 = PHI <ivtmp.145_31(16), ivtmp.145_24(14)>
  _40 = (void *) ivtmp.142_55;
  _42 = MEM[base: _40, offset: 0B];
  _43 = .omp_data_i_15(D)->alpha;
  _44 = _42 * _43;
  _41 = (void *) ivtmp.145_30;
  _49 = MEM[base: _41, offset: 0B];
  _50 = _44 * _49;
  _51 = _50 + prephitmp_97;
  MEM[base: pretmp_93, index: ivtmp.149_62, step: 8, offset: 0B] = _51;
  ivtmp.142_60 = ivtmp.142_55 + 8;
  ivtmp.145_31 = ivtmp.145_30 + 32768;
  if (ivtmp.142_60 != _88)
    goto <bb 16>;
  else
    goto <bb 12>;

  <bb 16>:
  goto <bb 15>;

  <bb 17>:
  __builtin_GOMP_loop_end_nowait ();
  return;

}



;; Function void gemm_cuda_kernel(int, int, int, double, double, double*, double*, double*) (_Z16gemm_cuda_kerneliiiddPdS_S_, funcdef_no=3302, decl_uid=66844, cgraph_uid=3123)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12
;; 2 succs { 3 4 }
;; 3 succs { 12 }
;; 4 succs { 3 5 }
;; 5 succs { 3 6 }
;; 6 succs { 3 7 }
;; 7 succs { 3 8 }
;; 8 succs { 3 9 }
;; 9 succs { 3 10 }
;; 10 succs { 3 11 }
;; 11 succs { 12 }
;; 12 succs { 1 }

Value ranges after VRP:

_11: VARYING
_12: VARYING
_13: VARYING
_14: VARYING
_15: VARYING
_16: VARYING
_17: VARYING
_18: VARYING
.MEM_19: VARYING
.MEM_38: VARYING


void gemm_cuda_kernel(int, int, int, double, double, double*, double*, double*) (int __cuda_0, int __cuda_1, int __cuda_2, double __cuda_3, double __cuda_4, double * __cuda_5, double * __cuda_6, double * __cuda_7)
{
  static volatile char * __f;
  int __par0;
  int __par1;
  int __par2;
  double __par3;
  double __par4;
  double * __par5;
  double * __par6;
  double * __par7;
  cudaError _11;
  cudaError _12;
  cudaError _13;
  cudaError _14;
  cudaError _15;
  cudaError _16;
  cudaError _17;
  cudaError _18;

  <bb 2>:
  __par0 = __cuda_0_2(D);
  __par1 = __cuda_1_3(D);
  __par2 = __cuda_2_4(D);
  __par3 = __cuda_3_5(D);
  __par4 = __cuda_4_6(D);
  __par5 = __cuda_5_7(D);
  __par6 = __cuda_6_8(D);
  __par7 = __cuda_7_9(D);
  _11 = cudaSetupArgument (&__par0, 4, 0);
  if (_11 != 0)
    goto <bb 3>;
  else
    goto <bb 4>;

  <bb 3>:
  goto <bb 12>;

  <bb 4>:
  _12 = cudaSetupArgument (&__par1, 4, 4);
  if (_12 != 0)
    goto <bb 3>;
  else
    goto <bb 5>;

  <bb 5>:
  _13 = cudaSetupArgument (&__par2, 4, 8);
  if (_13 != 0)
    goto <bb 3>;
  else
    goto <bb 6>;

  <bb 6>:
  _14 = cudaSetupArgument (&__par3, 8, 16);
  if (_14 != 0)
    goto <bb 3>;
  else
    goto <bb 7>;

  <bb 7>:
  _15 = cudaSetupArgument (&__par4, 8, 24);
  if (_15 != 0)
    goto <bb 3>;
  else
    goto <bb 8>;

  <bb 8>:
  _16 = cudaSetupArgument (&__par5, 8, 32);
  if (_16 != 0)
    goto <bb 3>;
  else
    goto <bb 9>;

  <bb 9>:
  _17 = cudaSetupArgument (&__par6, 8, 40);
  if (_17 != 0)
    goto <bb 3>;
  else
    goto <bb 10>;

  <bb 10>:
  _18 = cudaSetupArgument (&__par7, 8, 48);
  if (_18 != 0)
    goto <bb 3>;
  else
    goto <bb 11>;

  <bb 11>:
  __f = gemm_cuda_kernel;
  cudaLaunch (gemm_cuda_kernel);

  <bb 12>:
  return;

}



;; Function float absVal(float) (_Z6absValf, funcdef_no=3240, decl_uid=65923, cgraph_uid=3062)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4
;; 2 succs { 3 4 }
;; 3 succs { 4 }
;; 4 succs { 1 }

Value ranges after VRP:

_1: VARYING
_3: VARYING


float absVal(float) (float a)
{
  float _1;
  float _3;

  <bb 2>:
  if (a_2(D) < 0.0)
    goto <bb 3>;
  else
    goto <bb 4>;

  <bb 3>:
  _3 = -a_2(D);

  <bb 4>:
  # _1 = PHI <_3(3), a_2(D)(2)>
  return _1;

}



;; Function float percentDiff(double, double) (_Z11percentDiffdd, funcdef_no=3241, decl_uid=65927, cgraph_uid=3063)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
;; 2 succs { 3 4 }
;; 3 succs { 4 }
;; 4 succs { 5 15 }
;; 5 succs { 6 7 }
;; 6 succs { 7 }
;; 7 succs { 14 15 }
;; 8 succs { 9 }
;; 9 succs { 10 11 }
;; 10 succs { 11 }
;; 11 succs { 12 13 }
;; 12 succs { 13 }
;; 13 succs { 14 }
;; 14 succs { 1 }
;; 15 succs { 8 9 }

Value ranges after VRP:

_2: VARYING
_4: VARYING
_5: VARYING
_7: VARYING
_8: VARYING
_9: VARYING
_10: VARYING
_11: VARYING
_12: VARYING
_13: VARYING
_14: VARYING
_16: VARYING
_17: VARYING
_18: VARYING
_19: VARYING
_20: VARYING
_21: VARYING
_22: VARYING
_23: VARYING
_24: VARYING
_25: VARYING


float percentDiff(double, double) (double val1, double val2)
{
  bool iftmp.1;
  float _2;
  float _4;
  double _5;
  float _7;
  double _8;
  double _9;
  float _10;
  double _11;
  float _12;
  float _13;
  float _14;
  float _16;
  float _17;
  float _18;
  float _19;
  float _20;
  float _21;
  float _22;
  float _23;
  float _24;
  float _25;

  <bb 2>:
  _4 = (float) val1_3(D);
  if (_4 < 0.0)
    goto <bb 3>;
  else
    goto <bb 4>;

  <bb 3>:
  _16 = -_4;

  <bb 4>:
  # _17 = PHI <_4(2), _16(3)>
  _5 = (double) _17;
  if (_5 < 1.00000000000000002081668171172168513294309377670288085938e-2)
    goto <bb 5>;
  else
    goto <bb 15>;

  <bb 5>:
  _7 = (float) val2_6(D);
  if (_7 < 0.0)
    goto <bb 6>;
  else
    goto <bb 7>;

  <bb 6>:
  _18 = -_7;

  <bb 7>:
  # _19 = PHI <_7(5), _18(6)>
  _8 = (double) _19;
  if (_8 < 1.00000000000000002081668171172168513294309377670288085938e-2)
    goto <bb 14>;
  else
    goto <bb 15>;

  <bb 8>:
  _20 = -_10;

  <bb 9>:
  # _21 = PHI <_10(15), _20(8)>
  _11 = val1_3(D) + 9.99999993922529029077850282192230224609375e-9;
  _12 = (float) _11;
  if (_12 < 0.0)
    goto <bb 10>;
  else
    goto <bb 11>;

  <bb 10>:
  _22 = -_12;

  <bb 11>:
  # _23 = PHI <_12(9), _22(10)>
  _13 = _21 / _23;
  if (_13 < 0.0)
    goto <bb 12>;
  else
    goto <bb 13>;

  <bb 12>:
  _24 = -_13;

  <bb 13>:
  # _25 = PHI <_13(11), _24(12)>
  _14 = _25 * 1.0e+2;

  <bb 14>:
  # _2 = PHI <0.0(7), _14(13)>
  return _2;

  <bb 15>:
  _9 = val1_3(D) - val2_6(D);
  _10 = (float) _9;
  if (_10 < 0.0)
    goto <bb 8>;
  else
    goto <bb 9>;

}



;; Function uint64_t get_time() (_Z8get_timev, funcdef_no=3246, decl_uid=66101, cgraph_uid=3068)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }

Value ranges after VRP:

_3: VARYING
_4: [0, +INF]
_5: [0, +INF]
_6: VARYING
_7: [0, +INF]
_8: [0, +INF]


uint64_t get_time() ()
{
  struct timespec spec;
  long int _3;
  long unsigned int _4;
  long unsigned int _5;
  long int _6;
  long unsigned int _7;
  uint64_t _8;

  <bb 2>:
  clock_gettime (1, &spec);
  _3 = spec.tv_sec;
  _4 = (long unsigned int) _3;
  _5 = _4 * 1000000000;
  _6 = spec.tv_nsec;
  _7 = (long unsigned int) _6;
  _8 = _5 + _7;
  spec ={v} {CLOBBER};
  return _8;

}



;; Function void hookomp_timing_start(uint64_t*) (_Z20hookomp_timing_startPm, funcdef_no=3247, decl_uid=66105, cgraph_uid=3069)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }

Value ranges after VRP:

_5: VARYING
_6: [0, +INF]
_7: [0, +INF]
_8: VARYING
_9: [0, +INF]
_10: [0, +INF]


void hookomp_timing_start(uint64_t*) (uint64_t * _start)
{
  struct timespec spec;
  long int _5;
  long unsigned int _6;
  long unsigned int _7;
  long int _8;
  long unsigned int _9;
  uint64_t _10;

  <bb 2>:
  clock_gettime (1, &spec);
  _5 = spec.tv_sec;
  _6 = (long unsigned int) _5;
  _7 = _6 * 1000000000;
  _8 = spec.tv_nsec;
  _9 = (long unsigned int) _8;
  _10 = _7 + _9;
  spec ={v} {CLOBBER};
  *_start_3(D) = _10;
  return;

}



;; Function void hookomp_timing_stop(uint64_t*) (_Z19hookomp_timing_stopPm, funcdef_no=3248, decl_uid=66108, cgraph_uid=3070)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }

Value ranges after VRP:

_5: VARYING
_6: [0, +INF]
_7: [0, +INF]
_8: VARYING
_9: [0, +INF]
_10: [0, +INF]


void hookomp_timing_stop(uint64_t*) (uint64_t * _stop)
{
  struct timespec spec;
  long int _5;
  long unsigned int _6;
  long unsigned int _7;
  long int _8;
  long unsigned int _9;
  uint64_t _10;

  <bb 2>:
  clock_gettime (1, &spec);
  _5 = spec.tv_sec;
  _6 = (long unsigned int) _5;
  _7 = _6 * 1000000000;
  _8 = spec.tv_nsec;
  _9 = (long unsigned int) _8;
  _10 = _7 + _9;
  spec ={v} {CLOBBER};
  *_stop_3(D) = _10;
  return;

}



;; Function void hookomp_timing_print(uint64_t, uint64_t) (_Z20hookomp_timing_printmm, funcdef_no=3249, decl_uid=66112, cgraph_uid=3071)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }

Value ranges after VRP:

tstop_1(D): VARYING
tstart_2(D): VARYING
_3: [0, +INF]


void hookomp_timing_print(uint64_t, uint64_t) (uint64_t tstart, uint64_t tstop)
{
  long unsigned int _3;

  <bb 2>:
  _3 = tstop_1(D) - tstart_2(D);
  __printf_chk (1, "%llu", _3);
  return;

}



;; Function void hookomp_timing_print_without_dev() (_Z32hookomp_timing_print_without_devv, funcdef_no=3250, decl_uid=66114, cgraph_uid=3072)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4
;; 2 succs { 3 4 }
;; 3 succs { 4 }
;; 4 succs { 1 }

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

total_time_29 -> { total_time_5 }
Incremental SSA update started at block: 2
Number of blocks in CFG: 5
Number of blocks to update: 2 ( 40%)



Value ranges after VRP:

iftmp.14_1: VARYING
omp_stop.2_3: VARYING
omp_start.3_4: VARYING
total_time_5: [0, +INF]
dev_kernel1_stop.4_6: VARYING
dev_kernel1_start.5_7: VARYING
_8: [0, +INF]
dev_kernel2_stop.6_9: VARYING
dev_kernel2_start.7_10: VARYING
_11: [0, +INF]
_12: [0, +INF]
dev_kernel3_stop.8_13: VARYING
dev_kernel3_start.9_14: VARYING
_15: [0, +INF]
dev_time_16: [0, +INF]
data_transfer_h2d_stop.10_17: VARYING
data_transfer_h2d_start.11_18: VARYING
_19: [0, +INF]
data_transfer_d2h_stop.12_20: VARYING
data_transfer_d2h_start.13_21: VARYING
_22: [0, +INF]
dt_time_23: [0, +INF]
_24: [0, +INF]
iftmp.14_25: [0, +INF]
_28: [0, +INF]
total_time_29: [1, +INF]  EQUIVALENCES: { total_time_5 } (1 elements)


void hookomp_timing_print_without_dev() ()
{
  uint64_t dt_time;
  uint64_t dev_time;
  uint64_t total_time;
  uint64_t iftmp.14;
  long unsigned int data_transfer_d2h_start.13;
  long unsigned int data_transfer_d2h_stop.12;
  long unsigned int data_transfer_h2d_start.11;
  long unsigned int data_transfer_h2d_stop.10;
  long unsigned int dev_kernel3_start.9;
  long unsigned int dev_kernel3_stop.8;
  long unsigned int dev_kernel2_start.7;
  long unsigned int dev_kernel2_stop.6;
  long unsigned int dev_kernel1_start.5;
  long unsigned int dev_kernel1_stop.4;
  long unsigned int omp_start.3;
  long unsigned int omp_stop.2;
  long unsigned int _8;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int _15;
  long unsigned int _19;
  long unsigned int _22;
  long unsigned int _24;
  long unsigned int _28;

  <bb 2>:
  omp_stop.2_3 = omp_stop;
  omp_start.3_4 = omp_start;
  total_time_5 = omp_stop.2_3 - omp_start.3_4;
  dev_kernel1_stop.4_6 = dev_kernel1_stop;
  dev_kernel1_start.5_7 = dev_kernel1_start;
  dev_kernel2_stop.6_9 = dev_kernel2_stop;
  dev_kernel2_start.7_10 = dev_kernel2_start;
  dev_kernel3_stop.8_13 = dev_kernel3_stop;
  dev_kernel3_start.9_14 = dev_kernel3_start;
  data_transfer_h2d_stop.10_17 = data_transfer_h2d_stop;
  data_transfer_h2d_start.11_18 = data_transfer_h2d_start;
  data_transfer_d2h_stop.12_20 = data_transfer_d2h_stop;
  data_transfer_d2h_start.13_21 = data_transfer_d2h_start;
  if (total_time_5 != 0)
    goto <bb 3>;
  else
    goto <bb 4>;

  <bb 3>:
  _8 = total_time_5 - dev_kernel1_stop.4_6;
  _11 = _8 - dev_kernel2_stop.6_9;
  _12 = _11 - dev_kernel3_stop.8_13;
  _15 = _12 - data_transfer_h2d_stop.10_17;
  _28 = -data_transfer_d2h_stop.12_20;
  dev_time_16 = dev_kernel2_start.7_10 + dev_kernel1_start.5_7;
  _24 = dev_time_16 + dev_kernel3_start.9_14;
  _22 = _24 + data_transfer_h2d_start.11_18;
  dt_time_23 = _22 + data_transfer_d2h_start.13_21;
  _19 = dt_time_23 - data_transfer_d2h_stop.12_20;
  iftmp.14_25 = _19 + _15;

  <bb 4>:
  # iftmp.14_1 = PHI <iftmp.14_25(3), 0(2)>
  __printf_chk (1, "%llu", iftmp.14_1);
  return;

}



;; Function void hookomp_print_time_results() (_Z26hookomp_print_time_resultsv, funcdef_no=3251, decl_uid=66119, cgraph_uid=3073)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4
;; 2 succs { 3 4 }
;; 3 succs { 4 }
;; 4 succs { 1 }

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

total_time_133 -> { total_time_108 }
Incremental SSA update started at block: 2
Number of blocks in CFG: 5
Number of blocks to update: 2 ( 40%)



Value ranges after VRP:

_1: [0, +INF]
stdout.15_3: VARYING
seq_stop.16_5: VARYING
seq_start.17_6: VARYING
stdout.15_8: VARYING
stdout.15_10: VARYING
omp_stop.18_12: VARYING
omp_start.19_13: VARYING
stdout.15_15: VARYING
stdout.15_17: VARYING
stdout.15_20: VARYING
stdout.15_22: VARYING
dev_kernel1_stop.20_24: VARYING
dev_kernel1_start.21_25: VARYING
stdout.15_27: VARYING
stdout.15_29: VARYING
dev_kernel2_stop.22_31: VARYING
dev_kernel2_start.23_32: VARYING
stdout.15_34: VARYING
stdout.15_36: VARYING
dev_kernel3_stop.24_38: VARYING
dev_kernel3_start.25_39: VARYING
stdout.15_41: VARYING
stdout.15_43: VARYING
data_transfer_h2d_stop.26_45: VARYING
data_transfer_h2d_start.27_46: VARYING
stdout.15_48: VARYING
stdout.15_50: VARYING
data_transfer_d2h_stop.28_52: VARYING
data_transfer_d2h_start.29_53: VARYING
reach_offload_decision_point.31_55: VARYING
stdout.15_56: VARYING
reach_offload_decision_point.31_58: VARYING
_59: [0, 1]
stdout.15_60: VARYING
decided_by_offloading.32_62: VARYING
_63: [0, 1]
stdout.15_64: VARYING
made_the_offloading.33_66: VARYING
_67: [0, 1]
stdout.15_68: VARYING
stdout.15_70: VARYING
_72: [0, +INF]
_73: [0, +INF]
_74: [0, +INF]
_75: [0, +INF]
_76: [0, +INF]
_77: [0, +INF]
_78: [0, +INF]
omp_stop.2_106: VARYING
omp_start.3_107: VARYING
total_time_108: [0, +INF]
dev_kernel1_stop.4_109: VARYING
dev_kernel1_start.5_110: VARYING
_111: [0, +INF]
dev_kernel2_stop.6_112: VARYING
dev_kernel2_start.7_113: VARYING
_114: [0, +INF]
_115: [0, +INF]
dev_kernel3_stop.8_116: VARYING
dev_kernel3_start.9_117: VARYING
_118: [0, +INF]
dev_time_119: [0, +INF]
data_transfer_h2d_stop.10_120: VARYING
data_transfer_h2d_start.11_121: VARYING
_122: [0, +INF]
data_transfer_d2h_stop.12_123: VARYING
data_transfer_d2h_start.13_124: VARYING
_125: [0, +INF]
dt_time_126: [0, +INF]
_127: [0, +INF]
iftmp.14_128: [0, +INF]
iftmp.14_129: VARYING
_131: [0, +INF]
_132: [0, 1]
total_time_133: [1, +INF]  EQUIVALENCES: { total_time_108 } (1 elements)


void hookomp_print_time_results() ()
{
  uint64_t dt_time;
  uint64_t dev_time;
  uint64_t total_time;
  uint64_t iftmp.14;
  long unsigned int data_transfer_d2h_start.13;
  long unsigned int data_transfer_d2h_stop.12;
  long unsigned int data_transfer_h2d_start.11;
  long unsigned int data_transfer_h2d_stop.10;
  long unsigned int dev_kernel3_start.9;
  long unsigned int dev_kernel3_stop.8;
  long unsigned int dev_kernel2_start.7;
  long unsigned int dev_kernel2_stop.6;
  long unsigned int dev_kernel1_start.5;
  long unsigned int dev_kernel1_stop.4;
  long unsigned int omp_start.3;
  long unsigned int omp_stop.2;
  bool made_the_offloading.33;
  bool decided_by_offloading.32;
  bool reach_offload_decision_point.31;
  int iftmp.30;
  long unsigned int data_transfer_d2h_start.29;
  long unsigned int data_transfer_d2h_stop.28;
  long unsigned int data_transfer_h2d_start.27;
  long unsigned int data_transfer_h2d_stop.26;
  long unsigned int dev_kernel3_start.25;
  long unsigned int dev_kernel3_stop.24;
  long unsigned int dev_kernel2_start.23;
  long unsigned int dev_kernel2_stop.22;
  long unsigned int dev_kernel1_start.21;
  long unsigned int dev_kernel1_stop.20;
  long unsigned int omp_start.19;
  long unsigned int omp_stop.18;
  long unsigned int seq_start.17;
  long unsigned int seq_stop.16;
  struct _IO_FILE * stdout.15;
  long unsigned int _1;
  int _59;
  int _63;
  int _67;
  long unsigned int _72;
  long unsigned int _73;
  long unsigned int _74;
  long unsigned int _75;
  long unsigned int _76;
  long unsigned int _77;
  long unsigned int _78;
  long unsigned int _111;
  long unsigned int _114;
  long unsigned int _115;
  long unsigned int _118;
  long unsigned int _122;
  long unsigned int _125;
  long unsigned int _127;
  bool _131;
  int _132;

  <bb 2>:
  stdout.15_3 = stdout;
  __fprintf_chk (stdout.15_3, 1, "ORIG = ");
  seq_stop.16_5 = seq_stop;
  seq_start.17_6 = seq_start;
  _72 = seq_stop.16_5 - seq_start.17_6;
  __printf_chk (1, "%llu", _72);
  stdout.15_8 = stdout;
  __fprintf_chk (stdout.15_8, 1, ", ");
  stdout.15_10 = stdout;
  __fprintf_chk (stdout.15_10, 1, "OMP_OFF = ");
  omp_stop.18_12 = omp_stop;
  omp_start.19_13 = omp_start;
  _73 = omp_stop.18_12 - omp_start.19_13;
  __printf_chk (1, "%llu", _73);
  stdout.15_15 = stdout;
  __fprintf_chk (stdout.15_15, 1, ", ");
  stdout.15_17 = stdout;
  __fprintf_chk (stdout.15_17, 1, "OMP = ");
  omp_stop.2_106 = omp_stop;
  omp_start.3_107 = omp_start;
  total_time_108 = omp_stop.2_106 - omp_start.3_107;
  dev_kernel1_stop.4_109 = dev_kernel1_stop;
  dev_kernel1_start.5_110 = dev_kernel1_start;
  dev_kernel2_stop.6_112 = dev_kernel2_stop;
  dev_kernel2_start.7_113 = dev_kernel2_start;
  dev_kernel3_stop.8_116 = dev_kernel3_stop;
  dev_kernel3_start.9_117 = dev_kernel3_start;
  data_transfer_h2d_stop.10_120 = data_transfer_h2d_stop;
  data_transfer_h2d_start.11_121 = data_transfer_h2d_start;
  data_transfer_d2h_stop.12_123 = data_transfer_d2h_stop;
  data_transfer_d2h_start.13_124 = data_transfer_d2h_start;
  if (total_time_108 != 0)
    goto <bb 3>;
  else
    goto <bb 4>;

  <bb 3>:
  _111 = total_time_108 - dev_kernel1_stop.4_109;
  _114 = _111 - dev_kernel2_stop.6_112;
  _115 = _114 - dev_kernel3_stop.8_116;
  _118 = _115 - data_transfer_h2d_stop.10_120;
  _1 = -data_transfer_d2h_stop.12_123;
  dev_time_119 = dev_kernel2_start.7_113 + dev_kernel1_start.5_110;
  _127 = dev_time_119 + dev_kernel3_start.9_117;
  _125 = _127 + data_transfer_h2d_start.11_121;
  dt_time_126 = _125 + data_transfer_d2h_start.13_124;
  _122 = dt_time_126 - data_transfer_d2h_stop.12_123;
  iftmp.14_128 = _122 + _118;

  <bb 4>:
  # iftmp.14_129 = PHI <0(2), iftmp.14_128(3)>
  __printf_chk (1, "%llu", iftmp.14_129);
  stdout.15_20 = stdout;
  __fprintf_chk (stdout.15_20, 1, ", ");
  stdout.15_22 = stdout;
  __fprintf_chk (stdout.15_22, 1, "CUDA_KERNEL1 = ");
  dev_kernel1_stop.20_24 = dev_kernel1_stop;
  dev_kernel1_start.21_25 = dev_kernel1_start;
  _74 = dev_kernel1_stop.20_24 - dev_kernel1_start.21_25;
  __printf_chk (1, "%llu", _74);
  stdout.15_27 = stdout;
  __fprintf_chk (stdout.15_27, 1, ", ");
  stdout.15_29 = stdout;
  __fprintf_chk (stdout.15_29, 1, "CUDA_KERNEL2 = ");
  dev_kernel2_stop.22_31 = dev_kernel2_stop;
  dev_kernel2_start.23_32 = dev_kernel2_start;
  _75 = dev_kernel2_stop.22_31 - dev_kernel2_start.23_32;
  __printf_chk (1, "%llu", _75);
  stdout.15_34 = stdout;
  __fprintf_chk (stdout.15_34, 1, ", ");
  stdout.15_36 = stdout;
  __fprintf_chk (stdout.15_36, 1, "CUDA_KERNEL3 = ");
  dev_kernel3_stop.24_38 = dev_kernel3_stop;
  dev_kernel3_start.25_39 = dev_kernel3_start;
  _76 = dev_kernel3_stop.24_38 - dev_kernel3_start.25_39;
  __printf_chk (1, "%llu", _76);
  stdout.15_41 = stdout;
  __fprintf_chk (stdout.15_41, 1, ", ");
  stdout.15_43 = stdout;
  __fprintf_chk (stdout.15_43, 1, "DT_H2D = ");
  data_transfer_h2d_stop.26_45 = data_transfer_h2d_stop;
  data_transfer_h2d_start.27_46 = data_transfer_h2d_start;
  _77 = data_transfer_h2d_stop.26_45 - data_transfer_h2d_start.27_46;
  __printf_chk (1, "%llu", _77);
  stdout.15_48 = stdout;
  __fprintf_chk (stdout.15_48, 1, ", ");
  stdout.15_50 = stdout;
  __fprintf_chk (stdout.15_50, 1, "DT_D2H = ");
  data_transfer_d2h_stop.28_52 = data_transfer_d2h_stop;
  data_transfer_d2h_start.29_53 = data_transfer_d2h_start;
  _78 = data_transfer_d2h_stop.28_52 - data_transfer_d2h_start.29_53;
  __printf_chk (1, "%llu", _78);
  reach_offload_decision_point.31_55 = reach_offload_decision_point;
  _131 = ~reach_offload_decision_point.31_55;
  _132 = (int) _131;
  stdout.15_56 = stdout;
  __fprintf_chk (stdout.15_56, 1, ", WORK_FINISHED_BEFORE_OFFLOAD_DECISION = %d", _132);
  reach_offload_decision_point.31_58 = reach_offload_decision_point;
  _59 = (int) reach_offload_decision_point.31_58;
  stdout.15_60 = stdout;
  __fprintf_chk (stdout.15_60, 1, ", REACH_OFFLOAD_DECISION_POINT = %d", _59);
  decided_by_offloading.32_62 = decided_by_offloading;
  _63 = (int) decided_by_offloading.32_62;
  stdout.15_64 = stdout;
  __fprintf_chk (stdout.15_64, 1, ", DECIDED_BY_OFFLOADING = %d", _63);
  made_the_offloading.33_66 = made_the_offloading;
  _67 = (int) made_the_offloading.33_66;
  stdout.15_68 = stdout;
  __fprintf_chk (stdout.15_68, 1, ", MADE_THE_OFFLOADING = %d", _67);
  stdout.15_70 = stdout;
  __fprintf_chk (stdout.15_70, 1, "\n");
  return;

}



;; Function bool create_target_functions_table(Func****, int, int) (_Z29create_target_functions_tablePPPP4Funcii, funcdef_no=3256, decl_uid=66664, cgraph_uid=3078)

;; 3 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
;;
;; Loop 1
;;  header 5, latch 13
;;  depth 1, outer 0
;;  nodes: 5 13 11 8 10 6 9 7
;;
;; Loop 2
;;  header 8, latch 9
;;  depth 2, outer 1
;;  nodes: 8 9
;; 2 succs { 3 14 }
;; 3 succs { 4 15 }
;; 4 succs { 5 }
;; 5 succs { 6 10 }
;; 6 succs { 7 11 }
;; 7 succs { 8 }
;; 8 succs { 9 11 }
;; 9 succs { 8 }
;; 10 succs { 11 }
;; 11 succs { 13 12 }
;; 12 succs { 15 }
;; 13 succs { 5 }
;; 14 succs { 15 }
;; 15 succs { 1 }

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

table_20 -> { table_17 }
table_21 -> { table_17 }
_43 -> { _27 }
nrows_63 -> { nrows_13(D) }
Incremental SSA update started at block: 2
Number of blocks in CFG: 16
Number of blocks to update: 9 ( 56%)



Value ranges after VRP:

result_1: VARYING
_2: VARYING
result_3: VARYING
_4: [8, 34359738368]
pretmp_5: [0, 18446744073709551608]
pretmp_6: ~[2147483648, 18446744071562067967]
.MEM_7: VARYING
_8: [1, 4294967296]
.MEM_9: VARYING
stderr.34_11: VARYING
nrows_13(D): VARYING
_14: ~[2147483648, 18446744071562067967]
_15: [0, 18446744073709551608]
table_17: VARYING
stderr.34_18: VARYING
table_20: ~[0B, 0B]  EQUIVALENCES: { table_17 } (1 elements)
table_21: [0B, 0B]  EQUIVALENCES: { table_17 } (1 elements)
ncolumns_23(D): VARYING
ivtmp.186_24: [8, 17179869176]
ivtmp.186_25: [0, 17179869168]
_27: VARYING
_29: [0, +INF]
ivtmp.191_30: ~[0, 0]
_31: [0, 17179869168]  EQUIVALENCES: { ivtmp.186_25 } (1 elements)
_32: VARYING
_34: VARYING
_36: VARYING
_37: VARYING
_38: VARYING
ivtmp.191_40: [0, +INF]
stderr.34_41: VARYING
_43: ~[0B, 0B]  EQUIVALENCES: { _27 } (1 elements)
stderr.34_44: VARYING
stderr.34_46: VARYING
_50: [0, 4294967295]
_56: [0, +INF]
_57: [8, 17179869176]
pretmp_58: VARYING
_59: ~[0, 0]
prephitmp_60: VARYING
_61: [0, 17179869168]
result_62: VARYING
nrows_63: [1, +INF]  EQUIVALENCES: { nrows_13(D) } (1 elements)
ivtmp.191_64: VARYING
.MEM_65: VARYING
.MEM_66: VARYING
_67: [0, 2147483646]
_68: [0, 2147483646]
_69: [1, 2147483647]
result_70: VARYING
_71: [0, +INF]
_72: VARYING
_73: VARYING


bool create_target_functions_table(Func****, int, int) (struct Func * * * * table_, int nrows, int ncolumns)
{
  unsigned long ivtmp.191;
  long unsigned int ivtmp.186;
  int j;
  int i;
  bool result;
  struct Func * * * table;
  struct _IO_FILE * stderr.34;
  void * _2;
  long unsigned int _4;
  long unsigned int pretmp_5;
  long unsigned int pretmp_6;
  long unsigned int _8;
  long unsigned int _14;
  long unsigned int _15;
  void * _27;
  unsigned int _29;
  long unsigned int _31;
  struct Func * * _32;
  void * _34;
  struct Func * * _36;
  struct Func * * _37;
  struct Func * _38;
  long unsigned int _50;
  unsigned int _56;
  unsigned long _57;
  struct Func * * pretmp_58;
  unsigned long _59;
  struct Func * * prephitmp_60;
  unsigned long _61;
  unsigned long _67;
  unsigned int _68;
  unsigned int _69;
  unsigned long _71;
  void * _72;
  void * _73;

  <bb 2>:
  stderr.34_11 = stderr;
  __fprintf_chk (stderr.34_11, 1, "Allocating the rows.\n");
  _14 = (long unsigned int) nrows_13(D);
  _15 = _14 * 8;
  table_17 = malloc (_15);
  if (table_17 != 0B)
    goto <bb 3>;
  else
    goto <bb 14>;

  <bb 3>:
  stderr.34_18 = stderr;
  __fprintf_chk (stderr.34_18, 1, "Allocating the columns.\n");
  if (nrows_13(D) > 0)
    goto <bb 4>;
  else
    goto <bb 15>;

  <bb 4>:
  pretmp_6 = (long unsigned int) ncolumns_23(D);
  pretmp_5 = pretmp_6 * 8;
  ivtmp.191_30 = (unsigned long) table_17;
  _69 = (unsigned int) nrows_13(D);
  _68 = _69 + 4294967295;
  _67 = (unsigned long) _68;
  _61 = _67 * 8;
  _59 = (unsigned long) table_17;
  _57 = _61 + 8;
  _71 = _57 + _59;
  _29 = (unsigned int) ncolumns_23(D);
  _56 = _29 + 4294967295;
  _50 = (long unsigned int) _56;
  _8 = _50 + 1;
  _4 = _8 * 8;

  <bb 5>:
  # result_62 = PHI <result_1(13), 1(4)>
  # ivtmp.191_64 = PHI <ivtmp.191_40(13), ivtmp.191_30(4)>
  _27 = malloc (pretmp_5);
  _2 = (void *) ivtmp.191_64;
  MEM[base: _2, offset: 0B] = _27;
  if (_27 != 0B)
    goto <bb 6>;
  else
    goto <bb 10>;

  <bb 6>:
  if (ncolumns_23(D) > 0)
    goto <bb 7>;
  else
    goto <bb 11>;

  <bb 7>:

  <bb 8>:
  # prephitmp_60 = PHI <pretmp_58(9), _27(7)>
  # ivtmp.186_25 = PHI <ivtmp.186_24(9), 0(7)>
  _31 = ivtmp.186_25;
  _32 = prephitmp_60 + _31;
  _34 = malloc (48);
  *_32 = _34;
  _72 = (void *) ivtmp.191_64;
  _36 = MEM[base: _72, offset: 0B];
  _37 = _36 + _31;
  _38 = *_37;
  _38->f = 0B;
  ivtmp.186_24 = ivtmp.186_25 + 8;
  if (ivtmp.186_24 != _4)
    goto <bb 9>;
  else
    goto <bb 11>;

  <bb 9>:
  _73 = (void *) ivtmp.191_64;
  pretmp_58 = MEM[base: _73, offset: 0B];
  goto <bb 8>;

  <bb 10>:
  stderr.34_41 = stderr;
  __fprintf_chk (stderr.34_41, 1, "Error in table of target functions allocation (columns).\n");

  <bb 11>:
  # result_1 = PHI <result_62(8), 0(10), result_62(6)>
  ivtmp.191_40 = ivtmp.191_64 + 8;
  if (ivtmp.191_40 != _71)
    goto <bb 13>;
  else
    goto <bb 12>;

  <bb 12>:
  # result_70 = PHI <result_1(11)>
  goto <bb 15>;

  <bb 13>:
  goto <bb 5>;

  <bb 14>:
  stderr.34_44 = stderr;
  __fprintf_chk (stderr.34_44, 1, "Error in table of target functions allocation (rows).\n");

  <bb 15>:
  # result_3 = PHI <result_70(12), 0(14), 1(3)>
  stderr.34_46 = stderr;
  __fprintf_chk (stderr.34_46, 1, "Allocating the columns is OK.\n");
  *table__48(D) = table_17;
  return result_3;

}



;; Function void call_function_ffi_call(Func*) (_Z22call_function_ffi_callP4Func, funcdef_no=3257, decl_uid=66679, cgraph_uid=3079)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4
;; 2 succs { 3 4 }
;; 3 succs { }
;; 4 succs { 1 }

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

ff_22 -> { ff_4(D) }
Incremental SSA update started at block: 2
Number of blocks in CFG: 5
Number of blocks to update: 2 ( 40%)



Value ranges after VRP:

stderr.35_2: VARYING
ff_4(D): VARYING
_5: VARYING
_6: VARYING
_7: VARYING
_8: [0, +INF]
_10: VARYING
stderr.35_11: VARYING
_14: VARYING
_15: VARYING
_16: VARYING
_17: VARYING
ff_22: ~[0B, 0B]  EQUIVALENCES: { ff_4(D) } (1 elements)


void call_function_ffi_call(Func*) (struct Func * ff)
{
  struct ffi_cif cif;
  struct _IO_FILE * stderr.35;
  struct ffi_type * * _5;
  struct ffi_type * _6;
  int _7;
  unsigned int _8;
  ffi_status _10;
  void * * _14;
  void * _15;
  void * _16;
  void (*<T19f3>) (void) _17;

  <bb 2>:
  stderr.35_2 = stderr;
  __fprintf_chk (stderr.35_2, 1, " In call_function_ffi_call.\n");
  _5 = ff_4(D)->arg_types;
  _6 = ff_4(D)->ret_type;
  _7 = ff_4(D)->nargs;
  _8 = (unsigned int) _7;
  _10 = ffi_prep_cif (&cif, 2, _8, _6, _5);
  if (_10 != 0)
    goto <bb 3>;
  else
    goto <bb 4>;

  <bb 3>:
  stderr.35_11 = stderr;
  __fprintf_chk (stderr.35_11, 1, "Error ffi_prep_cif.\n");
  exit (1);

  <bb 4>:
  _14 = ff_4(D)->arg_values;
  _15 = ff_4(D)->ret_value;
  _16 = ff_4(D)->f;
  _17 = (void (*<T19f3>) (void)) _16;
  ffi_call (&cif, _17, _15, _14);
  cif ={v} {CLOBBER};
  return;

}



;; Function void init_array(int, int, int, double*, double*, double (*)[4096], double (*)[4096], double (*)[4096]) (_Z10init_arrayiiiPdS_PA4096_dS1_S1_, funcdef_no=3258, decl_uid=66690, cgraph_uid=3080)

;; 13 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77
;;
;; Loop 5
;;  header 64, latch 63
;;  depth 1, outer 0
;;  nodes: 64 63 62 61 60 74 73 68 69 70 71 72 67 66 65 56 57 58 59 75 55 54 76
;;
;; Loop 6
;;  header 55, latch 54
;;  depth 2, outer 5
;;  nodes: 55 54
;;
;; Loop 3
;;  header 39, latch 38
;;  depth 1, outer 0
;;  nodes: 39 38 37 36 35 49 48 43 44 45 46 47 42 41 40 31 32 33 34 50 30 29 51
;;
;; Loop 4
;;  header 30, latch 29
;;  depth 2, outer 3
;;  nodes: 30 29
;;
;; Loop 1
;;  header 14, latch 13
;;  depth 1, outer 0
;;  nodes: 14 13 12 11 10 24 23 18 19 20 21 22 17 16 15 6 7 8 9 25 5 4 26
;;
;; Loop 2
;;  header 5, latch 4
;;  depth 2, outer 1
;;  nodes: 5 4
;; 2 succs { 3 27 }
;; 3 succs { 14 }
;; 4 succs { 5 }
;; 5 succs { 4 7 }
;; 6 succs { 10 }
;; 7 succs { 8 10 }
;; 8 succs { 9 10 }
;; 9 succs { 6 10 }
;; 10 succs { 11 }
;; 11 succs { 12 }
;; 12 succs { 13 27 }
;; 13 succs { 14 }
;; 14 succs { 15 12 }
;; 15 succs { 16 17 }
;; 16 succs { 17 }
;; 17 succs { 18 25 }
;; 18 succs { 19 24 }
;; 19 succs { 20 24 }
;; 20 succs { 21 24 }
;; 21 succs { 22 24 }
;; 22 succs { 23 24 }
;; 23 succs { 24 }
;; 24 succs { 25 11 }
;; 25 succs { 26 8 }
;; 26 succs { 5 }
;; 27 succs { 28 52 }
;; 28 succs { 39 }
;; 29 succs { 30 }
;; 30 succs { 29 32 }
;; 31 succs { 35 }
;; 32 succs { 33 35 }
;; 33 succs { 34 35 }
;; 34 succs { 31 35 }
;; 35 succs { 36 }
;; 36 succs { 37 }
;; 37 succs { 38 52 }
;; 38 succs { 39 }
;; 39 succs { 40 37 }
;; 40 succs { 41 42 }
;; 41 succs { 42 }
;; 42 succs { 43 50 }
;; 43 succs { 44 49 }
;; 44 succs { 45 49 }
;; 45 succs { 46 49 }
;; 46 succs { 47 49 }
;; 47 succs { 48 49 }
;; 48 succs { 49 }
;; 49 succs { 50 36 }
;; 50 succs { 51 33 }
;; 51 succs { 30 }
;; 52 succs { 53 77 }
;; 53 succs { 64 }
;; 54 succs { 55 }
;; 55 succs { 54 57 }
;; 56 succs { 60 }
;; 57 succs { 58 60 }
;; 58 succs { 59 60 }
;; 59 succs { 56 60 }
;; 60 succs { 61 }
;; 61 succs { 62 }
;; 62 succs { 63 77 }
;; 63 succs { 64 }
;; 64 succs { 65 62 }
;; 65 succs { 66 67 }
;; 66 succs { 67 }
;; 67 succs { 68 75 }
;; 68 succs { 69 74 }
;; 69 succs { 70 74 }
;; 70 succs { 71 74 }
;; 71 succs { 72 74 }
;; 72 succs { 73 74 }
;; 73 succs { 74 }
;; 74 succs { 75 61 }
;; 75 succs { 76 58 }
;; 76 succs { 55 }
;; 77 succs { 1 }
Adding assert for nj_33(D) from (unsigned int) nj_33(D)
Adding assert for nj_33(D) from (unsigned int) nj_33(D)
Adding assert for nj_33(D) from (unsigned int) nj_33(D)
Adding assert for nj_33(D) from (unsigned int) nj_33(D)
Adding assert for nk_20(D) from (unsigned int) nk_20(D)
Adding assert for nk_20(D) from (unsigned int) nk_20(D)

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

prologue_after_cost_adjust.228_6 -> { prologue_after_cost_adjust.228_165 }
prologue_after_cost_adjust.228_7 -> { prologue_after_cost_adjust.228_165 }
prologue_after_cost_adjust.228_21 -> { prologue_after_cost_adjust.228_165 }
prologue_after_cost_adjust.228_24 -> { prologue_after_cost_adjust.228_165 }
prologue_after_cost_adjust.254_26 -> { prologue_after_cost_adjust.254_243 }
prologue_after_cost_adjust.254_28 -> { prologue_after_cost_adjust.254_243 }
prologue_after_cost_adjust.254_29 -> { prologue_after_cost_adjust.254_243 }
j_35 -> { j_329 }
prologue_after_cost_adjust.254_41 -> { prologue_after_cost_adjust.254_243 }
prologue_after_cost_adjust.254_42 -> { prologue_after_cost_adjust.254_243 }
prologue_after_cost_adjust.254_43 -> { prologue_after_cost_adjust.254_243 }
prologue_after_cost_adjust.254_51 -> { prologue_after_cost_adjust.254_243 }
prologue_after_cost_adjust.228_65 -> { prologue_after_cost_adjust.228_165 }
prologue_after_cost_adjust.228_94 -> { prologue_after_cost_adjust.228_165 }
ni_100 -> { ni_18(D) }
nk_101 -> { nk_20(D) }
prologue_after_cost_adjust.202_156 -> { prologue_after_cost_adjust.202_62 }
nj_162 -> { nj_33(D) }
j_170 -> { j_336 }
nj_172 -> { nj_33(D) }
nj_173 -> { nj_33(D) }
prologue_after_cost_adjust.254_219 -> { prologue_after_cost_adjust.254_243 }
ni_223 -> { ni_18(D) }
pretmp_224 -> { pretmp_2 }
ni_225 -> { ni_18(D) }
nk_226 -> { nk_20(D) }
j_248 -> { j_388 }
ni_288 -> { ni_18(D) }
nk_289 -> { nk_20(D) }
nj_300 -> { nj_33(D) }
ratio_mult_vf.258_301 -> { ratio_mult_vf.258_256 }
nj_302 -> { nj_33(D) }
prologue_after_cost_adjust.254_303 -> { prologue_after_cost_adjust.254_243 }
prologue_after_cost_adjust.254_304 -> { prologue_after_cost_adjust.254_243 }
prologue_after_cost_adjust.254_305 -> { prologue_after_cost_adjust.254_243 }
prologue_after_cost_adjust.254_307 -> { prologue_after_cost_adjust.254_243 }
prologue_after_cost_adjust.254_312 -> { prologue_after_cost_adjust.254_243 }
ratio_mult_vf.232_313 -> { ratio_mult_vf.232_178 }
prologue_after_cost_adjust.228_314 -> { prologue_after_cost_adjust.228_165 }
prologue_after_cost_adjust.228_316 -> { prologue_after_cost_adjust.228_165 }
prologue_after_cost_adjust.228_321 -> { prologue_after_cost_adjust.228_165 }
prologue_after_cost_adjust.228_322 -> { prologue_after_cost_adjust.228_165 }
prologue_after_cost_adjust.228_337 -> { prologue_after_cost_adjust.228_165 }
prologue_after_cost_adjust.228_339 -> { prologue_after_cost_adjust.228_165 }
prologue_after_cost_adjust.228_344 -> { prologue_after_cost_adjust.228_165 }
ratio_mult_vf.206_345 -> { ratio_mult_vf.206_104 }
pretmp_346 -> { pretmp_102 }
pretmp_348 -> { pretmp_89 }
j_353 -> { j_81 }
j_354 -> { j_80 }
prologue_after_cost_adjust.202_355 -> { prologue_after_cost_adjust.202_62 }
prologue_after_cost_adjust.202_357 -> { prologue_after_cost_adjust.202_62 }
prologue_after_cost_adjust.202_362 -> { prologue_after_cost_adjust.202_62 }
prologue_after_cost_adjust.202_363 -> { prologue_after_cost_adjust.202_62 }
prologue_after_cost_adjust.202_364 -> { prologue_after_cost_adjust.202_62 }
prologue_after_cost_adjust.202_366 -> { prologue_after_cost_adjust.202_62 }
prologue_after_cost_adjust.202_371 -> { prologue_after_cost_adjust.202_62 }
prologue_after_cost_adjust.202_372 -> { prologue_after_cost_adjust.202_62 }
prologue_after_cost_adjust.202_373 -> { prologue_after_cost_adjust.202_62 }
prologue_after_cost_adjust.202_375 -> { prologue_after_cost_adjust.202_62 }
prologue_after_cost_adjust.202_380 -> { prologue_after_cost_adjust.202_62 }
prologue_after_cost_adjust.202_381 -> { prologue_after_cost_adjust.202_62 }
nj_396 -> { nj_33(D) }
nj_398 -> { nj_33(D) }
nj_403 -> { nj_33(D) }
nj_404 -> { nj_33(D) }
nj_405 -> { nj_33(D) }
nj_407 -> { nj_33(D) }
nj_412 -> { nj_33(D) }
nk_413 -> { nk_20(D) }
nk_414 -> { nk_20(D) }
nk_416 -> { nk_20(D) }
nk_421 -> { nk_20(D) }
nk_422 -> { nk_20(D) }
nk_423 -> { nk_20(D) }
j_444 -> { j_395 }
Incremental SSA update started at block: 2
Number of blocks in CFG: 134
Number of blocks to update: 113 ( 84%)



Value ranges after VRP:

j_1: VARYING
pretmp_2: VARYING
_3: [1, 2147483647]
niters.204_4: ~[2147483648, 4294967290]
prolog_loop_adjusted_niters.203_5: [0, 6]
prologue_after_cost_adjust.228_6: [4, 6]  EQUIVALENCES: { prologue_after_cost_adjust.228_7 prologue_after_cost_adjust.228_165 prologue_after_cost_adjust.228_316 prologue_after_cost_adjust.228_322 } (4 elements)
prologue_after_cost_adjust.228_7: [3, 6]  EQUIVALENCES: { prologue_after_cost_adjust.228_165 prologue_after_cost_adjust.228_316 prologue_after_cost_adjust.228_322 } (3 elements)
ivtmp.275_8: [0, 536870911]
_10: VARYING
_11: VARYING
.MEM_12: VARYING
ni_18(D): VARYING
_19: ~[1, 18446744073709551614]
nk_20(D): VARYING
prologue_after_cost_adjust.228_21: [5, 6]  EQUIVALENCES: { prologue_after_cost_adjust.228_6 prologue_after_cost_adjust.228_7 prologue_after_cost_adjust.228_165 prologue_after_cost_adjust.228_316 prologue_after_cost_adjust.228_322 } (5 elements)
ivtmp.275_22: [1, 536870912]
A_23(D): VARYING
prologue_after_cost_adjust.228_24: [4, 4]  EQUIVALENCES: { prologue_after_cost_adjust.228_6 prologue_after_cost_adjust.228_7 prologue_after_cost_adjust.228_165 prologue_after_cost_adjust.228_316 prologue_after_cost_adjust.228_322 } (5 elements)
j_25: [-INF, nj_412 + -1]  EQUIVALENCES: { j_81 } (1 elements)
prologue_after_cost_adjust.254_26: [1, 1]  EQUIVALENCES: { prologue_after_cost_adjust.254_42 prologue_after_cost_adjust.254_243 } (2 elements)
.MEM_27: VARYING
prologue_after_cost_adjust.254_28: [2, 6]  EQUIVALENCES: { prologue_after_cost_adjust.254_42 prologue_after_cost_adjust.254_243 } (2 elements)
prologue_after_cost_adjust.254_29: [0, 0]  EQUIVALENCES: { prologue_after_cost_adjust.254_243 } (1 elements)
_30: VARYING
i_31: [1, +INF]
.MEM_32: VARYING
nj_33(D): VARYING
_34: VARYING
j_35: [-INF, nj_396 + -1]  EQUIVALENCES: { j_329 } (1 elements)
B_36(D): VARYING
niters.197_37: [1, 2147483647]
ivtmp.295_38: [0, +INF]
_39: VARYING
prologue_after_cost_adjust.254_41: [2, 2]  EQUIVALENCES: { prologue_after_cost_adjust.254_28 prologue_after_cost_adjust.254_42 prologue_after_cost_adjust.254_243 } (3 elements)
prologue_after_cost_adjust.254_42: [1, 6]  EQUIVALENCES: { prologue_after_cost_adjust.254_243 } (1 elements)
prologue_after_cost_adjust.254_43: [3, 3]  EQUIVALENCES: { prologue_after_cost_adjust.254_28 prologue_after_cost_adjust.254_42 prologue_after_cost_adjust.254_219 prologue_after_cost_adjust.254_243 } (4 elements)
i_44: [1, +INF]
.MEM_45: VARYING
ivtmp.293_46: [0, 536870911]
ivtmp.295_47: VARYING
C_48(D): VARYING
_49: VARYING
prolog_loop_niters.201_50: [0, 1]
prologue_after_cost_adjust.254_51: [4, 6]  EQUIVALENCES: { prologue_after_cost_adjust.254_28 prologue_after_cost_adjust.254_42 prologue_after_cost_adjust.254_219 prologue_after_cost_adjust.254_243 } (4 elements)
_52: VARYING
_53: VARYING
.MEM_54: VARYING
i_56: [1, +INF]
j_57: [1, 6]
_58: [0, 1]
.MEM_59: VARYING
.MEM_60: VARYING
j_61: [0, 6]
prologue_after_cost_adjust.202_62: [0, 6]
prologue_after_cost_adjust.202_63: [1, 6]
_64: [0, +INF]
prologue_after_cost_adjust.228_65: [3, 3]  EQUIVALENCES: { prologue_after_cost_adjust.228_7 prologue_after_cost_adjust.228_165 prologue_after_cost_adjust.228_316 prologue_after_cost_adjust.228_322 } (4 elements)
_67: VARYING
_68: VARYING
_69: VARYING
_70: VARYING
pretmp_71: VARYING
_72: VARYING
_73: VARYING
_74: VARYING
_75: VARYING
i_76: [0, 2147483646]
i_77: [0, 2147483646]
i_78: [0, 2147483646]
j_80: VARYING
j_81: VARYING
.MEM_82: VARYING
_83: ~[1, 4294967294]
.MEM_84: VARYING
_85: [0, 1]
.MEM_86: VARYING
_87: [ivtmp.287_142, ivtmp.287_142]  EQUIVALENCES: { ivtmp.287_142 } (1 elements)
_88: [0, 15]
pretmp_89: VARYING
pretmp_90: VARYING
_91: VARYING
.MEM_92: VARYING
.MEM_93: VARYING
prologue_after_cost_adjust.228_94: [2, 2]  EQUIVALENCES: { prologue_after_cost_adjust.228_165 prologue_after_cost_adjust.228_316 prologue_after_cost_adjust.228_322 } (3 elements)
j_95: [-INF, nj_412 + -1]  EQUIVALENCES: { j_80 } (1 elements)
.MEM_96: VARYING
.MEM_97: VARYING
.MEM_98: VARYING
.MEM_99: VARYING
ni_100: [-INF, 0]  EQUIVALENCES: { ni_18(D) } (1 elements)
nk_101: [-INF, j_395]  EQUIVALENCES: { nk_20(D) nk_414 nk_423 } (3 elements)
pretmp_102: VARYING
pretmp_103: VARYING
ratio_mult_vf.206_104: [0, 4294967292]
bnd.205_105: [0, 1073741823]
.MEM_106: VARYING
.MEM_107: VARYING
j_108: VARYING
.MEM_110: VARYING
.MEM_111: VARYING
_112: VARYING
_113: VARYING
tmp.207_114: [-INF, +INF(OVF)]
_115: ~[-3, 0]
stmp_var_.208_116: [1, 7]
stmp_var_.208_117: [2, 8]
stmp_var_.208_118: [3, 9]
vect_cst_.209_119: VARYING
vect_cst_.210_120: VARYING
vect_vec_iv_.211_121: VARYING
vect_vec_iv_.211_122: VARYING
vect_var_.212_123: VARYING
vect_var_.212_124: VARYING
vect_cst_.214_125: VARYING
vect_var_.213_126: VARYING
vect_var_.213_127: VARYING
vect_cst_.216_128: VARYING
vect_var_.215_129: VARYING
vect_var_.215_130: VARYING
batmp.218_131: VARYING
ivtmp.293_132: [1, 536870912]
ivtmp.295_133: [0, +INF]
base_off.219_134: [0, 48]
vect_p.220_135: VARYING
ivtmp.287_136: [0, +INF]
_137: VARYING
_139: VARYING
_141: VARYING
ivtmp.287_142: VARYING
ivtmp.287_143: [0, +INF]
niters.223_144: [1, 2147483647]
ivtmp.313_145: [0, +INF]
ivtmp.311_146: [0, 536870911]
ivtmp.313_147: VARYING
_148: VARYING
prolog_loop_niters.227_149: [0, 1]
_150: [ivtmp.305_220, ivtmp.305_220]  EQUIVALENCES: { ivtmp.305_220 } (1 elements)
_151: [0, 15]
_152: [0, 1]
_153: ~[1, 18446744073709551614]
_154: ~[1, 4294967294]
_155: [0, 1]
prologue_after_cost_adjust.202_156: ~[niters.197_37, niters.197_37]  EQUIVALENCES: { prologue_after_cost_adjust.202_62 prologue_after_cost_adjust.202_357 } (2 elements)
.MEM_157: VARYING
_158: VARYING
_159: VARYING
_160: VARYING
nj_162: [1, +INF]  EQUIVALENCES: { nj_33(D) } (1 elements)
_163: [0, +INF]
prologue_after_cost_adjust.228_164: [1, 6]
prologue_after_cost_adjust.228_165: [0, 6]
j_166: [0, 6]
j_167: [1, 6]
.MEM_168: VARYING
.MEM_169: VARYING
j_170: [-INF, nj_403 + -1]  EQUIVALENCES: { j_336 } (1 elements)
.MEM_171: VARYING
nj_172: [-INF, 0]  EQUIVALENCES: { nj_33(D) } (1 elements)
nj_173: [7, +INF]  EQUIVALENCES: { nj_33(D) nj_162 } (2 elements)
prolog_loop_adjusted_niters.229_174: [0, 6]
niters.230_175: ~[2147483648, 4294967290]
_176: [1, 2147483647]
bnd.231_177: [0, 1073741823]
ratio_mult_vf.232_178: [0, 4294967292]
j_179: [-INF, nj_403 + -1]  EQUIVALENCES: { j_336 } (1 elements)
.MEM_180: VARYING
_181: VARYING
_182: VARYING
_183: VARYING
j_185: VARYING
j_186: VARYING
.MEM_188: VARYING
.MEM_189: VARYING
_190: VARYING
_191: VARYING
tmp.233_192: [-INF, +INF(OVF)]
_193: ~[-3, 0]
stmp_var_.234_194: [1, 7]
stmp_var_.234_195: [2, 8]
stmp_var_.234_196: [3, 9]
vect_cst_.235_197: VARYING
vect_cst_.236_198: VARYING
vect_vec_iv_.237_199: VARYING
vect_vec_iv_.237_200: VARYING
vect_var_.238_201: VARYING
vect_var_.238_202: VARYING
vect_cst_.240_203: VARYING
vect_var_.239_204: VARYING
vect_var_.239_205: VARYING
vect_cst_.242_206: VARYING
vect_var_.241_207: VARYING
vect_var_.241_208: VARYING
batmp.244_209: VARYING
ivtmp.311_210: [1, 536870912]
ivtmp.313_211: [0, +INF]
base_off.245_212: [0, 48]
vect_p.246_213: VARYING
ivtmp.305_214: [0, +INF]
_215: VARYING
_217: VARYING
prologue_after_cost_adjust.254_219: [3, 6]  EQUIVALENCES: { prologue_after_cost_adjust.254_28 prologue_after_cost_adjust.254_42 prologue_after_cost_adjust.254_243 } (3 elements)
ivtmp.305_220: VARYING
ivtmp.305_221: [0, +INF]
niters.249_222: [1, 2147483647]
ni_223: [1, +INF]  EQUIVALENCES: { ni_18(D) } (1 elements)
pretmp_224: ~[0B, 0B]  EQUIVALENCES: { pretmp_2 } (1 elements)
ni_225: [1, +INF]  EQUIVALENCES: { ni_18(D) i_31 ni_223 } (3 elements)
nk_226: [j_395 + 1, +INF]  EQUIVALENCES: { nk_20(D) nk_414 nk_423 } (3 elements)
prolog_loop_niters.253_227: [0, 1]
_228: [ivtmp.323_298, ivtmp.323_298]  EQUIVALENCES: { ivtmp.323_298 } (1 elements)
_229: [0, 15]
_230: [0, 1]
_231: ~[1, 18446744073709551614]
_232: ~[1, 4294967294]
_233: [0, 1]
_234: VARYING
.MEM_235: VARYING
_236: VARYING
_237: VARYING
_238: VARYING
_240: VARYING
_241: [0, +INF]
prologue_after_cost_adjust.254_242: [1, 6]
prologue_after_cost_adjust.254_243: [0, 6]
j_244: [0, 6]
j_245: [1, 6]
.MEM_246: VARYING
.MEM_247: VARYING
j_248: [-INF, nk_423 + -1]  EQUIVALENCES: { j_388 } (1 elements)
.MEM_249: VARYING
_250: VARYING
_251: VARYING
prolog_loop_adjusted_niters.255_252: [0, 6]
niters.256_253: ~[2147483648, 4294967290]
_254: [1, 2147483647]
bnd.257_255: [0, 1073741823]
ratio_mult_vf.258_256: [0, 4294967292]
j_257: [-INF, nk_226 + -1]  EQUIVALENCES: { j_395 } (1 elements)
.MEM_258: VARYING
_259: VARYING
_260: VARYING
_261: VARYING
j_263: VARYING
j_264: VARYING
_265: VARYING
.MEM_266: VARYING
.MEM_267: VARYING
_268: VARYING
_269: VARYING
tmp.259_270: [-INF, +INF(OVF)]
_271: ~[-3, 0]
stmp_var_.260_272: [1, 7]
stmp_var_.260_273: [2, 8]
stmp_var_.260_274: [3, 9]
vect_cst_.261_275: VARYING
vect_cst_.262_276: VARYING
vect_vec_iv_.263_277: VARYING
vect_vec_iv_.263_278: VARYING
vect_var_.264_279: VARYING
vect_var_.264_280: VARYING
vect_cst_.266_281: VARYING
vect_var_.265_282: VARYING
vect_var_.265_283: VARYING
vect_cst_.268_284: VARYING
vect_var_.267_285: VARYING
vect_var_.267_286: VARYING
batmp.270_287: VARYING
ni_288: [1, +INF]  EQUIVALENCES: { ni_18(D) } (1 elements)
nk_289: [1, +INF]  EQUIVALENCES: { nk_20(D) } (1 elements)
base_off.271_290: [0, 48]
vect_p.272_291: VARYING
ivtmp.323_292: [0, +INF]
_293: VARYING
_295: VARYING
_297: VARYING
ivtmp.323_298: VARYING
ivtmp.323_299: [0, +INF]
nj_300: [1, 6]  EQUIVALENCES: { nj_33(D) nj_162 } (2 elements)
ratio_mult_vf.258_301: [1, 4294967292]  EQUIVALENCES: { ratio_mult_vf.258_256 } (1 elements)
nj_302: [-INF, j_329]  EQUIVALENCES: { nj_33(D) nj_162 } (2 elements)
prologue_after_cost_adjust.254_303: [4, 4]  EQUIVALENCES: { prologue_after_cost_adjust.254_28 prologue_after_cost_adjust.254_42 prologue_after_cost_adjust.254_51 prologue_after_cost_adjust.254_219 prologue_after_cost_adjust.254_243 } (5 elements)
prologue_after_cost_adjust.254_304: [5, 6]  EQUIVALENCES: { prologue_after_cost_adjust.254_28 prologue_after_cost_adjust.254_42 prologue_after_cost_adjust.254_51 prologue_after_cost_adjust.254_219 prologue_after_cost_adjust.254_243 } (5 elements)
prologue_after_cost_adjust.254_305: [5, 5]  EQUIVALENCES: { prologue_after_cost_adjust.254_28 prologue_after_cost_adjust.254_42 prologue_after_cost_adjust.254_51 prologue_after_cost_adjust.254_219 prologue_after_cost_adjust.254_243 prologue_after_cost_adjust.254_304 } (6 elements)
.MEM_306: VARYING
prologue_after_cost_adjust.254_307: [6, 6]  EQUIVALENCES: { prologue_after_cost_adjust.254_28 prologue_after_cost_adjust.254_42 prologue_after_cost_adjust.254_51 prologue_after_cost_adjust.254_219 prologue_after_cost_adjust.254_243 prologue_after_cost_adjust.254_304 } (6 elements)
_308: VARYING
_309: VARYING
_310: VARYING
prologue_after_cost_adjust.254_312: ~[niters.249_222, niters.249_222]  EQUIVALENCES: { prologue_after_cost_adjust.254_42 prologue_after_cost_adjust.254_243 } (2 elements)
ratio_mult_vf.232_313: [1, 4294967292]  EQUIVALENCES: { ratio_mult_vf.232_178 } (1 elements)
prologue_after_cost_adjust.228_314: [0, 0]  EQUIVALENCES: { prologue_after_cost_adjust.228_165 } (1 elements)
.MEM_315: VARYING
prologue_after_cost_adjust.228_316: [1, 6]  EQUIVALENCES: { prologue_after_cost_adjust.228_165 } (1 elements)
_317: VARYING
_318: VARYING
_319: VARYING
prologue_after_cost_adjust.228_321: [1, 1]  EQUIVALENCES: { prologue_after_cost_adjust.228_165 prologue_after_cost_adjust.228_316 } (2 elements)
prologue_after_cost_adjust.228_322: [2, 6]  EQUIVALENCES: { prologue_after_cost_adjust.228_165 prologue_after_cost_adjust.228_316 } (2 elements)
ivtmp.277_323: [0, +INF]
ivtmp.277_324: VARYING
_325: VARYING
_326: VARYING
_327: VARYING
j_329: VARYING
j_330: [-INF, nj_396 + -1]  EQUIVALENCES: { j_329 } (1 elements)
.MEM_331: VARYING
_332: VARYING
_333: VARYING
_334: VARYING
j_336: VARYING
prologue_after_cost_adjust.228_337: [5, 5]  EQUIVALENCES: { prologue_after_cost_adjust.228_6 prologue_after_cost_adjust.228_7 prologue_after_cost_adjust.228_21 prologue_after_cost_adjust.228_165 prologue_after_cost_adjust.228_316 prologue_after_cost_adjust.228_322 } (6 elements)
.MEM_338: VARYING
prologue_after_cost_adjust.228_339: [6, 6]  EQUIVALENCES: { prologue_after_cost_adjust.228_6 prologue_after_cost_adjust.228_7 prologue_after_cost_adjust.228_21 prologue_after_cost_adjust.228_165 prologue_after_cost_adjust.228_316 prologue_after_cost_adjust.228_322 } (6 elements)
_340: VARYING
_341: VARYING
_342: VARYING
prologue_after_cost_adjust.228_344: ~[niters.223_144, niters.223_144]  EQUIVALENCES: { prologue_after_cost_adjust.228_165 prologue_after_cost_adjust.228_316 } (2 elements)
ratio_mult_vf.206_345: [1, 4294967292]  EQUIVALENCES: { ratio_mult_vf.206_104 } (1 elements)
pretmp_346: ~[0B, 0B]  EQUIVALENCES: { pretmp_102 } (1 elements)
.MEM_347: VARYING
pretmp_348: ~[0B, 0B]  EQUIVALENCES: { pretmp_89 } (1 elements)
_349: VARYING
_350: VARYING
_351: VARYING
j_353: [-INF, nj_412 + -1]  EQUIVALENCES: { j_81 } (1 elements)
j_354: [-INF, nj_412 + -1]  EQUIVALENCES: { j_80 } (1 elements)
prologue_after_cost_adjust.202_355: [0, 0]  EQUIVALENCES: { prologue_after_cost_adjust.202_62 } (1 elements)
.MEM_356: VARYING
prologue_after_cost_adjust.202_357: [1, 6]  EQUIVALENCES: { prologue_after_cost_adjust.202_62 } (1 elements)
_358: VARYING
_359: VARYING
_360: VARYING
prologue_after_cost_adjust.202_362: [1, 1]  EQUIVALENCES: { prologue_after_cost_adjust.202_62 prologue_after_cost_adjust.202_357 } (2 elements)
prologue_after_cost_adjust.202_363: [2, 6]  EQUIVALENCES: { prologue_after_cost_adjust.202_62 prologue_after_cost_adjust.202_357 } (2 elements)
prologue_after_cost_adjust.202_364: [2, 2]  EQUIVALENCES: { prologue_after_cost_adjust.202_62 prologue_after_cost_adjust.202_357 prologue_after_cost_adjust.202_363 } (3 elements)
.MEM_365: VARYING
prologue_after_cost_adjust.202_366: [3, 6]  EQUIVALENCES: { prologue_after_cost_adjust.202_62 prologue_after_cost_adjust.202_357 prologue_after_cost_adjust.202_363 } (3 elements)
_367: VARYING
_368: VARYING
_369: VARYING
prologue_after_cost_adjust.202_371: [3, 3]  EQUIVALENCES: { prologue_after_cost_adjust.202_62 prologue_after_cost_adjust.202_357 prologue_after_cost_adjust.202_363 prologue_after_cost_adjust.202_366 } (4 elements)
prologue_after_cost_adjust.202_372: [4, 6]  EQUIVALENCES: { prologue_after_cost_adjust.202_62 prologue_after_cost_adjust.202_357 prologue_after_cost_adjust.202_363 prologue_after_cost_adjust.202_366 } (4 elements)
prologue_after_cost_adjust.202_373: [4, 4]  EQUIVALENCES: { prologue_after_cost_adjust.202_62 prologue_after_cost_adjust.202_357 prologue_after_cost_adjust.202_363 prologue_after_cost_adjust.202_366 prologue_after_cost_adjust.202_372 } (5 elements)
.MEM_374: VARYING
prologue_after_cost_adjust.202_375: [5, 6]  EQUIVALENCES: { prologue_after_cost_adjust.202_62 prologue_after_cost_adjust.202_357 prologue_after_cost_adjust.202_363 prologue_after_cost_adjust.202_366 prologue_after_cost_adjust.202_372 } (5 elements)
_376: VARYING
_377: VARYING
_378: VARYING
prologue_after_cost_adjust.202_380: [5, 5]  EQUIVALENCES: { prologue_after_cost_adjust.202_62 prologue_after_cost_adjust.202_357 prologue_after_cost_adjust.202_363 prologue_after_cost_adjust.202_366 prologue_after_cost_adjust.202_372 prologue_after_cost_adjust.202_375 } (6 elements)
prologue_after_cost_adjust.202_381: [6, 6]  EQUIVALENCES: { prologue_after_cost_adjust.202_62 prologue_after_cost_adjust.202_357 prologue_after_cost_adjust.202_363 prologue_after_cost_adjust.202_366 prologue_after_cost_adjust.202_372 prologue_after_cost_adjust.202_375 } (6 elements)
_382: VARYING
ivtmp.277_383: [0, +INF]
_384: VARYING
_385: VARYING
_386: VARYING
j_388: VARYING
j_389: [-INF, nk_423 + -1]  EQUIVALENCES: { j_388 } (1 elements)
.MEM_390: VARYING
_391: VARYING
_392: VARYING
_393: VARYING
j_395: VARYING
nj_396: [j_329 + 1, +INF]  EQUIVALENCES: { nj_33(D) nj_162 } (2 elements)
.MEM_397: VARYING
nj_398: [-INF, j_336]  EQUIVALENCES: { nj_33(D) nj_162 nj_396 } (3 elements)
_399: VARYING
_400: VARYING
_401: VARYING
nj_403: [j_336 + 1, +INF]  EQUIVALENCES: { nj_33(D) nj_162 nj_396 } (3 elements)
nj_404: [1, +INF]  EQUIVALENCES: { nj_33(D) } (1 elements)
nj_405: [7, +INF]  EQUIVALENCES: { nj_33(D) nj_404 } (2 elements)
.MEM_406: VARYING
nj_407: [1, 6]  EQUIVALENCES: { nj_33(D) nj_404 } (2 elements)
_408: VARYING
_409: VARYING
_410: VARYING
nj_412: [j_81 + 1, +INF]  EQUIVALENCES: { nj_33(D) nj_404 } (2 elements)
nk_413: [-INF, 0]  EQUIVALENCES: { nk_20(D) } (1 elements)
nk_414: [1, +INF]  EQUIVALENCES: { nk_20(D) } (1 elements)
.MEM_415: VARYING
nk_416: [7, +INF]  EQUIVALENCES: { nk_20(D) nk_414 } (2 elements)
_417: VARYING
_418: VARYING
_419: VARYING
nk_421: [1, 6]  EQUIVALENCES: { nk_20(D) nk_414 } (2 elements)
nk_422: [-INF, j_388]  EQUIVALENCES: { nk_20(D) nk_414 } (2 elements)
nk_423: [j_388 + 1, +INF]  EQUIVALENCES: { nk_20(D) nk_414 } (2 elements)
.MEM_424: VARYING
_425: VARYING
_426: VARYING
_427: VARYING
_428: VARYING
_430: VARYING
_431: VARYING
_432: VARYING
.MEM_433: VARYING
_434: VARYING
_435: VARYING
_436: VARYING
_437: VARYING
_439: VARYING
_440: VARYING
.MEM_441: VARYING
.MEM_442: VARYING
.MEM_443: VARYING
j_444: [-INF, nk_226 + -1]  EQUIVALENCES: { j_395 } (1 elements)


Simplified relational if (prologue_after_cost_adjust.254_42 > 1)
 into if (prologue_after_cost_adjust.254_42 != 1)

Simplified relational if (prologue_after_cost_adjust.254_28 > 2)
 into if (prologue_after_cost_adjust.254_28 != 2)

Simplified relational if (prologue_after_cost_adjust.254_219 > 3)
 into if (prologue_after_cost_adjust.254_219 != 3)

Simplified relational if (prologue_after_cost_adjust.254_51 > 4)
 into if (prologue_after_cost_adjust.254_51 != 4)

Simplified relational if (prologue_after_cost_adjust.254_304 > 5)
 into if (prologue_after_cost_adjust.254_304 == 6)

Simplified relational if (prologue_after_cost_adjust.228_316 > 1)
 into if (prologue_after_cost_adjust.228_316 != 1)

Simplified relational if (prologue_after_cost_adjust.228_322 > 2)
 into if (prologue_after_cost_adjust.228_322 != 2)

Simplified relational if (prologue_after_cost_adjust.228_7 > 3)
 into if (prologue_after_cost_adjust.228_7 != 3)

Simplified relational if (prologue_after_cost_adjust.228_6 > 4)
 into if (prologue_after_cost_adjust.228_6 != 4)

Simplified relational if (prologue_after_cost_adjust.228_21 > 5)
 into if (prologue_after_cost_adjust.228_21 == 6)

Simplified relational if (prologue_after_cost_adjust.202_357 > 1)
 into if (prologue_after_cost_adjust.202_357 != 1)

Simplified relational if (prologue_after_cost_adjust.202_363 > 2)
 into if (prologue_after_cost_adjust.202_363 != 2)

Simplified relational if (prologue_after_cost_adjust.202_366 > 3)
 into if (prologue_after_cost_adjust.202_366 != 3)

Simplified relational if (prologue_after_cost_adjust.202_372 > 4)
 into if (prologue_after_cost_adjust.202_372 != 4)

Simplified relational if (prologue_after_cost_adjust.202_375 > 5)
 into if (prologue_after_cost_adjust.202_375 == 6)

Removing basic block 78
Removing basic block 79
Removing basic block 80
Removing basic block 81
Removing basic block 82
Removing basic block 83
Removing basic block 84
Removing basic block 85
Removing basic block 86
Removing basic block 87
Removing basic block 88
Removing basic block 89
Removing basic block 90
Removing basic block 91
Removing basic block 92
Removing basic block 93
Removing basic block 94
Removing basic block 95
Removing basic block 96
Removing basic block 97
Removing basic block 98
Removing basic block 99
Removing basic block 100
Removing basic block 101
Removing basic block 102
Removing basic block 103
Removing basic block 104
Removing basic block 105
Removing basic block 106
Removing basic block 107
Removing basic block 108
Removing basic block 109
Removing basic block 110
Removing basic block 111
Removing basic block 112
Removing basic block 113
Removing basic block 114
Removing basic block 115
Removing basic block 116
Removing basic block 117
Removing basic block 118
Removing basic block 119
Removing basic block 120
Removing basic block 121
Removing basic block 122
Removing basic block 123
Removing basic block 124
Removing basic block 125
Removing basic block 126
Removing basic block 127
Removing basic block 128
Removing basic block 129
Removing basic block 130
Removing basic block 131
Removing basic block 132
Removing basic block 133

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

prologue_after_cost_adjust.228_156 -> { prologue_after_cost_adjust.228_165 }
prologue_after_cost_adjust.254_345 -> { prologue_after_cost_adjust.254_243 }
prologue_after_cost_adjust.254_366 -> { prologue_after_cost_adjust.254_243 }
prologue_after_cost_adjust.254_371 -> { prologue_after_cost_adjust.254_243 }
prologue_after_cost_adjust.228_372 -> { prologue_after_cost_adjust.228_165 }
prologue_after_cost_adjust.228_373 -> { prologue_after_cost_adjust.228_165 }
prologue_after_cost_adjust.202_375 -> { prologue_after_cost_adjust.202_62 }
prologue_after_cost_adjust.202_380 -> { prologue_after_cost_adjust.202_62 }
prologue_after_cost_adjust.202_381 -> { prologue_after_cost_adjust.202_62 }
Incremental SSA update started at block: 2
Number of blocks in CFG: 81
Number of blocks to update: 33 ( 41%)


void init_array(int, int, int, double*, double*, double (*)[4096], double (*)[4096], double (*)[4096]) (int ni, int nj, int nk, double * alpha, double * beta, double[4096] * A, double[4096] * B, double[4096] * C)
{
  unsigned long ivtmp.323;
  unsigned long ivtmp.313;
  unsigned int ivtmp.311;
  unsigned long ivtmp.305;
  unsigned long ivtmp.295;
  unsigned int ivtmp.293;
  unsigned long ivtmp.287;
  unsigned long ivtmp.277;
  unsigned int ivtmp.275;
  vector(4) int vect_cst_.274;
  vector(4) int vect_j.273;
  vector(2) double * vect_p.272;
  sizetype base_off.271;
  double[4096] * batmp.270;
  vector(2) double * vect_p.269;
  vector(2) double vect_cst_.268;
  vector(2) double vect_var_.267;
  vector(2) double vect_cst_.266;
  vector(2) double vect_var_.265;
  vector(2) double vect_var_.264;
  vector(4) int vect_vec_iv_.263;
  vector(4) int vect_cst_.262;
  vector(4) int vect_cst_.261;
  int stmp_var_.260;
  int tmp.259;
  unsigned int ratio_mult_vf.258;
  unsigned int bnd.257;
  unsigned int niters.256;
  sizetype prolog_loop_adjusted_niters.255;
  unsigned int prologue_after_cost_adjust.254;
  unsigned int prolog_loop_niters.253;
  vector(2) double * vect_p.252;
  sizetype base_off.251;
  double[4096] * batmp.250;
  unsigned int niters.249;
  vector(4) int vect_cst_.248;
  vector(4) int vect_j.247;
  vector(2) double * vect_p.246;
  sizetype base_off.245;
  double[4096] * batmp.244;
  vector(2) double * vect_p.243;
  vector(2) double vect_cst_.242;
  vector(2) double vect_var_.241;
  vector(2) double vect_cst_.240;
  vector(2) double vect_var_.239;
  vector(2) double vect_var_.238;
  vector(4) int vect_vec_iv_.237;
  vector(4) int vect_cst_.236;
  vector(4) int vect_cst_.235;
  int stmp_var_.234;
  int tmp.233;
  unsigned int ratio_mult_vf.232;
  unsigned int bnd.231;
  unsigned int niters.230;
  sizetype prolog_loop_adjusted_niters.229;
  unsigned int prologue_after_cost_adjust.228;
  unsigned int prolog_loop_niters.227;
  vector(2) double * vect_p.226;
  sizetype base_off.225;
  double[4096] * batmp.224;
  unsigned int niters.223;
  vector(4) int vect_cst_.222;
  vector(4) int vect_j.221;
  vector(2) double * vect_p.220;
  sizetype base_off.219;
  double[4096] * batmp.218;
  vector(2) double * vect_p.217;
  vector(2) double vect_cst_.216;
  vector(2) double vect_var_.215;
  vector(2) double vect_cst_.214;
  vector(2) double vect_var_.213;
  vector(2) double vect_var_.212;
  vector(4) int vect_vec_iv_.211;
  vector(4) int vect_cst_.210;
  vector(4) int vect_cst_.209;
  int stmp_var_.208;
  int tmp.207;
  unsigned int ratio_mult_vf.206;
  unsigned int bnd.205;
  unsigned int niters.204;
  sizetype prolog_loop_adjusted_niters.203;
  unsigned int prologue_after_cost_adjust.202;
  unsigned int prolog_loop_niters.201;
  vector(2) double * vect_p.200;
  sizetype base_off.199;
  double[4096] * batmp.198;
  unsigned int niters.197;
  int j;
  int i;
  double[4096] * pretmp_2;
  unsigned int _3;
  void * _10;
  double _11;
  unsigned long _19;
  double _30;
  double _34;
  double _39;
  void * _49;
  double _52;
  double _53;
  unsigned int _58;
  unsigned int _64;
  double _67;
  double _68;
  double _69;
  void * _70;
  double pretmp_71;
  void * _72;
  void * _73;
  double _74;
  double _75;
  unsigned int _83;
  unsigned long _85;
  unsigned long _87;
  unsigned long _88;
  double[4096] * pretmp_89;
  double pretmp_90;
  double _91;
  double[4096] * pretmp_102;
  double pretmp_103;
  double _112;
  double _113;
  int _115;
  void * _137;
  void * _139;
  double _141;
  void * _148;
  unsigned long _150;
  unsigned long _151;
  unsigned long _152;
  unsigned long _153;
  unsigned int _154;
  unsigned int _155;
  double _158;
  double _159;
  double _160;
  unsigned int _163;
  unsigned int _176;
  double _181;
  double _182;
  double _183;
  double _190;
  double _191;
  int _193;
  void * _215;
  void * _217;
  unsigned long _228;
  unsigned long _229;
  unsigned long _230;
  unsigned long _231;
  unsigned int _232;
  unsigned int _233;
  void * _234;
  double _236;
  double _237;
  double _238;
  void * _240;
  unsigned int _241;
  void * _250;
  void * _251;
  unsigned int _254;
  double _259;
  double _260;
  double _261;
  double _265;
  double _268;
  double _269;
  int _271;
  void * _293;
  void * _295;
  double _297;
  double _308;
  double _309;
  double _310;
  double _317;
  double _318;
  double _319;
  double _325;
  double _326;
  double _327;
  double _332;
  double _333;
  double _334;
  double _340;
  double _341;
  double _342;
  double _349;
  double _350;
  double _351;
  double _358;
  double _359;
  double _360;
  double _367;
  double _368;
  double _369;
  double _376;
  double _377;
  double _378;
  void * _382;
  double _384;
  double _385;
  double _386;
  double _391;
  double _392;
  double _393;
  double _399;
  double _400;
  double _401;
  double _408;
  double _409;
  double _410;
  double _417;
  double _418;
  double _419;
  void * _425;
  double _426;
  double _427;
  double _428;
  void * _430;
  void * _431;
  void * _432;
  void * _434;
  double _435;
  double _436;
  double _437;
  void * _439;
  void * _440;

  <bb 2>:
  *alpha_14(D) = 3.2412e+4;
  *beta_16(D) = 2.123e+3;
  if (ni_18(D) > 0)
    goto <bb 3>;
  else
    goto <bb 27>;

  <bb 3>:
  ivtmp.323_299 = (unsigned long) A_23(D);
  _241 = (unsigned int) nk_20(D);
  goto <bb 14>;

  <bb 4>:

  <bb 5>:
  # vect_vec_iv_.263_277 = PHI <vect_vec_iv_.263_278(4), vect_cst_.261_275(26)>
  # ivtmp.311_146 = PHI <ivtmp.311_210(4), 0(26)>
  # ivtmp.313_147 = PHI <ivtmp.313_145(4), ivtmp.313_211(26)>
  vect_vec_iv_.263_278 = vect_vec_iv_.263_277 + vect_cst_.262_276;
  vect_var_.264_279 = [vec_unpack_float_lo_expr] vect_vec_iv_.263_277;
  vect_var_.264_280 = [vec_unpack_float_hi_expr] vect_vec_iv_.263_277;
  vect_var_.265_282 = vect_var_.264_279 * vect_cst_.266_281;
  vect_var_.265_283 = vect_var_.264_280 * vect_cst_.266_281;
  vect_var_.267_285 = vect_var_.265_282 * vect_cst_.268_284;
  vect_var_.267_286 = vect_var_.265_283 * vect_cst_.268_284;
  _148 = (void *) ivtmp.313_147;
  MEM[base: _148, offset: 0B] = vect_var_.267_285;
  _73 = (void *) ivtmp.313_147;
  MEM[base: _73, offset: 16B] = vect_var_.267_286;
  ivtmp.311_210 = ivtmp.311_146 + 1;
  ivtmp.313_145 = ivtmp.313_147 + 32;
  if (ivtmp.311_210 < bnd.257_255)
    goto <bb 4>;
  else
    goto <bb 7>;

  <bb 6>:
  # j_257 = PHI <j_395(9)>
  _259 = (double) j_257;
  _260 = _259 * pretmp_103;
  _261 = _260 * 2.44140625e-4;
  *pretmp_102[j_257] = _261;
  j_263 = j_257 + 1;
  goto <bb 10>;

  <bb 7>:
  _271 = (int) ratio_mult_vf.258_256;
  tmp.259_270 = j_244 + _271;
  if (niters.256_253 == ratio_mult_vf.258_256)
    goto <bb 10>;
  else
    goto <bb 8>;

  <bb 8>:
  # j_264 = PHI <tmp.259_270(7), j_244(25)>
  _384 = (double) j_264;
  _385 = _384 * pretmp_103;
  _386 = _385 * 2.44140625e-4;
  *pretmp_102[j_264] = _386;
  j_388 = j_264 + 1;
  if (nk_20(D) > j_388)
    goto <bb 9>;
  else
    goto <bb 10>;

  <bb 9>:
  # j_389 = PHI <j_388(8)>
  _391 = (double) j_389;
  _392 = _391 * pretmp_103;
  _393 = _392 * 2.44140625e-4;
  *pretmp_102[j_389] = _393;
  j_395 = j_389 + 1;
  if (nk_20(D) > j_395)
    goto <bb 6>;
  else
    goto <bb 10>;

  <bb 10>:

  <bb 11>:

  <bb 12>:
  i_31 = i_76 + 1;
  ivtmp.323_292 = ivtmp.323_298 + 32768;
  if (i_31 != ni_18(D))
    goto <bb 13>;
  else
    goto <bb 27>;

  <bb 13>:

  <bb 14>:
  # i_76 = PHI <i_31(13), 0(3)>
  # ivtmp.323_298 = PHI <ivtmp.323_292(13), ivtmp.323_299(3)>
  if (nk_20(D) > 0)
    goto <bb 15>;
  else
    goto <bb 12>;

  <bb 15>:
  pretmp_102 = (double[4096] *) ivtmp.323_298;
  pretmp_103 = (double) i_76;
  niters.249_222 = (unsigned int) nk_20(D);
  _228 = ivtmp.323_298;
  _229 = _228 & 15;
  _230 = _229 >> 3;
  _231 = -_230;
  _232 = (unsigned int) _231;
  _233 = _232 & 1;
  prolog_loop_niters.253_227 = MIN_EXPR <_233, niters.249_222>;
  if (_241 <= 6)
    goto <bb 16>;
  else
    goto <bb 17>;

  <bb 16>:
  prologue_after_cost_adjust.254_242 = (unsigned int) nk_20(D);
  goto <bb 78>;

  <bb 17>:
  # prologue_after_cost_adjust.254_243 = PHI <prolog_loop_niters.253_227(15)>
  if (prologue_after_cost_adjust.254_243 == 0)
    goto <bb 25>;
  else
    goto <bb 18>;

  <bb 18>:
  # prologue_after_cost_adjust.254_371 = PHI <prologue_after_cost_adjust.254_345(78), prologue_after_cost_adjust.254_243(17)>
  _399 = 0.0;
  _400 = _399 * pretmp_103;
  _401 = _400 * 2.44140625e-4;
  _293 = (void *) ivtmp.323_298;
  MEM[base: _293, offset: 0B] = _401;
  if (prologue_after_cost_adjust.254_371 != 1)
    goto <bb 19>;
  else
    goto <bb 24>;

  <bb 19>:
  _408 = 1.0e+0;
  _409 = _408 * pretmp_103;
  _410 = _409 * 2.44140625e-4;
  _72 = (void *) ivtmp.323_298;
  MEM[base: _72, offset: 8B] = _410;
  if (prologue_after_cost_adjust.254_371 != 2)
    goto <bb 20>;
  else
    goto <bb 24>;

  <bb 20>:
  _417 = 2.0e+0;
  _418 = _417 * pretmp_103;
  _419 = _418 * 2.44140625e-4;
  _431 = (void *) ivtmp.323_298;
  MEM[base: _431, offset: 16B] = _419;
  if (prologue_after_cost_adjust.254_371 != 3)
    goto <bb 21>;
  else
    goto <bb 24>;

  <bb 21>:
  _426 = 3.0e+0;
  _427 = _426 * pretmp_103;
  _428 = _427 * 2.44140625e-4;
  _430 = (void *) ivtmp.323_298;
  MEM[base: _430, offset: 24B] = _428;
  if (prologue_after_cost_adjust.254_371 != 4)
    goto <bb 22>;
  else
    goto <bb 24>;

  <bb 22>:
  _435 = 4.0e+0;
  _436 = _435 * pretmp_103;
  _437 = _436 * 2.44140625e-4;
  _425 = (void *) ivtmp.323_298;
  MEM[base: _425, offset: 32B] = _437;
  if (prologue_after_cost_adjust.254_371 == 6)
    goto <bb 23>;
  else
    goto <bb 24>;

  <bb 23>:
  _236 = 5.0e+0;
  _237 = _236 * pretmp_103;
  _238 = _237 * 2.44140625e-4;
  _295 = (void *) ivtmp.323_298;
  MEM[base: _295, offset: 40B] = _238;

  <bb 24>:
  # j_245 = PHI <6(23), 1(18), 2(19), 3(20), 4(21), 5(22)>
  if (niters.249_222 == prologue_after_cost_adjust.254_371)
    goto <bb 11>;
  else
    goto <bb 25>;

  <bb 25>:
  # j_244 = PHI <j_245(24), 0(17)>
  # prologue_after_cost_adjust.254_366 = PHI <prologue_after_cost_adjust.254_371(24), prologue_after_cost_adjust.254_243(17)>
  prolog_loop_adjusted_niters.255_252 = (sizetype) prologue_after_cost_adjust.254_366;
  _254 = (unsigned int) nk_20(D);
  niters.256_253 = _254 - prologue_after_cost_adjust.254_366;
  bnd.257_255 = niters.256_253 >> 2;
  ratio_mult_vf.258_256 = bnd.257_255 << 2;
  if (ratio_mult_vf.258_256 == 0)
    goto <bb 8>;
  else
    goto <bb 26>;

  <bb 26>:
  stmp_var_.260_272 = j_244 + 1;
  stmp_var_.260_273 = stmp_var_.260_272 + 1;
  stmp_var_.260_274 = stmp_var_.260_273 + 1;
  vect_cst_.261_275 = {j_244, stmp_var_.260_272, stmp_var_.260_273, stmp_var_.260_274};
  vect_cst_.262_276 = { 4, 4, 4, 4 };
  vect_cst_.266_281 = {pretmp_103, pretmp_103};
  vect_cst_.268_284 = { 2.44140625e-4, 2.44140625e-4 };
  batmp.270_287 = (double[4096] *) ivtmp.323_298;
  base_off.271_290 = prolog_loop_adjusted_niters.255_252 * 8;
  vect_p.272_291 = batmp.270_287 + base_off.271_290;
  ivtmp.313_211 = (unsigned long) vect_p.272_291;
  goto <bb 5>;

  <bb 27>:
  if (nk_20(D) > 0)
    goto <bb 28>;
  else
    goto <bb 52>;

  <bb 28>:
  ivtmp.305_221 = (unsigned long) B_36(D);
  _163 = (unsigned int) nj_33(D);
  goto <bb 39>;

  <bb 29>:

  <bb 30>:
  # vect_vec_iv_.237_199 = PHI <vect_vec_iv_.237_200(29), vect_cst_.235_197(51)>
  # ivtmp.293_46 = PHI <ivtmp.293_132(29), 0(51)>
  # ivtmp.295_47 = PHI <ivtmp.295_38(29), ivtmp.295_133(51)>
  vect_vec_iv_.237_200 = vect_vec_iv_.237_199 + vect_cst_.236_198;
  vect_var_.238_201 = [vec_unpack_float_lo_expr] vect_vec_iv_.237_199;
  vect_var_.238_202 = [vec_unpack_float_hi_expr] vect_vec_iv_.237_199;
  vect_var_.239_204 = vect_var_.238_201 * vect_cst_.240_203;
  vect_var_.239_205 = vect_var_.238_202 * vect_cst_.240_203;
  vect_var_.241_207 = vect_var_.239_204 * vect_cst_.242_206;
  vect_var_.241_208 = vect_var_.239_205 * vect_cst_.242_206;
  _70 = (void *) ivtmp.295_47;
  MEM[base: _70, offset: 0B] = vect_var_.241_207;
  _49 = (void *) ivtmp.295_47;
  MEM[base: _49, offset: 16B] = vect_var_.241_208;
  ivtmp.293_132 = ivtmp.293_46 + 1;
  ivtmp.295_38 = ivtmp.295_47 + 32;
  if (ivtmp.293_132 < bnd.231_177)
    goto <bb 29>;
  else
    goto <bb 32>;

  <bb 31>:
  # j_179 = PHI <j_336(34)>
  _181 = (double) j_179;
  _182 = _181 * pretmp_90;
  _183 = _182 * 2.44140625e-4;
  *pretmp_89[j_179] = _183;
  j_185 = j_179 + 1;
  goto <bb 35>;

  <bb 32>:
  _193 = (int) ratio_mult_vf.232_178;
  tmp.233_192 = j_166 + _193;
  if (niters.230_175 == ratio_mult_vf.232_178)
    goto <bb 35>;
  else
    goto <bb 33>;

  <bb 33>:
  # j_186 = PHI <tmp.233_192(32), j_166(50)>
  _325 = (double) j_186;
  _326 = _325 * pretmp_90;
  _327 = _326 * 2.44140625e-4;
  *pretmp_89[j_186] = _327;
  j_329 = j_186 + 1;
  if (nj_33(D) > j_329)
    goto <bb 34>;
  else
    goto <bb 35>;

  <bb 34>:
  # j_330 = PHI <j_329(33)>
  _332 = (double) j_330;
  _333 = _332 * pretmp_90;
  _334 = _333 * 2.44140625e-4;
  *pretmp_89[j_330] = _334;
  j_336 = j_330 + 1;
  if (nj_33(D) > j_336)
    goto <bb 31>;
  else
    goto <bb 35>;

  <bb 35>:

  <bb 36>:

  <bb 37>:
  i_44 = i_77 + 1;
  ivtmp.305_214 = ivtmp.305_220 + 32768;
  if (i_44 != nk_20(D))
    goto <bb 38>;
  else
    goto <bb 52>;

  <bb 38>:

  <bb 39>:
  # i_77 = PHI <i_44(38), 0(28)>
  # ivtmp.305_220 = PHI <ivtmp.305_214(38), ivtmp.305_221(28)>
  if (nj_33(D) > 0)
    goto <bb 40>;
  else
    goto <bb 37>;

  <bb 40>:
  pretmp_89 = (double[4096] *) ivtmp.305_220;
  pretmp_90 = (double) i_77;
  niters.223_144 = (unsigned int) nj_33(D);
  _150 = ivtmp.305_220;
  _151 = _150 & 15;
  _152 = _151 >> 3;
  _153 = -_152;
  _154 = (unsigned int) _153;
  _155 = _154 & 1;
  prolog_loop_niters.227_149 = MIN_EXPR <_155, niters.223_144>;
  if (_163 <= 6)
    goto <bb 41>;
  else
    goto <bb 42>;

  <bb 41>:
  prologue_after_cost_adjust.228_164 = (unsigned int) nj_33(D);
  goto <bb 79>;

  <bb 42>:
  # prologue_after_cost_adjust.228_165 = PHI <prolog_loop_niters.227_149(40)>
  if (prologue_after_cost_adjust.228_165 == 0)
    goto <bb 50>;
  else
    goto <bb 43>;

  <bb 43>:
  # prologue_after_cost_adjust.228_373 = PHI <prologue_after_cost_adjust.228_156(79), prologue_after_cost_adjust.228_165(42)>
  _340 = 0.0;
  _341 = _340 * pretmp_90;
  _342 = _341 * 2.44140625e-4;
  _215 = (void *) ivtmp.305_220;
  MEM[base: _215, offset: 0B] = _342;
  if (prologue_after_cost_adjust.228_373 != 1)
    goto <bb 44>;
  else
    goto <bb 49>;

  <bb 44>:
  _349 = 1.0e+0;
  _350 = _349 * pretmp_90;
  _351 = _350 * 2.44140625e-4;
  _10 = (void *) ivtmp.305_220;
  MEM[base: _10, offset: 8B] = _351;
  if (prologue_after_cost_adjust.228_373 != 2)
    goto <bb 45>;
  else
    goto <bb 49>;

  <bb 45>:
  _358 = 2.0e+0;
  _359 = _358 * pretmp_90;
  _360 = _359 * 2.44140625e-4;
  _439 = (void *) ivtmp.305_220;
  MEM[base: _439, offset: 16B] = _360;
  if (prologue_after_cost_adjust.228_373 != 3)
    goto <bb 46>;
  else
    goto <bb 49>;

  <bb 46>:
  _367 = 3.0e+0;
  _368 = _367 * pretmp_90;
  _369 = _368 * 2.44140625e-4;
  _434 = (void *) ivtmp.305_220;
  MEM[base: _434, offset: 24B] = _369;
  if (prologue_after_cost_adjust.228_373 != 4)
    goto <bb 47>;
  else
    goto <bb 49>;

  <bb 47>:
  _376 = 4.0e+0;
  _377 = _376 * pretmp_90;
  _378 = _377 * 2.44140625e-4;
  _432 = (void *) ivtmp.305_220;
  MEM[base: _432, offset: 32B] = _378;
  if (prologue_after_cost_adjust.228_373 == 6)
    goto <bb 48>;
  else
    goto <bb 49>;

  <bb 48>:
  _158 = 5.0e+0;
  _159 = _158 * pretmp_90;
  _160 = _159 * 2.44140625e-4;
  _217 = (void *) ivtmp.305_220;
  MEM[base: _217, offset: 40B] = _160;

  <bb 49>:
  # j_167 = PHI <6(48), 1(43), 2(44), 3(45), 4(46), 5(47)>
  if (niters.223_144 == prologue_after_cost_adjust.228_373)
    goto <bb 36>;
  else
    goto <bb 50>;

  <bb 50>:
  # j_166 = PHI <j_167(49), 0(42)>
  # prologue_after_cost_adjust.228_372 = PHI <prologue_after_cost_adjust.228_373(49), prologue_after_cost_adjust.228_165(42)>
  prolog_loop_adjusted_niters.229_174 = (sizetype) prologue_after_cost_adjust.228_372;
  _176 = (unsigned int) nj_33(D);
  niters.230_175 = _176 - prologue_after_cost_adjust.228_372;
  bnd.231_177 = niters.230_175 >> 2;
  ratio_mult_vf.232_178 = bnd.231_177 << 2;
  if (ratio_mult_vf.232_178 == 0)
    goto <bb 33>;
  else
    goto <bb 51>;

  <bb 51>:
  stmp_var_.234_194 = j_166 + 1;
  stmp_var_.234_195 = stmp_var_.234_194 + 1;
  stmp_var_.234_196 = stmp_var_.234_195 + 1;
  vect_cst_.235_197 = {j_166, stmp_var_.234_194, stmp_var_.234_195, stmp_var_.234_196};
  vect_cst_.236_198 = { 4, 4, 4, 4 };
  vect_cst_.240_203 = {pretmp_90, pretmp_90};
  vect_cst_.242_206 = { 2.44140625e-4, 2.44140625e-4 };
  batmp.244_209 = (double[4096] *) ivtmp.305_220;
  base_off.245_212 = prolog_loop_adjusted_niters.229_174 * 8;
  vect_p.246_213 = batmp.244_209 + base_off.245_212;
  ivtmp.295_133 = (unsigned long) vect_p.246_213;
  goto <bb 30>;

  <bb 52>:
  if (ni_18(D) > 0)
    goto <bb 53>;
  else
    goto <bb 77>;

  <bb 53>:
  ivtmp.287_143 = (unsigned long) C_48(D);
  _64 = (unsigned int) nj_33(D);
  goto <bb 64>;

  <bb 54>:

  <bb 55>:
  # vect_vec_iv_.211_121 = PHI <vect_vec_iv_.211_122(54), vect_cst_.209_119(76)>
  # ivtmp.275_8 = PHI <ivtmp.275_22(54), 0(76)>
  # ivtmp.277_324 = PHI <ivtmp.277_323(54), ivtmp.277_383(76)>
  vect_vec_iv_.211_122 = vect_vec_iv_.211_121 + vect_cst_.210_120;
  vect_var_.212_123 = [vec_unpack_float_lo_expr] vect_vec_iv_.211_121;
  vect_var_.212_124 = [vec_unpack_float_hi_expr] vect_vec_iv_.211_121;
  vect_var_.213_126 = vect_var_.212_123 * vect_cst_.214_125;
  vect_var_.213_127 = vect_var_.212_124 * vect_cst_.214_125;
  vect_var_.215_129 = vect_var_.213_126 * vect_cst_.216_128;
  vect_var_.215_130 = vect_var_.213_127 * vect_cst_.216_128;
  _382 = (void *) ivtmp.277_324;
  MEM[base: _382, offset: 0B] = vect_var_.215_129;
  _251 = (void *) ivtmp.277_324;
  MEM[base: _251, offset: 16B] = vect_var_.215_130;
  ivtmp.275_22 = ivtmp.275_8 + 1;
  ivtmp.277_323 = ivtmp.277_324 + 32;
  if (ivtmp.275_22 < bnd.205_105)
    goto <bb 54>;
  else
    goto <bb 57>;

  <bb 56>:
  # j_95 = PHI <j_80(59)>
  _91 = (double) j_95;
  _68 = _91 * pretmp_71;
  _67 = _68 * 2.44140625e-4;
  *pretmp_2[j_95] = _67;
  j_1 = j_95 + 1;
  goto <bb 60>;

  <bb 57>:
  _115 = (int) ratio_mult_vf.206_104;
  tmp.207_114 = j_61 + _115;
  if (niters.204_4 == ratio_mult_vf.206_104)
    goto <bb 60>;
  else
    goto <bb 58>;

  <bb 58>:
  # j_108 = PHI <tmp.207_114(57), j_61(75)>
  _34 = (double) j_108;
  _112 = _34 * pretmp_71;
  _113 = _112 * 2.44140625e-4;
  *pretmp_2[j_108] = _113;
  j_81 = j_108 + 1;
  if (nj_33(D) > j_81)
    goto <bb 59>;
  else
    goto <bb 60>;

  <bb 59>:
  # j_25 = PHI <j_81(58)>
  _11 = (double) j_25;
  _190 = _11 * pretmp_71;
  _191 = _190 * 2.44140625e-4;
  *pretmp_2[j_25] = _191;
  j_80 = j_25 + 1;
  if (nj_33(D) > j_80)
    goto <bb 56>;
  else
    goto <bb 60>;

  <bb 60>:

  <bb 61>:

  <bb 62>:
  i_56 = i_78 + 1;
  ivtmp.287_136 = ivtmp.287_142 + 32768;
  if (i_56 != ni_18(D))
    goto <bb 63>;
  else
    goto <bb 77>;

  <bb 63>:

  <bb 64>:
  # i_78 = PHI <i_56(63), 0(53)>
  # ivtmp.287_142 = PHI <ivtmp.287_136(63), ivtmp.287_143(53)>
  if (nj_33(D) > 0)
    goto <bb 65>;
  else
    goto <bb 62>;

  <bb 65>:
  pretmp_2 = (double[4096] *) ivtmp.287_142;
  pretmp_71 = (double) i_78;
  niters.197_37 = (unsigned int) nj_33(D);
  _87 = ivtmp.287_142;
  _88 = _87 & 15;
  _85 = _88 >> 3;
  _19 = -_85;
  _83 = (unsigned int) _19;
  _58 = _83 & 1;
  prolog_loop_niters.201_50 = MIN_EXPR <_58, niters.197_37>;
  if (_64 <= 6)
    goto <bb 66>;
  else
    goto <bb 67>;

  <bb 66>:
  prologue_after_cost_adjust.202_63 = (unsigned int) nj_33(D);
  goto <bb 80>;

  <bb 67>:
  # prologue_after_cost_adjust.202_62 = PHI <prolog_loop_niters.201_50(65)>
  if (prologue_after_cost_adjust.202_62 == 0)
    goto <bb 75>;
  else
    goto <bb 68>;

  <bb 68>:
  # prologue_after_cost_adjust.202_380 = PHI <prologue_after_cost_adjust.202_381(80), prologue_after_cost_adjust.202_62(67)>
  _268 = 0.0;
  _269 = _268 * pretmp_71;
  _265 = _269 * 2.44140625e-4;
  _137 = (void *) ivtmp.287_142;
  MEM[base: _137, offset: 0B] = _265;
  if (prologue_after_cost_adjust.202_380 != 1)
    goto <bb 69>;
  else
    goto <bb 74>;

  <bb 69>:
  _297 = 1.0e+0;
  _30 = _297 * pretmp_71;
  _39 = _30 * 2.44140625e-4;
  _240 = (void *) ivtmp.287_142;
  MEM[base: _240, offset: 8B] = _39;
  if (prologue_after_cost_adjust.202_380 != 2)
    goto <bb 70>;
  else
    goto <bb 74>;

  <bb 70>:
  _52 = 2.0e+0;
  _53 = _52 * pretmp_71;
  _141 = _53 * 2.44140625e-4;
  _250 = (void *) ivtmp.287_142;
  MEM[base: _250, offset: 16B] = _141;
  if (prologue_after_cost_adjust.202_380 != 3)
    goto <bb 71>;
  else
    goto <bb 74>;

  <bb 71>:
  _308 = 3.0e+0;
  _309 = _308 * pretmp_71;
  _310 = _309 * 2.44140625e-4;
  _234 = (void *) ivtmp.287_142;
  MEM[base: _234, offset: 24B] = _310;
  if (prologue_after_cost_adjust.202_380 != 4)
    goto <bb 72>;
  else
    goto <bb 74>;

  <bb 72>:
  _317 = 4.0e+0;
  _318 = _317 * pretmp_71;
  _319 = _318 * 2.44140625e-4;
  _440 = (void *) ivtmp.287_142;
  MEM[base: _440, offset: 32B] = _319;
  if (prologue_after_cost_adjust.202_380 == 6)
    goto <bb 73>;
  else
    goto <bb 74>;

  <bb 73>:
  _75 = 5.0e+0;
  _74 = _75 * pretmp_71;
  _69 = _74 * 2.44140625e-4;
  _139 = (void *) ivtmp.287_142;
  MEM[base: _139, offset: 40B] = _69;

  <bb 74>:
  # j_57 = PHI <6(73), 1(68), 2(69), 3(70), 4(71), 5(72)>
  if (niters.197_37 == prologue_after_cost_adjust.202_380)
    goto <bb 61>;
  else
    goto <bb 75>;

  <bb 75>:
  # j_61 = PHI <j_57(74), 0(67)>
  # prologue_after_cost_adjust.202_375 = PHI <prologue_after_cost_adjust.202_380(74), prologue_after_cost_adjust.202_62(67)>
  prolog_loop_adjusted_niters.203_5 = (sizetype) prologue_after_cost_adjust.202_375;
  _3 = (unsigned int) nj_33(D);
  niters.204_4 = _3 - prologue_after_cost_adjust.202_375;
  bnd.205_105 = niters.204_4 >> 2;
  ratio_mult_vf.206_104 = bnd.205_105 << 2;
  if (ratio_mult_vf.206_104 == 0)
    goto <bb 58>;
  else
    goto <bb 76>;

  <bb 76>:
  stmp_var_.208_116 = j_61 + 1;
  stmp_var_.208_117 = stmp_var_.208_116 + 1;
  stmp_var_.208_118 = stmp_var_.208_117 + 1;
  vect_cst_.209_119 = {j_61, stmp_var_.208_116, stmp_var_.208_117, stmp_var_.208_118};
  vect_cst_.210_120 = { 4, 4, 4, 4 };
  vect_cst_.214_125 = {pretmp_71, pretmp_71};
  vect_cst_.216_128 = { 2.44140625e-4, 2.44140625e-4 };
  batmp.218_131 = (double[4096] *) ivtmp.287_142;
  base_off.219_134 = prolog_loop_adjusted_niters.203_5 * 8;
  vect_p.220_135 = batmp.218_131 + base_off.219_134;
  ivtmp.277_383 = (unsigned long) vect_p.220_135;
  goto <bb 55>;

  <bb 77>:
  return;

  <bb 78>:
  # prologue_after_cost_adjust.254_345 = PHI <prologue_after_cost_adjust.254_242(16)>
  goto <bb 18>;

  <bb 79>:
  # prologue_after_cost_adjust.228_156 = PHI <prologue_after_cost_adjust.228_164(41)>
  goto <bb 43>;

  <bb 80>:
  # prologue_after_cost_adjust.202_381 = PHI <prologue_after_cost_adjust.202_63(66)>
  goto <bb 68>;

}



;; Function void copy_array(int, int, double (*)[4096], double (*)[4096]) (_Z10copy_arrayiiPA4096_dS0_, funcdef_no=3259, decl_uid=66722, cgraph_uid=3081)

;; 3 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10
;;
;; Loop 1
;;  header 8, latch 7
;;  depth 1, outer 0
;;  nodes: 8 7 6 5 4 9
;;
;; Loop 2
;;  header 5, latch 4
;;  depth 2, outer 1
;;  nodes: 5 4
;; 2 succs { 3 10 }
;; 3 succs { 8 }
;; 4 succs { 5 }
;; 5 succs { 4 6 }
;; 6 succs { 7 10 }
;; 7 succs { 8 }
;; 8 succs { 9 6 }
;; 9 succs { 5 }
;; 10 succs { 1 }

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

ni_24 -> { ni_6(D) }
Incremental SSA update started at block: 2
Number of blocks in CFG: 11
Number of blocks to update: 2 ( 18%)



Value ranges after VRP:

_1: [8, 34359738368]
pretmp_2: VARYING
.MEM_4: VARYING
ni_6(D): VARYING
nj_7(D): VARYING
ivtmp.335_8: [8, 17179869176]
ivtmp.335_9: [0, 17179869168]
C_dest_10(D): VARYING
_11: [0, +INF]
.MEM_12: VARYING
C_source_13(D): VARYING
_14: [0, +INF]
_15: VARYING
ivtmp.342_17: [0, +INF]
ivtmp.344_19: VARYING
ivtmp.342_20: [0, +INF]
pretmp_21: VARYING
.MEM_23: VARYING
ni_24: [1, +INF]  EQUIVALENCES: { ni_6(D) } (1 elements)
ivtmp.342_25: VARYING
.MEM_26: VARYING
_27: [0, 4294967295]
_28: [1, 4294967296]
ivtmp.344_29: [0, +INF]
ivtmp.344_30: [0, +INF]
_31: [1, 2147483647]
_32: [0, 2147483646]
_33: [0, 2147483646]
_34: [0, 70368744112128]
_35: [0, +INF]
_36: [0, +INF]
_37: [0, +INF]


void copy_array(int, int, double (*)[4096], double (*)[4096]) (int ni, int nj, double[4096] * C_source, double[4096] * C_dest)
{
  unsigned long ivtmp.344;
  unsigned long ivtmp.342;
  sizetype ivtmp.335;
  int j;
  int i;
  sizetype _1;
  double[4096] * pretmp_2;
  unsigned int _11;
  unsigned int _14;
  double _15;
  double[4096] * pretmp_21;
  sizetype _27;
  sizetype _28;
  unsigned int _31;
  unsigned int _32;
  unsigned long _33;
  unsigned long _34;
  unsigned long _35;
  unsigned long _36;
  unsigned long _37;

  <bb 2>:
  if (ni_6(D) > 0)
    goto <bb 3>;
  else
    goto <bb 10>;

  <bb 3>:
  ivtmp.342_20 = (unsigned long) C_source_13(D);
  ivtmp.344_30 = (unsigned long) C_dest_10(D);
  _31 = (unsigned int) ni_6(D);
  _32 = _31 + 4294967295;
  _33 = (unsigned long) _32;
  _34 = _33 * 32768;
  _35 = (unsigned long) C_source_13(D);
  _36 = _35 + 32768;
  _37 = _36 + _34;
  _11 = (unsigned int) nj_7(D);
  _14 = _11 + 4294967295;
  _27 = (sizetype) _14;
  _28 = _27 + 1;
  _1 = _28 * 8;
  goto <bb 8>;

  <bb 4>:

  <bb 5>:
  # ivtmp.335_9 = PHI <ivtmp.335_8(4), 0(9)>
  _15 = MEM[base: pretmp_21, index: ivtmp.335_9, offset: 0B];
  MEM[base: pretmp_2, index: ivtmp.335_9, offset: 0B] = _15;
  ivtmp.335_8 = ivtmp.335_9 + 8;
  if (ivtmp.335_8 != _1)
    goto <bb 4>;
  else
    goto <bb 6>;

  <bb 6>:
  ivtmp.342_17 = ivtmp.342_25 + 32768;
  ivtmp.344_29 = ivtmp.344_19 + 32768;
  if (ivtmp.342_17 != _37)
    goto <bb 7>;
  else
    goto <bb 10>;

  <bb 7>:

  <bb 8>:
  # ivtmp.342_25 = PHI <ivtmp.342_17(7), ivtmp.342_20(3)>
  # ivtmp.344_19 = PHI <ivtmp.344_29(7), ivtmp.344_30(3)>
  if (nj_7(D) > 0)
    goto <bb 9>;
  else
    goto <bb 6>;

  <bb 9>:
  pretmp_2 = (double[4096] *) ivtmp.344_19;
  pretmp_21 = (double[4096] *) ivtmp.342_25;
  goto <bb 5>;

  <bb 10>:
  return;

}



;; Function void compareResults(int, int, double (*)[4096], double (*)[4096]) (_Z14compareResultsiiPA4096_dS0_, funcdef_no=3260, decl_uid=66738, cgraph_uid=3082)

;; 3 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26
;;
;; Loop 1
;;  header 23, latch 22
;;  depth 1, outer 0
;;  nodes: 23 22 20 19 18 16 17 10 8 9 7 5 6 4 24 14 15 12 13 26 11
;;
;; Loop 2
;;  header 5, latch 4
;;  depth 2, outer 1
;;  nodes: 5 4 18 16 17 10 8 9 7 6 14 15 12 13 26 11
;; 2 succs { 3 25 }
;; 3 succs { 23 }
;; 4 succs { 5 }
;; 5 succs { 6 7 }
;; 6 succs { 7 }
;; 7 succs { 8 26 }
;; 8 succs { 9 10 }
;; 9 succs { 10 }
;; 10 succs { 18 26 }
;; 11 succs { 12 }
;; 12 succs { 13 14 }
;; 13 succs { 14 }
;; 14 succs { 15 16 }
;; 15 succs { 16 }
;; 16 succs { 17 18 }
;; 17 succs { 18 }
;; 18 succs { 4 19 }
;; 19 succs { 20 }
;; 20 succs { 22 21 }
;; 21 succs { 25 }
;; 22 succs { 23 }
;; 23 succs { 24 20 }
;; 24 succs { 5 }
;; 25 succs { 1 }
;; 26 succs { 11 12 }

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

ni_52 -> { ni_6(D) }
Incremental SSA update started at block: 2
Number of blocks in CFG: 27
Number of blocks to update: 2 (  7%)



Value ranges after VRP:

_2: [0, +INF]
fail_3: [0, +INF(OVF)]
_4: [0, +INF]
_5: [0, +INF]
ni_6(D): VARYING
nj_7(D): VARYING
ivtmp.351_8: [0, 17179869168]
ivtmp.351_9: [8, 17179869176]
C_output_10(D): VARYING
_11: [0, +INF]
_13: VARYING
fail_14: [0, +INF(OVF)]
_15: [0, 70368744112128]
C_16(D): VARYING
_17: [0, +INF]
_18: VARYING
fail_19: [0, +INF(OVF)]
_20: VARYING
fail_21: [1, +INF(OVF)]
ivtmp.358_22: [0, +INF]
stderr.38_24: VARYING
_27: VARYING
_28: VARYING
_29: VARYING
_30: VARYING
_31: VARYING
_32: VARYING
_33: VARYING
_34: VARYING
_35: [0, 2147483646]
_36: VARYING
_37: VARYING
_38: VARYING
_39: VARYING
_40: VARYING
_41: VARYING
_42: VARYING
_43: VARYING
_44: VARYING
_45: VARYING
_46: VARYING
_47: VARYING
_48: [0, 2147483646]
fail_49: [0, +INF(OVF)]
_50: [1, 2147483647]
ivtmp.360_51: [0, +INF]
ni_52: [1, +INF]  EQUIVALENCES: { ni_6(D) } (1 elements)
ivtmp.358_53: VARYING
fail_54: [0, +INF(OVF)]
ivtmp.360_55: [0, +INF]
pretmp_58: VARYING
pretmp_59: VARYING
ivtmp.360_61: VARYING
ivtmp.358_62: [0, +INF]
_63: [8, 34359738368]
_64: [1, 4294967296]
_65: [0, 4294967295]
fail_66: [0, +INF(OVF)]
fail_67: [0, +INF(OVF)]


void compareResults(int, int, double (*)[4096], double (*)[4096]) (int ni, int nj, double[4096] * C, double[4096] * C_output)
{
  unsigned long ivtmp.360;
  unsigned long ivtmp.358;
  sizetype ivtmp.351;
  bool iftmp.1;
  float D.68697;
  int fail;
  int j;
  int i;
  struct _IO_FILE * stderr.38;
  unsigned long _2;
  unsigned long _4;
  unsigned long _5;
  unsigned int _11;
  double _13;
  unsigned long _15;
  unsigned int _17;
  double _18;
  double _20;
  float _27;
  float _28;
  float _29;
  double _30;
  float _31;
  float _32;
  float _33;
  double _34;
  unsigned long _35;
  double _36;
  float _37;
  float _38;
  double _39;
  float _40;
  float _41;
  float _42;
  float _43;
  float _44;
  float _45;
  float _46;
  float _47;
  unsigned int _48;
  unsigned int _50;
  double[4096] * pretmp_58;
  double[4096] * pretmp_59;
  sizetype _63;
  sizetype _64;
  sizetype _65;

  <bb 2>:
  if (ni_6(D) > 0)
    goto <bb 3>;
  else
    goto <bb 25>;

  <bb 3>:
  ivtmp.358_62 = (unsigned long) C_output_10(D);
  ivtmp.360_51 = (unsigned long) C_16(D);
  _50 = (unsigned int) ni_6(D);
  _48 = _50 + 4294967295;
  _35 = (unsigned long) _48;
  _15 = _35 * 32768;
  _5 = (unsigned long) C_output_10(D);
  _4 = _5 + 32768;
  _2 = _4 + _15;
  _11 = (unsigned int) nj_7(D);
  _17 = _11 + 4294967295;
  _65 = (sizetype) _17;
  _64 = _65 + 1;
  _63 = _64 * 8;
  goto <bb 23>;

  <bb 4>:

  <bb 5>:
  # fail_54 = PHI <fail_3(4), fail_49(24)>
  # ivtmp.351_8 = PHI <ivtmp.351_9(4), 0(24)>
  _13 = MEM[base: pretmp_58, index: ivtmp.351_8, offset: 0B];
  _18 = MEM[base: pretmp_59, index: ivtmp.351_8, offset: 0B];
  _27 = (float) _18;
  if (_27 < 0.0)
    goto <bb 6>;
  else
    goto <bb 7>;

  <bb 6>:
  _28 = -_27;

  <bb 7>:
  # _29 = PHI <_27(5), _28(6)>
  _30 = (double) _29;
  if (_30 < 1.00000000000000002081668171172168513294309377670288085938e-2)
    goto <bb 8>;
  else
    goto <bb 26>;

  <bb 8>:
  _31 = (float) _13;
  if (_31 < 0.0)
    goto <bb 9>;
  else
    goto <bb 10>;

  <bb 9>:
  _32 = -_31;

  <bb 10>:
  # _33 = PHI <_31(8), _32(9)>
  _34 = (double) _33;
  if (_34 < 1.00000000000000002081668171172168513294309377670288085938e-2)
    goto <bb 18>;
  else
    goto <bb 26>;

  <bb 11>:
  _38 = -_37;

  <bb 12>:
  # _42 = PHI <_37(26), _38(11)>
  _39 = _18 + 9.99999993922529029077850282192230224609375e-9;
  _40 = (float) _39;
  if (_40 < 0.0)
    goto <bb 13>;
  else
    goto <bb 14>;

  <bb 13>:
  _41 = -_40;

  <bb 14>:
  # _43 = PHI <_40(12), _41(13)>
  _44 = _42 / _43;
  if (_44 < 0.0)
    goto <bb 15>;
  else
    goto <bb 16>;

  <bb 15>:
  _45 = -_44;

  <bb 16>:
  # _46 = PHI <_44(14), _45(15)>
  _47 = _46 * 1.0e+2;
  _20 = (double) _47;
  if (_20 > 5.000000000000000277555756156289135105907917022705078125e-2)
    goto <bb 17>;
  else
    goto <bb 18>;

  <bb 17>:
  fail_21 = fail_54 + 1;

  <bb 18>:
  # fail_3 = PHI <fail_54(16), fail_21(17), fail_54(10)>
  ivtmp.351_9 = ivtmp.351_8 + 8;
  if (ivtmp.351_9 != _63)
    goto <bb 4>;
  else
    goto <bb 19>;

  <bb 19>:
  # fail_67 = PHI <fail_3(18)>

  <bb 20>:
  # fail_19 = PHI <fail_67(19), fail_49(23)>
  ivtmp.358_22 = ivtmp.358_53 + 32768;
  ivtmp.360_55 = ivtmp.360_61 + 32768;
  if (ivtmp.358_22 != _2)
    goto <bb 22>;
  else
    goto <bb 21>;

  <bb 21>:
  # fail_66 = PHI <fail_19(20)>
  goto <bb 25>;

  <bb 22>:

  <bb 23>:
  # fail_49 = PHI <fail_19(22), 0(3)>
  # ivtmp.358_53 = PHI <ivtmp.358_22(22), ivtmp.358_62(3)>
  # ivtmp.360_61 = PHI <ivtmp.360_55(22), ivtmp.360_51(3)>
  if (nj_7(D) > 0)
    goto <bb 24>;
  else
    goto <bb 20>;

  <bb 24>:
  pretmp_58 = (double[4096] *) ivtmp.358_53;
  pretmp_59 = (double[4096] *) ivtmp.360_61;
  goto <bb 5>;

  <bb 25>:
  # fail_14 = PHI <fail_66(21), 0(2)>
  stderr.38_24 = stderr;
  __fprintf_chk (stderr.38_24, 1, "Non-Matching CPU-GPU Outputs Beyond Error Threshold of %4.2f Percent: %d\n", 5.000000000000000277555756156289135105907917022705078125e-2, fail_14);
  return;

  <bb 26>:
  _36 = _18 - _13;
  _37 = (float) _36;
  if (_37 < 0.0)
    goto <bb 11>;
  else
    goto <bb 12>;

}



;; Function void gemm(int, int, int, double, double, double (*)[4096], double (*)[4096], double (*)[4096]) (_Z4gemmiiiddPA4096_dS0_S0_, funcdef_no=3262, decl_uid=66774, cgraph_uid=3084)

;; 4 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14
;;
;; Loop 1
;;  header 12, latch 11
;;  depth 1, outer 0
;;  nodes: 12 11 10 6 5 8 9 7 4 13
;;
;; Loop 2
;;  header 5, latch 4
;;  depth 2, outer 1
;;  nodes: 5 4 6 8 9 7
;;
;; Loop 3
;;  header 8, latch 9
;;  depth 3, outer 2
;;  nodes: 8 9
;; 2 succs { 3 14 }
;; 3 succs { 12 }
;; 4 succs { 5 }
;; 5 succs { 7 6 }
;; 6 succs { 4 10 }
;; 7 succs { 8 }
;; 8 succs { 9 6 }
;; 9 succs { 8 }
;; 10 succs { 11 14 }
;; 11 succs { 12 }
;; 12 succs { 13 10 }
;; 13 succs { 5 }
;; 14 succs { 1 }

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

ni_58 -> { ni_8(D) }
Incremental SSA update started at block: 2
Number of blocks in CFG: 15
Number of blocks to update: 2 ( 13%)



Value ranges after VRP:

_1: [0, 2147483646]
_2: [1, 2147483647]
ivtmp.383_3: [0, +INF]
ivtmp.383_4: [0, +INF]
ivtmp.383_5: VARYING
_6: [0, +INF]
ni_8(D): VARYING
nj_9(D): VARYING
C_10(D): VARYING
ivtmp.366_11: [ivtmp.383_5, ivtmp.383_5]  EQUIVALENCES: { ivtmp.383_5 } (1 elements)
ivtmp.366_12: [0, +INF]
ivtmp.366_13: VARYING
_14: VARYING
_16: VARYING
nk_18(D): VARYING
.MEM_19: VARYING
A_21(D): VARYING
ivtmp.369_22: VARYING
_23: VARYING
_25: VARYING
ivtmp.375_26: [8, 17179869176]
_27: [0, +INF]
B_28(D): VARYING
_29: [0, 4294967295]
_30: VARYING
_31: VARYING
_32: VARYING
_34: [0, +INF]
ivtmp.381_35: [0, +INF]
_37: [0, +INF]
_38: [8, 34359738368]
_39: [1, 4294967296]
_40: [0, +INF]  EQUIVALENCES: { _79 } (1 elements)
_43: [0, 34359738360]
_44: [0, +INF]
ivtmp.381_45: VARYING
ivtmp.375_46: [0, 17179869168]
.MEM_47: VARYING
ivtmp.369_48: [0, +INF]  EQUIVALENCES: { _6 } (1 elements)
.MEM_49: VARYING
ivtmp.369_50: [0, +INF]
ivtmp.381_51: [0, +INF]
_52: [0, 4294967295]
_53: [0, +INF]
_54: [0, +INF]
_55: [0, +INF]
_56: VARYING
_57: VARYING
ni_58: [1, +INF]  EQUIVALENCES: { ni_8(D) } (1 elements)
pretmp_60: VARYING
_61: [0, +INF]
.MEM_62: VARYING
prephitmp_63: VARYING
_65: [0, +INF]
_66: [0, 70368744112128]
_67: [0, 2147483646]
.MEM_68: VARYING
.MEM_69: VARYING
_70: [0, +INF]
_71: [0, +INF]
_72: [0, 4294967295]
_73: [0, 34359738360]
_74: [0, +INF]
_75: [0, +INF]
_76: [0, +INF]
_77: [0, +INF]
_78: [0, +INF]
_79: [0, +INF]


void gemm(int, int, int, double, double, double (*)[4096], double (*)[4096], double (*)[4096]) (int ni, int nj, int nk, double alpha, double beta, double[4096] * A, double[4096] * B, double[4096] * C)
{
  unsigned long ivtmp.383;
  unsigned long ivtmp.381;
  sizetype ivtmp.375;
  unsigned long ivtmp.369;
  unsigned long ivtmp.366;
  int k;
  int j;
  int i;
  unsigned int _1;
  unsigned int _2;
  unsigned long _6;
  double _14;
  double _16;
  double _23;
  double _25;
  unsigned int _27;
  sizetype _29;
  double _30;
  double _31;
  double _32;
  unsigned int _34;
  unsigned long _37;
  sizetype _38;
  sizetype _39;
  unsigned long _40;
  unsigned long _43;
  unsigned long _44;
  unsigned long _52;
  unsigned long _53;
  unsigned int _54;
  unsigned int _55;
  void * _56;
  void * _57;
  double[4096] * pretmp_60;
  unsigned long _61;
  double prephitmp_63;
  unsigned long _65;
  unsigned long _66;
  unsigned long _67;
  unsigned int _70;
  unsigned int _71;
  unsigned long _72;
  unsigned long _73;
  unsigned long _74;
  unsigned long _75;
  unsigned long _76;
  unsigned long _77;
  unsigned long _78;
  unsigned long _79;

  <bb 2>:
  if (ni_8(D) > 0)
    goto <bb 3>;
  else
    goto <bb 14>;

  <bb 3>:
  ivtmp.381_35 = (unsigned long) C_10(D);
  ivtmp.383_3 = (unsigned long) A_21(D);
  _2 = (unsigned int) ni_8(D);
  _1 = _2 + 4294967295;
  _67 = (unsigned long) _1;
  _66 = _67 * 32768;
  _65 = (unsigned long) C_10(D);
  _61 = _65 + 32768;
  _53 = _61 + _66;
  _27 = (unsigned int) nj_9(D);
  _34 = _27 + 4294967295;
  _29 = (sizetype) _34;
  _39 = _29 + 1;
  _38 = _39 * 8;
  _55 = (unsigned int) nk_18(D);
  _54 = _55 + 4294967295;
  _52 = (unsigned long) _54;
  _43 = _52 * 8;
  _70 = (unsigned int) nk_18(D);
  _71 = _70 + 4294967295;
  _72 = (unsigned long) _71;
  _73 = _72 * 8;
  _74 = (unsigned long) A_21(D);
  _76 = (unsigned long) C_10(D);
  _44 = -_76;
  _75 = _73 - _76;
  _77 = _75 + _74;
  goto <bb 12>;

  <bb 4>:

  <bb 5>:
  # ivtmp.375_46 = PHI <ivtmp.375_26(4), 0(13)>
  _14 = MEM[base: pretmp_60, index: ivtmp.375_46, offset: 0B];
  _16 = _14 * beta_15(D);
  MEM[base: pretmp_60, index: ivtmp.375_46, offset: 0B] = _16;
  if (nk_18(D) > 0)
    goto <bb 7>;
  else
    goto <bb 6>;

  <bb 6>:
  ivtmp.375_26 = ivtmp.375_46 + 8;
  if (ivtmp.375_26 != _38)
    goto <bb 4>;
  else
    goto <bb 10>;

  <bb 7>:
  ivtmp.366_11 = ivtmp.383_5;
  _37 = (unsigned long) B_28(D);
  _6 = ivtmp.375_46 + _37;
  ivtmp.369_48 = _6;

  <bb 8>:
  # prephitmp_63 = PHI <_32(9), _16(7)>
  # ivtmp.366_13 = PHI <ivtmp.366_12(9), ivtmp.366_11(7)>
  # ivtmp.369_22 = PHI <ivtmp.369_50(9), ivtmp.369_48(7)>
  _57 = (void *) ivtmp.366_13;
  _23 = MEM[base: _57, offset: 0B];
  _25 = _23 * alpha_24(D);
  _56 = (void *) ivtmp.369_22;
  _30 = MEM[base: _56, offset: 0B];
  _31 = _25 * _30;
  _32 = _31 + prephitmp_63;
  MEM[base: pretmp_60, index: ivtmp.375_46, offset: 0B] = _32;
  ivtmp.366_12 = ivtmp.366_13 + 8;
  ivtmp.369_50 = ivtmp.369_22 + 32768;
  if (ivtmp.366_12 != _40)
    goto <bb 9>;
  else
    goto <bb 6>;

  <bb 9>:
  goto <bb 8>;

  <bb 10>:
  ivtmp.381_51 = ivtmp.381_45 + 32768;
  ivtmp.383_4 = ivtmp.383_5 + 32768;
  if (ivtmp.381_51 != _53)
    goto <bb 11>;
  else
    goto <bb 14>;

  <bb 11>:

  <bb 12>:
  # ivtmp.381_45 = PHI <ivtmp.381_51(11), ivtmp.381_35(3)>
  # ivtmp.383_5 = PHI <ivtmp.383_4(11), ivtmp.383_3(3)>
  if (nj_9(D) > 0)
    goto <bb 13>;
  else
    goto <bb 10>;

  <bb 13>:
  pretmp_60 = (double[4096] *) ivtmp.381_45;
  _78 = _77 + 8;
  _79 = _78 + ivtmp.381_45;
  _40 = _79;
  goto <bb 5>;

  <bb 14>:
  return;

}



;; Function void gemm_original(int, int, int, double, double, double (*)[4096], double (*)[4096], double (*)[4096]) (_Z13gemm_originaliiiddPA4096_dS0_S0_, funcdef_no=3263, decl_uid=66799, cgraph_uid=3085)

;; 4 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14
;;
;; Loop 1
;;  header 12, latch 11
;;  depth 1, outer 0
;;  nodes: 12 11 10 6 5 8 9 7 4 13
;;
;; Loop 2
;;  header 5, latch 4
;;  depth 2, outer 1
;;  nodes: 5 4 6 8 9 7
;;
;; Loop 3
;;  header 8, latch 9
;;  depth 3, outer 2
;;  nodes: 8 9
;; 2 succs { 3 14 }
;; 3 succs { 12 }
;; 4 succs { 5 }
;; 5 succs { 7 6 }
;; 6 succs { 4 10 }
;; 7 succs { 8 }
;; 8 succs { 9 6 }
;; 9 succs { 8 }
;; 10 succs { 11 14 }
;; 11 succs { 12 }
;; 12 succs { 13 10 }
;; 13 succs { 5 }
;; 14 succs { 1 }

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

ni_79 -> { ni_3(D) }
Incremental SSA update started at block: 2
Number of blocks in CFG: 15
Number of blocks to update: 2 ( 13%)



Value ranges after VRP:

ni_3(D): VARYING
nj_4(D): VARYING
nk_5(D): VARYING
A_8(D): VARYING
B_9(D): VARYING
C_10(D): VARYING
_13: VARYING
_14: [0, +INF]
_15: [0, +INF]
_16: VARYING
_17: [0, +INF]
_18: [0, +INF]
_19: [0, 2147483646]
ivtmp.391_20: [ivtmp.408_48, ivtmp.408_48]  EQUIVALENCES: { ivtmp.408_48 } (1 elements)
ivtmp.391_21: [0, +INF]
ivtmp.391_22: VARYING
_23: [1, 2147483647]
_24: VARYING
_25: VARYING
ivtmp.394_27: VARYING
ivtmp.408_28: [0, +INF]
_29: VARYING
_30: VARYING
ivtmp.400_31: [8, 17179869176]
_32: [0, +INF]
_33: [0, 4294967295]
_34: VARYING
_35: VARYING
_36: VARYING
_37: [0, +INF]
ivtmp.406_38: [0, +INF]
.MEM_40: VARYING
_41: VARYING
_42: [0, +INF]
_43: [0, +INF]
_44: VARYING
_45: [0, +INF]
_46: [0, +INF]
ivtmp.408_47: [0, +INF]
ivtmp.408_48: VARYING
_49: [0, +INF]
_58: [0, +INF]
_59: [8, 34359738368]
_60: [1, 4294967296]
_61: [0, +INF]  EQUIVALENCES: { _100 } (1 elements)
_64: [0, 34359738360]
_65: [0, +INF]
ivtmp.406_66: VARYING
ivtmp.400_67: [0, 17179869168]
.MEM_68: VARYING
ivtmp.394_69: [0, +INF]  EQUIVALENCES: { _49 } (1 elements)
.MEM_70: VARYING
ivtmp.394_71: [0, +INF]
ivtmp.406_72: [0, +INF]
_73: [0, 4294967295]
_74: [0, +INF]
_75: [0, +INF]
_76: [0, +INF]
_77: VARYING
_78: VARYING
ni_79: [1, +INF]  EQUIVALENCES: { ni_3(D) } (1 elements)
pretmp_81: VARYING
_82: [0, +INF]
.MEM_83: VARYING
prephitmp_84: VARYING
_86: [0, +INF]
_87: [0, 70368744112128]
_88: [0, 2147483646]
.MEM_89: VARYING
.MEM_90: VARYING
_91: [0, +INF]
_92: [0, +INF]
_93: [0, 4294967295]
_94: [0, 34359738360]
_95: [0, +INF]
_96: [0, +INF]
_97: [0, +INF]
_98: [0, +INF]
_99: [0, +INF]
_100: [0, +INF]


void gemm_original(int, int, int, double, double, double (*)[4096], double (*)[4096], double (*)[4096]) (int ni, int nj, int nk, double alpha, double beta, double[4096] * A, double[4096] * B, double[4096] * C)
{
  unsigned long ivtmp.408;
  unsigned long ivtmp.406;
  sizetype ivtmp.400;
  unsigned long ivtmp.394;
  unsigned long ivtmp.391;
  struct timespec spec;
  int k;
  int j;
  int i;
  struct timespec spec;
  long int _13;
  long unsigned int _14;
  long unsigned int _15;
  long int _16;
  long unsigned int _17;
  uint64_t _18;
  unsigned int _19;
  unsigned int _23;
  double _24;
  double _25;
  double _29;
  double _30;
  unsigned int _32;
  sizetype _33;
  double _34;
  double _35;
  double _36;
  unsigned int _37;
  long int _41;
  long unsigned int _42;
  long unsigned int _43;
  long int _44;
  long unsigned int _45;
  uint64_t _46;
  unsigned long _49;
  unsigned long _58;
  sizetype _59;
  sizetype _60;
  unsigned long _61;
  unsigned long _64;
  unsigned long _65;
  unsigned long _73;
  unsigned long _74;
  unsigned int _75;
  unsigned int _76;
  void * _77;
  void * _78;
  double[4096] * pretmp_81;
  unsigned long _82;
  double prephitmp_84;
  unsigned long _86;
  unsigned long _87;
  unsigned long _88;
  unsigned int _91;
  unsigned int _92;
  unsigned long _93;
  unsigned long _94;
  unsigned long _95;
  unsigned long _96;
  unsigned long _97;
  unsigned long _98;
  unsigned long _99;
  unsigned long _100;

  <bb 2>:
  clock_gettime (1, &spec);
  _13 = spec.tv_sec;
  _14 = (long unsigned int) _13;
  _15 = _14 * 1000000000;
  _16 = spec.tv_nsec;
  _17 = (long unsigned int) _16;
  _18 = _15 + _17;
  spec ={v} {CLOBBER};
  seq_start = _18;
  if (ni_3(D) > 0)
    goto <bb 3>;
  else
    goto <bb 14>;

  <bb 3>:
  ivtmp.406_38 = (unsigned long) C_10(D);
  ivtmp.408_28 = (unsigned long) A_8(D);
  _23 = (unsigned int) ni_3(D);
  _19 = _23 + 4294967295;
  _88 = (unsigned long) _19;
  _87 = _88 * 32768;
  _86 = (unsigned long) C_10(D);
  _82 = _86 + 32768;
  _74 = _82 + _87;
  _32 = (unsigned int) nj_4(D);
  _37 = _32 + 4294967295;
  _33 = (sizetype) _37;
  _60 = _33 + 1;
  _59 = _60 * 8;
  _76 = (unsigned int) nk_5(D);
  _75 = _76 + 4294967295;
  _73 = (unsigned long) _75;
  _64 = _73 * 8;
  _91 = (unsigned int) nk_5(D);
  _92 = _91 + 4294967295;
  _93 = (unsigned long) _92;
  _94 = _93 * 8;
  _95 = (unsigned long) A_8(D);
  _97 = (unsigned long) C_10(D);
  _65 = -_97;
  _96 = _95 - _97;
  _98 = _96 + _94;
  goto <bb 12>;

  <bb 4>:

  <bb 5>:
  # ivtmp.400_67 = PHI <ivtmp.400_31(4), 0(13)>
  _24 = MEM[base: pretmp_81, index: ivtmp.400_67, offset: 0B];
  _25 = beta_7(D) * _24;
  MEM[base: pretmp_81, index: ivtmp.400_67, offset: 0B] = _25;
  if (nk_5(D) > 0)
    goto <bb 7>;
  else
    goto <bb 6>;

  <bb 6>:
  ivtmp.400_31 = ivtmp.400_67 + 8;
  if (ivtmp.400_31 != _59)
    goto <bb 4>;
  else
    goto <bb 10>;

  <bb 7>:
  ivtmp.391_20 = ivtmp.408_48;
  _58 = (unsigned long) B_9(D);
  _49 = ivtmp.400_67 + _58;
  ivtmp.394_69 = _49;

  <bb 8>:
  # prephitmp_84 = PHI <_36(9), _25(7)>
  # ivtmp.391_22 = PHI <ivtmp.391_21(9), ivtmp.391_20(7)>
  # ivtmp.394_27 = PHI <ivtmp.394_71(9), ivtmp.394_69(7)>
  _78 = (void *) ivtmp.391_22;
  _29 = MEM[base: _78, offset: 0B];
  _30 = alpha_6(D) * _29;
  _77 = (void *) ivtmp.394_27;
  _34 = MEM[base: _77, offset: 0B];
  _35 = _30 * _34;
  _36 = _35 + prephitmp_84;
  MEM[base: pretmp_81, index: ivtmp.400_67, offset: 0B] = _36;
  ivtmp.391_21 = ivtmp.391_22 + 8;
  ivtmp.394_71 = ivtmp.394_27 + 32768;
  if (ivtmp.391_21 != _61)
    goto <bb 9>;
  else
    goto <bb 6>;

  <bb 9>:
  goto <bb 8>;

  <bb 10>:
  ivtmp.406_72 = ivtmp.406_66 + 32768;
  ivtmp.408_47 = ivtmp.408_48 + 32768;
  if (ivtmp.406_72 != _74)
    goto <bb 11>;
  else
    goto <bb 14>;

  <bb 11>:

  <bb 12>:
  # ivtmp.406_66 = PHI <ivtmp.406_72(11), ivtmp.406_38(3)>
  # ivtmp.408_48 = PHI <ivtmp.408_47(11), ivtmp.408_28(3)>
  if (nj_4(D) > 0)
    goto <bb 13>;
  else
    goto <bb 10>;

  <bb 13>:
  pretmp_81 = (double[4096] *) ivtmp.406_66;
  _99 = _98 + 8;
  _100 = _99 + ivtmp.406_66;
  _61 = _100;
  goto <bb 5>;

  <bb 14>:
  clock_gettime (1, &spec);
  _41 = spec.tv_sec;
  _42 = (long unsigned int) _41;
  _43 = _42 * 1000000000;
  _44 = spec.tv_nsec;
  _45 = (long unsigned int) _44;
  _46 = _43 + _45;
  spec ={v} {CLOBBER};
  seq_stop = _46;
  return;

}



;; Function void gemm_omp_kernel(int, int, int, double, double, double (*)[4096], double (*)[4096], double (*)[4096]) (_Z15gemm_omp_kerneliiiddPA4096_dS0_S0_, funcdef_no=3264, decl_uid=66809, cgraph_uid=3086)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }

Value ranges after VRP:



void gemm_omp_kernel(int, int, int, double, double, double (*)[4096], double (*)[4096], double (*)[4096]) (int ni, int nj, int nk, double alpha, double beta, double[4096] * A, double[4096] * B, double[4096] * C)
{
  struct .omp_data_s.41 .omp_data_o.42;

  <bb 2>:
  .omp_data_o.42.alpha = alpha_2(D);
  .omp_data_o.42.beta = beta_4(D);
  .omp_data_o.42.A = A_6(D);
  .omp_data_o.42.B = B_8(D);
  .omp_data_o.42.C = C_10(D);
  .omp_data_o.42.ni = ni_12(D);
  .omp_data_o.42.nj = nj_14(D);
  .omp_data_o.42.nk = nk_16(D);
  __builtin_GOMP_parallel_start (_Z15gemm_omp_kerneliiiddPA4096_dS0_S0_._omp_fn.0, &.omp_data_o.42, 8);
  _Z15gemm_omp_kerneliiiddPA4096_dS0_S0_._omp_fn.0 (&.omp_data_o.42);
  __builtin_GOMP_parallel_end ();
  return;

}



;; Function void gemm_omp(int, int, int, double, double, double (*)[4096], double (*)[4096], double (*)[4096]) (_Z8gemm_ompiiiddPA4096_dS0_S0_, funcdef_no=3265, decl_uid=66831, cgraph_uid=3087)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }

Value ranges after VRP:

_13: VARYING
_14: [0, +INF]
_15: [0, +INF]
_16: VARYING
_17: [0, +INF]
_18: [0, +INF]
_19: VARYING
_20: [0, +INF]
_21: [0, +INF]
_22: VARYING
_23: [0, +INF]
_24: [0, +INF]


void gemm_omp(int, int, int, double, double, double (*)[4096], double (*)[4096], double (*)[4096]) (int ni, int nj, int nk, double alpha, double beta, double[4096] * A, double[4096] * B, double[4096] * C_outputFromOMP)
{
  struct timespec spec;
  struct .omp_data_s.41 .omp_data_o.42;
  struct timespec spec;
  long int _13;
  long unsigned int _14;
  long unsigned int _15;
  long int _16;
  long unsigned int _17;
  uint64_t _18;
  long int _19;
  long unsigned int _20;
  long unsigned int _21;
  long int _22;
  long unsigned int _23;
  uint64_t _24;

  <bb 2>:
  clock_gettime (1, &spec);
  _13 = spec.tv_sec;
  _14 = (long unsigned int) _13;
  _15 = _14 * 1000000000;
  _16 = spec.tv_nsec;
  _17 = (long unsigned int) _16;
  _18 = _15 + _17;
  spec ={v} {CLOBBER};
  omp_start = _18;
  .omp_data_o.42.alpha = alpha_6(D);
  .omp_data_o.42.beta = beta_7(D);
  .omp_data_o.42.A = A_8(D);
  .omp_data_o.42.B = B_9(D);
  .omp_data_o.42.C = C_outputFromOMP_10(D);
  .omp_data_o.42.ni = ni_3(D);
  .omp_data_o.42.nj = nj_4(D);
  .omp_data_o.42.nk = nk_5(D);
  __builtin_GOMP_parallel_start (_Z15gemm_omp_kerneliiiddPA4096_dS0_S0_._omp_fn.0, &.omp_data_o.42, 8);
  _Z15gemm_omp_kerneliiiddPA4096_dS0_S0_._omp_fn.0 (&.omp_data_o.42);
  __builtin_GOMP_parallel_end ();
  clock_gettime (1, &spec);
  _19 = spec.tv_sec;
  _20 = (long unsigned int) _19;
  _21 = _20 * 1000000000;
  _22 = spec.tv_nsec;
  _23 = (long unsigned int) _22;
  _24 = _21 + _23;
  spec ={v} {CLOBBER};
  omp_stop = _24;
  return;

}



;; Function void GPU_argv_init() (_Z13GPU_argv_initv, funcdef_no=3266, decl_uid=66833, cgraph_uid=3088)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }

Value ranges after VRP:

stderr.43_2: VARYING
stderr.43_5: VARYING


void GPU_argv_init() ()
{
  struct cudaDeviceProp deviceProp;
  struct _IO_FILE * stderr.43;

  <bb 2>:
  stderr.43_2 = stderr;
  __fprintf_chk (stderr.43_2, 1, "GPU init.\n");
  cudaGetDeviceProperties (&deviceProp, 0);
  stderr.43_5 = stderr;
  __fprintf_chk (stderr.43_5, 1, "setting device %d with name %s\n", 0, &deviceProp.name);
  cudaSetDevice (0);
  deviceProp ={v} {CLOBBER};
  return;

}



;; Function int main(int, char**) (main, funcdef_no=3268, decl_uid=66878, cgraph_uid=3090) (executed once)

;; 7 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34
;;
;; Loop 5
;;  header 30, latch 29
;;  depth 1, outer 0
;;  nodes: 30 29 28 27 25 26 24 31
;;
;; Loop 6
;;  header 25, latch 24
;;  depth 2, outer 5
;;  nodes: 25 24 27 26
;;
;; Loop 3
;;  header 18, latch 17
;;  depth 1, outer 0
;;  nodes: 18 17 16 15 14 19
;;
;; Loop 4
;;  header 15, latch 14
;;  depth 2, outer 3
;;  nodes: 15 14
;;
;; Loop 1
;;  header 12, latch 11
;;  depth 1, outer 0
;;  nodes: 12 11 10 9 8 13
;;
;; Loop 2
;;  header 9, latch 8
;;  depth 2, outer 1
;;  nodes: 9 8
;; 2 succs { 3 6 }
;; 3 succs { 4 5 }
;; 4 succs { }
;; 5 succs { 6 }
;; 6 succs { 7 20 }
;; 7 succs { 12 }
;; 8 succs { 9 }
;; 9 succs { 8 10 }
;; 10 succs { 11 34 }
;; 11 succs { 12 }
;; 12 succs { 13 10 }
;; 13 succs { 9 }
;; 14 succs { 15 }
;; 15 succs { 14 16 }
;; 16 succs { 17 20 }
;; 17 succs { 18 }
;; 18 succs { 19 16 }
;; 19 succs { 15 }
;; 20 succs { 21 33 }
;; 21 succs { 22 33 }
;; 22 succs { 23 32 }
;; 23 succs { 30 }
;; 24 succs { 25 }
;; 25 succs { 26 27 }
;; 26 succs { 27 }
;; 27 succs { 24 28 }
;; 28 succs { 29 32 }
;; 29 succs { 30 }
;; 30 succs { 31 28 }
;; 31 succs { 25 }
;; 32 succs { 33 }
;; 33 succs { 1 }
;; 34 succs { 18 }

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

table.55_155 -> { table.55_66 }
_161 -> { _45 }
_167 -> { _33 }
ff_0_209 -> { ff_0_21 }
nj.61_262 -> { nj.61_83 }
nj.61_263 -> { nj.61_83 }
ni.62_264 -> { ni.62_84 }
ni.62_265 -> { ni.62_120 }
Incremental SSA update started at block: 2
Number of blocks in CFG: 36
Number of blocks to update: 11 ( 31%)



Value ranges after VRP:

.MEM_1: VARYING
.MEM_2: VARYING
stderr.53_18: VARYING
ff_0_21: VARYING
_23: VARYING
_26: VARYING
_29: ~[0B, 0B]
_33: VARYING
_45: VARYING
stderr.53_57: VARYING
_60: VARYING
_61: [0, +INF]
table.55_62: VARYING
stderr.53_64: VARYING
table.55_66: VARYING
_67: VARYING
_68: VARYING
_70: [0, +INF]
_72: [0, 34359738360]
stderr.53_73: VARYING
C.57_75: VARYING
B.58_76: VARYING
A.59_77: VARYING
nk.60_78: VARYING
nj.61_79: VARYING
ni.62_80: VARYING
C.57_82: VARYING
nj.61_83: VARYING
ni.62_84: VARYING
ivtmp.438_86: [8, 17179869176]
stderr.53_88: VARYING
B.58_90: VARYING
A.59_91: VARYING
beta.64_92: VARYING
alpha.65_93: VARYING
nk.60_94: VARYING
nj.61_95: VARYING
ni.62_96: VARYING
stdout.66_98: VARYING
stderr.53_101: VARYING
C.57_103: VARYING
nj.61_104: VARYING
ni.62_105: VARYING
stderr.53_107: VARYING
C_outputFromGpu.63_109: VARYING
C.57_110: VARYING
nj.61_111: VARYING
ni.62_112: VARYING
argc_114(D): VARYING
_116: VARYING
_117: VARYING
C_outputFromGpu.63_118: VARYING
nj.61_119: VARYING
ni.62_120: VARYING
A.59_122: VARYING
B.58_124: VARYING
C.57_126: VARYING
C_outputFromGpu.63_129: VARYING
ret_141: VARYING
ret_142: VARYING
ret_143: VARYING
C_outputFromOMP_144: VARYING
ret_145: VARYING
ret_146: VARYING
_147: [0, 4294967295]
ivtmp.422_148: [0, +INF]
ivtmp.422_149: VARYING
ivtmp.447_150: VARYING
ivtmp.422_151: [ivtmp.432_231, ivtmp.432_231]  EQUIVALENCES: { ivtmp.432_231 } (1 elements)
ivtmp.452_152: [8, 17179869176]
_153: VARYING
ivtmp.459_154: [0, +INF]
table.55_155: ~[0B, 0B]  EQUIVALENCES: { table.55_66 } (1 elements)
_156: [0, 70368744112128]
_157: [0, +INF]
_158: [0, +INF]
_159: [0, 4294967295]
_160: [0, 34359738360]
_161: ~[0B, 0B]  EQUIVALENCES: { _45 } (1 elements)
_162: VARYING
ivtmp.445_163: [0, +INF]
_164: [0, +INF]
_165: [0, 2147483646]
_166: [0, +INF]
_167: ~[0B, 0B]  EQUIVALENCES: { _33 } (1 elements)
_168: [0, +INF]
_185: [0, 2147483646]
ivtmp.425_186: VARYING
ivtmp.425_187: [0, +INF]
ivtmp.425_188: [ivtmp.433_229, ivtmp.433_229]  EQUIVALENCES: { ivtmp.433_229 } (1 elements)
_189: [0, +INF]
_190: VARYING
stderr.67_191: VARYING
_192: VARYING
_193: VARYING
_194: [-19, 19]
stderr.67_195: VARYING
ivtmp.432_196: [0, +INF]
ivtmp.445_197: [0, +INF]
stderr.67_198: VARYING
.MEM_199: VARYING
.MEM_200: VARYING
_201: [0, +INF]
_202: [1, 2147483647]
.MEM_206: VARYING
.MEM_207: VARYING
_208: [1, 2147483647]
ff_0_209: ~[0B, 0B]  EQUIVALENCES: { ff_0_21 } (1 elements)
ivtmp.433_210: [0, +INF]
.MEM_211: VARYING
_212: [0, +INF]
.MEM_213: VARYING
C_outputFromGpu.63_214: VARYING
.MEM_215: VARYING
pretmp_216: VARYING
pretmp_217: VARYING
pretmp_218: VARYING
_219: [8, 34359738368]
.MEM_220: VARYING
ivtmp.459_221: VARYING
ivtmp.452_222: [0, 17179869168]
ivtmp.445_223: VARYING
.MEM_224: VARYING
ivtmp.432_225: [0, +INF]
.MEM_226: VARYING
.MEM_227: VARYING
_228: [0, +INF]  EQUIVALENCES: { _238 } (1 elements)
ivtmp.433_229: VARYING
ivtmp.438_230: [0, 17179869168]
ivtmp.432_231: VARYING
.MEM_232: VARYING
_233: [0, 4294967295]
_234: [1, 4294967296]
pretmp_235: VARYING
_236: [0, +INF]
_237: [8, 34359738368]
_238: [0, +INF]
ivtmp.447_239: [0, +INF]
ivtmp.447_240: [0, +INF]
_241: [1, 2147483647]
_242: [0, 2147483646]
_243: [0, 2147483646]
_244: [0, 70368744112128]
_245: [0, +INF]
_246: [0, +INF]
_247: [0, +INF]
_248: [0, 4294967295]
_249: [1, 4294967296]
_250: [8, 34359738368]
ivtmp.459_251: [0, +INF]
ivtmp.461_252: VARYING
ivtmp.461_253: [0, +INF]
ivtmp.461_254: [0, +INF]
_255: [1, 2147483647]
_256: [0, 2147483646]
_257: [0, 2147483646]
_258: [0, 70368744112128]
_259: [0, +INF]
_260: [0, +INF]
_261: [0, +INF]
nj.61_262: [1, +INF]  EQUIVALENCES: { nj.61_83 } (1 elements)
nj.61_263: [-INF, 0]  EQUIVALENCES: { nj.61_83 } (1 elements)
ni.62_264: [1, +INF]  EQUIVALENCES: { ni.62_84 } (1 elements)
ni.62_265: [1, +INF]  EQUIVALENCES: { ni.62_120 } (1 elements)


Removing basic block 35
int main(int, char**) (int argc, char * * argv)
{
  unsigned long ivtmp.461;
  unsigned long ivtmp.459;
  sizetype ivtmp.452;
  unsigned long ivtmp.447;
  unsigned long ivtmp.445;
  sizetype ivtmp.438;
  unsigned int ivtmp.433;
  unsigned long ivtmp.432;
  unsigned int ivtmp.425;
  unsigned long ivtmp.422;
  struct _IO_FILE * stderr.67;
  int i;
  int j;
  int i;
  int j;
  int i;
  int j;
  void * ret;
  void * ret;
  void * ret;
  void * ret;
  void * ret;
  static const char __PRETTY_FUNCTION__[22] = "int main(int, char**)";
  struct Func * ff_0;
  double[4096][4096] * C_outputFromGpu;
  double[4096][4096] * C_inputToGpu;
  double[4096][4096] * C_outputFromOMP;
  double[4096][4096] * C;
  double[4096][4096] * B;
  double[4096][4096] * A;
  double beta;
  double alpha;
  int nk;
  int nj;
  int ni;
  struct _IO_FILE * stdout.66;
  double alpha.65;
  double beta.64;
  double[4096][4096] * C_outputFromGpu.63;
  int ni.62;
  int nj.61;
  int nk.60;
  double[4096][4096] * A.59;
  double[4096][4096] * B.58;
  double[4096][4096] * C.57;
  struct Func * * * table.55;
  struct _IO_FILE * stderr.53;
  void * _23;
  void * _26;
  void * * _29;
  void * * _33;
  struct ffi_type * * _45;
  bool _60;
  unsigned long _61;
  struct Func * * _67;
  struct Func * _68;
  unsigned long _70;
  unsigned long _72;
  char * _116;
  unsigned char _117;
  unsigned long _147;
  double _153;
  unsigned long _156;
  unsigned int _157;
  unsigned int _158;
  unsigned long _159;
  unsigned long _160;
  double _162;
  unsigned int _164;
  unsigned long _165;
  unsigned int _166;
  unsigned int _168;
  unsigned int _185;
  unsigned int _189;
  double _190;
  void * _192;
  int _193;
  int _194;
  unsigned int _201;
  unsigned int _202;
  unsigned int _208;
  unsigned int _212;
  double[4096][4096] * pretmp_216;
  double[4096][4096] * pretmp_217;
  double[4096][4096] * pretmp_218;
  sizetype _219;
  unsigned long _228;
  sizetype _233;
  sizetype _234;
  double[4096][4096] * pretmp_235;
  unsigned long _236;
  unsigned long _237;
  unsigned long _238;
  unsigned int _241;
  unsigned int _242;
  unsigned long _243;
  unsigned long _244;
  unsigned long _245;
  unsigned long _246;
  unsigned long _247;
  sizetype _248;
  sizetype _249;
  sizetype _250;
  unsigned int _255;
  unsigned int _256;
  unsigned long _257;
  unsigned long _258;
  unsigned long _259;
  unsigned long _260;
  unsigned long _261;

  <bb 2>:
  ni = 4096;
  nj = 4096;
  nk = 4096;
  ret_141 = xmalloc (134217728);
  A = ret_141;
  ret_142 = xmalloc (134217728);
  B = ret_142;
  ret_143 = xmalloc (134217728);
  C = ret_143;
  C_outputFromOMP_144 = xmalloc (134217728);
  ret_145 = xmalloc (134217728);
  C_inputToGpu = ret_145;
  ret_146 = xmalloc (134217728);
  C_outputFromGpu = ret_146;
  stderr.53_18 = stderr;
  __fprintf_chk (stderr.53_18, 1, "Preparing alternatives functions.\n");
  ff_0_21 = malloc (48);
  _23 = malloc (88);
  ff_0_21->arg_types = _23;
  _26 = malloc (88);
  ff_0_21->arg_values = _26;
  ff_0_21->f = gemm_cuda;
  _29 = &ff_0_21->ret_value;
  memset (_29, 0, 8);
  ff_0_21->ret_type = &ffi_type_void;
  ff_0_21->nargs = 10;
  _33 = ff_0_21->arg_values;
  *_33 = &ni;
  MEM[(void * *)_33 + 8B] = &nj;
  MEM[(void * *)_33 + 16B] = &nk;
  MEM[(void * *)_33 + 24B] = &alpha;
  MEM[(void * *)_33 + 32B] = &beta;
  MEM[(void * *)_33 + 40B] = &A;
  MEM[(void * *)_33 + 48B] = &B;
  MEM[(void * *)_33 + 56B] = &C;
  MEM[(void * *)_33 + 64B] = &C_inputToGpu;
  MEM[(void * *)_33 + 72B] = &C_outputFromGpu;
  MEM[(void * *)_33 + 80B] = 0B;
  _45 = ff_0_21->arg_types;
  *_45 = &ffi_type_sint32;
  MEM[(struct ffi_type * *)_45 + 8B] = &ffi_type_sint32;
  MEM[(struct ffi_type * *)_45 + 16B] = &ffi_type_sint32;
  MEM[(struct ffi_type * *)_45 + 24B] = &ffi_type_double;
  MEM[(struct ffi_type * *)_45 + 32B] = &ffi_type_double;
  MEM[(struct ffi_type * *)_45 + 40B] = &ffi_type_pointer;
  MEM[(struct ffi_type * *)_45 + 48B] = &ffi_type_pointer;
  MEM[(struct ffi_type * *)_45 + 56B] = &ffi_type_pointer;
  MEM[(struct ffi_type * *)_45 + 64B] = &ffi_type_pointer;
  MEM[(struct ffi_type * *)_45 + 72B] = &ffi_type_pointer;
  MEM[(struct ffi_type * *)_45 + 80B] = 0B;
  stderr.53_57 = stderr;
  __fprintf_chk (stderr.53_57, 1, "Creating table of target functions.\n");
  _60 = create_target_functions_table (&table, 1, 2);
  if (_60 != 0)
    goto <bb 3>;
  else
    goto <bb 6>;

  <bb 3>:
  table.55_62 = table;
  if (table.55_62 == 0B)
    goto <bb 4>;
  else
    goto <bb 5>;

  <bb 4>:
  __assert_fail ("table != NULL", "gemm.cu", 402, &__PRETTY_FUNCTION__);

  <bb 5>:
  stderr.53_64 = stderr;
  __fprintf_chk (stderr.53_64, 1, "Declaring function in 0,1.\n");
  table.55_66 = table;
  _67 = *table.55_66;
  _68 = MEM[(struct Func * *)_67 + 8B];
  *_68 = MEM[(const struct Func &)ff_0_21];
  TablePointerFunctions = table.55_66;

  <bb 6>:
  stderr.53_73 = stderr;
  __fprintf_chk (stderr.53_73, 1, "Calling init_array.\n");
  C.57_75 = C;
  B.58_76 = B;
  A.59_77 = A;
  nk.60_78 = nk;
  nj.61_79 = nj;
  ni.62_80 = ni;
  init_array (ni.62_80, nj.61_79, nk.60_78, &alpha, &beta, A.59_77, B.58_76, C.57_75);
  C.57_82 = C;
  nj.61_83 = nj;
  ni.62_84 = ni;
  if (ni.62_84 > 0)
    goto <bb 7>;
  else
    goto <bb 20>;

  <bb 7>:
  ivtmp.459_251 = (unsigned long) C.57_82;
  ivtmp.461_254 = (unsigned long) C_outputFromOMP_144;
  _255 = (unsigned int) ni.62_84;
  _256 = _255 + 4294967295;
  _257 = (unsigned long) _256;
  _258 = _257 * 32768;
  _259 = (unsigned long) C.57_82;
  _260 = _259 + 32768;
  _261 = _260 + _258;
  _212 = (unsigned int) nj.61_83;
  _164 = _212 + 4294967295;
  _248 = (sizetype) _164;
  _249 = _248 + 1;
  _250 = _249 * 8;
  goto <bb 12>;

  <bb 8>:

  <bb 9>:
  # ivtmp.452_222 = PHI <ivtmp.452_152(8), 0(13)>
  _153 = MEM[base: pretmp_217, index: ivtmp.452_222, offset: 0B];
  MEM[base: pretmp_218, index: ivtmp.452_222, offset: 0B] = _153;
  ivtmp.452_152 = ivtmp.452_222 + 8;
  if (ivtmp.452_152 != _250)
    goto <bb 8>;
  else
    goto <bb 10>;

  <bb 10>:
  ivtmp.459_154 = ivtmp.459_221 + 32768;
  ivtmp.461_253 = ivtmp.461_252 + 32768;
  if (ivtmp.459_154 != _261)
    goto <bb 11>;
  else
    goto <bb 34>;

  <bb 11>:

  <bb 12>:
  # ivtmp.459_221 = PHI <ivtmp.459_154(11), ivtmp.459_251(7)>
  # ivtmp.461_252 = PHI <ivtmp.461_253(11), ivtmp.461_254(7)>
  if (nj.61_83 > 0)
    goto <bb 13>;
  else
    goto <bb 10>;

  <bb 13>:
  pretmp_218 = (double[4096][4096] *) ivtmp.461_252;
  pretmp_217 = (double[4096][4096] *) ivtmp.459_221;
  goto <bb 9>;

  <bb 14>:

  <bb 15>:
  # ivtmp.438_230 = PHI <ivtmp.438_86(14), 0(19)>
  _162 = MEM[base: pretmp_235, index: ivtmp.438_230, offset: 0B];
  MEM[base: pretmp_216, index: ivtmp.438_230, offset: 0B] = _162;
  ivtmp.438_86 = ivtmp.438_230 + 8;
  if (ivtmp.438_86 != _219)
    goto <bb 14>;
  else
    goto <bb 16>;

  <bb 16>:
  ivtmp.445_163 = ivtmp.445_223 + 32768;
  ivtmp.447_239 = ivtmp.447_150 + 32768;
  if (ivtmp.445_163 != _247)
    goto <bb 17>;
  else
    goto <bb 20>;

  <bb 17>:

  <bb 18>:
  # ivtmp.445_223 = PHI <ivtmp.445_163(17), ivtmp.445_197(34)>
  # ivtmp.447_150 = PHI <ivtmp.447_239(17), ivtmp.447_240(34)>
  if (nj.61_83 > 0)
    goto <bb 19>;
  else
    goto <bb 16>;

  <bb 19>:
  pretmp_216 = (double[4096][4096] *) ivtmp.447_150;
  pretmp_235 = (double[4096][4096] *) ivtmp.445_223;
  goto <bb 15>;

  <bb 20>:
  stderr.53_88 = stderr;
  __fprintf_chk (stderr.53_88, 1, "Calling gemm_omp:\n");
  B.58_90 = B;
  A.59_91 = A;
  beta.64_92 = beta;
  alpha.65_93 = alpha;
  nk.60_94 = nk;
  nj.61_95 = nj;
  ni.62_96 = ni;
  gemm_omp (ni.62_96, nj.61_95, nk.60_94, alpha.65_93, beta.64_92, A.59_91, B.58_90, C_outputFromOMP_144);
  stdout.66_98 = stdout;
  __fprintf_chk (stdout.66_98, 1, "version = OMP+OFF, num_threads = %d, NI = %d, NJ = %d, NK = %d, ", 8, 4096, 4096, 4096);
  hookomp_print_time_results ();
  stderr.53_101 = stderr;
  __fprintf_chk (stderr.53_101, 1, "Calling compareResults(original, omp).\n");
  C.57_103 = C;
  nj.61_104 = nj;
  ni.62_105 = ni;
  compareResults (ni.62_105, nj.61_104, C.57_103, C_outputFromOMP_144);
  stderr.53_107 = stderr;
  __fprintf_chk (stderr.53_107, 1, "Calling compareResults(original, cuda).\n");
  C_outputFromGpu.63_109 = C_outputFromGpu;
  C.57_110 = C;
  nj.61_111 = nj;
  ni.62_112 = ni;
  compareResults (ni.62_112, nj.61_111, C.57_110, C_outputFromGpu.63_109);
  if (argc_114(D) > 42)
    goto <bb 21>;
  else
    goto <bb 33>;

  <bb 21>:
  _116 = *argv_115(D);
  _117 = MEM[(const unsigned char * {ref-all})_116];
  if (_117 == 0)
    goto <bb 22>;
  else
    goto <bb 33>;

  <bb 22>:
  C_outputFromGpu.63_118 = C_outputFromGpu;
  nj.61_119 = nj;
  ni.62_120 = ni;
  if (ni.62_120 > 0)
    goto <bb 23>;
  else
    goto <bb 32>;

  <bb 23>:
  ivtmp.432_225 = (unsigned long) C_outputFromGpu.63_118;
  _208 = (unsigned int) ni.62_120;
  _202 = (unsigned int) ni.62_120;
  _185 = _202 + 4294967295;
  _165 = (unsigned long) _185;
  _156 = _165 * 32768;
  _70 = (unsigned long) C_outputFromGpu.63_118;
  _61 = _70 + 32768;
  _236 = _61 + _156;
  _157 = (unsigned int) nj.61_119;
  _158 = _157 + 4294967295;
  _159 = (unsigned long) _158;
  _160 = _159 * 8;
  _168 = (unsigned int) nj.61_119;
  _166 = _168 + 4294967295;
  _147 = (unsigned long) _166;
  _72 = _147 * 8;
  goto <bb 30>;

  <bb 24>:

  <bb 25>:
  # ivtmp.422_149 = PHI <ivtmp.422_148(24), ivtmp.422_151(31)>
  # ivtmp.425_186 = PHI <ivtmp.425_187(24), ivtmp.425_188(31)>
  _192 = (void *) ivtmp.422_149;
  _190 = MEM[base: _192, offset: 0B];
  stderr.67_191 = stderr;
  __fprintf_chk (stderr.67_191, 1, "%0.2lf ", _190);
  _193 = (int) ivtmp.425_186;
  _194 = _193 % 20;
  if (_194 == 0)
    goto <bb 26>;
  else
    goto <bb 27>;

  <bb 26>:
  stderr.67_195 = stderr;
  __builtin_fputs ("\n", stderr.67_195);

  <bb 27>:
  ivtmp.422_148 = ivtmp.422_149 + 8;
  ivtmp.425_187 = ivtmp.425_186 + 1;
  if (ivtmp.422_148 != _228)
    goto <bb 24>;
  else
    goto <bb 28>;

  <bb 28>:
  ivtmp.432_196 = ivtmp.432_231 + 32768;
  ivtmp.433_210 = ivtmp.433_229 + _208;
  if (ivtmp.432_196 != _236)
    goto <bb 29>;
  else
    goto <bb 32>;

  <bb 29>:

  <bb 30>:
  # ivtmp.432_231 = PHI <ivtmp.432_196(29), ivtmp.432_225(23)>
  # ivtmp.433_229 = PHI <ivtmp.433_210(29), 0(23)>
  if (nj.61_119 > 0)
    goto <bb 31>;
  else
    goto <bb 28>;

  <bb 31>:
  ivtmp.422_151 = ivtmp.432_231;
  ivtmp.425_188 = ivtmp.433_229;
  _237 = _72 + 8;
  _238 = _237 + ivtmp.432_231;
  _228 = _238;
  goto <bb 25>;

  <bb 32>:
  stderr.67_198 = stderr;
  __builtin_fputs ("\n", stderr.67_198);

  <bb 33>:
  A.59_122 = A;
  free (A.59_122);
  B.58_124 = B;
  free (B.58_124);
  C.57_126 = C;
  free (C.57_126);
  free (C_outputFromOMP_144);
  C_outputFromGpu.63_129 = C_outputFromGpu;
  free (C_outputFromGpu.63_129);
  ni ={v} {CLOBBER};
  nj ={v} {CLOBBER};
  nk ={v} {CLOBBER};
  alpha ={v} {CLOBBER};
  beta ={v} {CLOBBER};
  A ={v} {CLOBBER};
  B ={v} {CLOBBER};
  C ={v} {CLOBBER};
  C_inputToGpu ={v} {CLOBBER};
  C_outputFromGpu ={v} {CLOBBER};
  return 0;

  <bb 34>:
  C_outputFromGpu.63_214 = C_outputFromGpu;
  ivtmp.445_197 = (unsigned long) C.57_82;
  ivtmp.447_240 = (unsigned long) C_outputFromGpu.63_214;
  _241 = (unsigned int) ni.62_84;
  _242 = _241 + 4294967295;
  _243 = (unsigned long) _242;
  _244 = _243 * 32768;
  _245 = (unsigned long) C.57_82;
  _246 = _245 + 32768;
  _247 = _246 + _244;
  _201 = (unsigned int) nj.61_83;
  _189 = _201 + 4294967295;
  _233 = (sizetype) _189;
  _234 = _233 + 1;
  _219 = _234 * 8;
  goto <bb 18>;

}



;; Function void polybench_flush_cache() (_Z21polybench_flush_cachev, funcdef_no=3270, decl_uid=67114, cgraph_uid=3092)

;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7
;;
;; Loop 1
;;  header 3, latch 4
;;  depth 1, outer 0
;;  nodes: 3 4
;; 2 succs { 3 }
;; 3 succs { 4 5 }
;; 4 succs { 3 }
;; 5 succs { 7 6 }
;; 6 succs { }
;; 7 succs { 1 }

Value ranges after VRP:

flush_5: VARYING
_9: VARYING
tmp_10: VARYING
tmp_18: VARYING
ivtmp.471_23: [8, 33556480]
ivtmp.471_24: [0, 33556472]
tmp_27: VARYING


void polybench_flush_cache() ()
{
  sizetype ivtmp.471;
  static const char __PRETTY_FUNCTION__[29] = "void polybench_flush_cache()";
  double tmp;
  int i;
  double * flush;
  double _9;

  <bb 2>:
  flush_5 = calloc (4194560, 8);

  <bb 3>:
  # tmp_18 = PHI <tmp_10(4), 0.0(2)>
  # ivtmp.471_24 = PHI <ivtmp.471_23(4), 0(2)>
  _9 = MEM[base: flush_5, index: ivtmp.471_24, offset: 0B];
  tmp_10 = _9 + tmp_18;
  ivtmp.471_23 = ivtmp.471_24 + 8;
  if (ivtmp.471_23 != 33556480)
    goto <bb 4>;
  else
    goto <bb 5>;

  <bb 4>:
  goto <bb 3>;

  <bb 5>:
  # tmp_27 = PHI <tmp_10(3)>
  if (tmp_27 <= 1.0e+1)
    goto <bb 7>;
  else
    goto <bb 6>;

  <bb 6>:
  __assert_fail ("tmp <= 10.0", "../../../utilities/polybench.c", 96, &__PRETTY_FUNCTION__);

  <bb 7>:
  free (flush_5);
  return;

}



;; Function void polybench_prepare_instruments() (_Z29polybench_prepare_instrumentsv, funcdef_no=3271, decl_uid=67125, cgraph_uid=3093)

;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7
;;
;; Loop 1
;;  header 3, latch 4
;;  depth 1, outer 0
;;  nodes: 3 4
;; 2 succs { 3 }
;; 3 succs { 4 5 }
;; 4 succs { 3 }
;; 5 succs { 7 6 }
;; 6 succs { }
;; 7 succs { 1 }

Value ranges after VRP:

flush_3: VARYING
_8: VARYING
tmp_10: VARYING
tmp_19: VARYING
ivtmp.481_24: [8, 33556480]
ivtmp.481_25: [0, 33556472]
tmp_28: VARYING


void polybench_prepare_instruments() ()
{
  sizetype ivtmp.481;
  double tmp;
  int i;
  double * flush;
  double _8;

  <bb 2>:
  flush_3 = calloc (4194560, 8);

  <bb 3>:
  # tmp_19 = PHI <tmp_10(4), 0.0(2)>
  # ivtmp.481_25 = PHI <ivtmp.481_24(4), 0(2)>
  _8 = MEM[base: flush_3, index: ivtmp.481_25, offset: 0B];
  tmp_10 = _8 + tmp_19;
  ivtmp.481_24 = ivtmp.481_25 + 8;
  if (ivtmp.481_24 != 33556480)
    goto <bb 4>;
  else
    goto <bb 5>;

  <bb 4>:
  goto <bb 3>;

  <bb 5>:
  # tmp_28 = PHI <tmp_10(3)>
  if (tmp_28 <= 1.0e+1)
    goto <bb 7>;
  else
    goto <bb 6>;

  <bb 6>:
  __assert_fail ("tmp <= 10.0", "../../../utilities/polybench.c", 96, &__PRETTY_FUNCTION__);

  <bb 7>:
  free (flush_3);
  return;

}



;; Function void polybench_timer_start() (_Z21polybench_timer_startv, funcdef_no=3272, decl_uid=65913, cgraph_uid=3094)

;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9
;;
;; Loop 1
;;  header 3, latch 4
;;  depth 1, outer 0
;;  nodes: 3 4
;; 2 succs { 3 }
;; 3 succs { 4 5 }
;; 4 succs { 3 }
;; 5 succs { 7 6 }
;; 6 succs { }
;; 7 succs { 8 9 }
;; 8 succs { 9 }
;; 9 succs { 1 }

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

stat_32 -> { stat_16 }
Incremental SSA update started at block: 7
Number of blocks in CFG: 10
Number of blocks to update: 2 ( 20%)



Value ranges after VRP:

flush_7: VARYING
_12: VARYING
tmp_14: VARYING
stat_16: VARYING
_17: VARYING
_18: VARYING
_19: VARYING
_20: VARYING
_21: VARYING
_22: VARYING
.MEM_23: VARYING
stat_32: ~[0, 0]  EQUIVALENCES: { stat_16 } (1 elements)
tmp_33: VARYING
ivtmp.491_48: [8, 33556480]
ivtmp.491_49: [0, 33556472]
tmp_52: VARYING


void polybench_timer_start() ()
{
  sizetype ivtmp.491;
  struct timeval Tp;
  int stat;
  double D.68982;
  double tmp;
  int i;
  double * flush;
  double _12;
  long int _17;
  double _18;
  long int _19;
  double _20;
  double _21;
  double _22;

  <bb 2>:
  flush_7 = calloc (4194560, 8);

  <bb 3>:
  # tmp_33 = PHI <tmp_14(4), 0.0(2)>
  # ivtmp.491_49 = PHI <ivtmp.491_48(4), 0(2)>
  _12 = MEM[base: flush_7, index: ivtmp.491_49, offset: 0B];
  tmp_14 = _12 + tmp_33;
  ivtmp.491_48 = ivtmp.491_49 + 8;
  if (ivtmp.491_48 != 33556480)
    goto <bb 4>;
  else
    goto <bb 5>;

  <bb 4>:
  goto <bb 3>;

  <bb 5>:
  # tmp_52 = PHI <tmp_14(3)>
  if (tmp_52 <= 1.0e+1)
    goto <bb 7>;
  else
    goto <bb 6>;

  <bb 6>:
  __assert_fail ("tmp <= 10.0", "../../../utilities/polybench.c", 96, &__PRETTY_FUNCTION__);

  <bb 7>:
  free (flush_7);
  stat_16 = gettimeofday (&Tp, 0B);
  if (stat_16 != 0)
    goto <bb 8>;
  else
    goto <bb 9>;

  <bb 8>:
  __printf_chk (1, "Error return from gettimeofday: %d", stat_16);

  <bb 9>:
  _17 = Tp.tv_sec;
  _18 = (double) _17;
  _19 = Tp.tv_usec;
  _20 = (double) _19;
  _21 = _20 * 9.99999999999999954748111825886258685613938723690807819366e-7;
  _22 = _18 + _21;
  Tp ={v} {CLOBBER};
  polybench_t_start = _22;
  return;

}



;; Function void polybench_timer_stop() (_Z20polybench_timer_stopv, funcdef_no=3273, decl_uid=65914, cgraph_uid=3095)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4
;; 2 succs { 3 4 }
;; 3 succs { 4 }
;; 4 succs { 1 }

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

stat_24 -> { stat_5 }
Incremental SSA update started at block: 2
Number of blocks in CFG: 5
Number of blocks to update: 2 ( 40%)



Value ranges after VRP:

stat_5: VARYING
_6: VARYING
_7: VARYING
_8: VARYING
_9: VARYING
_10: VARYING
_11: VARYING
.MEM_12: VARYING
stat_24: ~[0, 0]  EQUIVALENCES: { stat_5 } (1 elements)


void polybench_timer_stop() ()
{
  struct timeval Tp;
  int stat;
  double D.69000;
  long int _6;
  double _7;
  long int _8;
  double _9;
  double _10;
  double _11;

  <bb 2>:
  stat_5 = gettimeofday (&Tp, 0B);
  if (stat_5 != 0)
    goto <bb 3>;
  else
    goto <bb 4>;

  <bb 3>:
  __printf_chk (1, "Error return from gettimeofday: %d", stat_5);

  <bb 4>:
  _6 = Tp.tv_sec;
  _7 = (double) _6;
  _8 = Tp.tv_usec;
  _9 = (double) _8;
  _10 = _9 * 9.99999999999999954748111825886258685613938723690807819366e-7;
  _11 = _7 + _10;
  Tp ={v} {CLOBBER};
  polybench_t_end = _11;
  return;

}



;; Function void polybench_timer_print() (_Z21polybench_timer_printv, funcdef_no=3274, decl_uid=65915, cgraph_uid=3096)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }

Value ranges after VRP:

polybench_t_end.70_2: VARYING
polybench_t_start.71_3: VARYING
_4: VARYING


void polybench_timer_print() ()
{
  double polybench_t_start.71;
  double polybench_t_end.70;
  double _4;

  <bb 2>:
  polybench_t_end.70_2 = polybench_t_end;
  polybench_t_start.71_3 = polybench_t_start;
  _4 = polybench_t_end.70_2 - polybench_t_start.71_3;
  __printf_chk (1, "%0.6f\n", _4);
  return;

}



;; Function void* polybench_alloc_data(long long unsigned int, int) (_Z20polybench_alloc_datayi, funcdef_no=3276, decl_uid=65921, cgraph_uid=3098)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5
;; 2 succs { 4 3 }
;; 3 succs { 4 5 }
;; 4 succs { }
;; 5 succs { 1 }

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

newA.72_14 -> { newA.72_9 }
Incremental SSA update started at block: 2
Number of blocks in CFG: 6
Number of blocks to update: 3 ( 50%)



Value ranges after VRP:

n_1(D): VARYING
elt_size_2(D): VARYING
_3: ~[2147483648, 18446744071562067967]
val_4: [0, +INF]
ret_8: VARYING
newA.72_9: VARYING
stderr.73_10: VARYING
newA.72_14: ~[0B, 0B]  EQUIVALENCES: { newA.72_9 } (1 elements)


void* polybench_alloc_data(long long unsigned int, int) (long long unsigned int n, int elt_size)
{
  int ret;
  void * newA;
  struct _IO_FILE * stderr.73;
  void * newA.72;
  void * D.69012;
  void * ret;
  size_t val;
  long unsigned int _3;

  <bb 2>:
  _3 = (long unsigned int) elt_size_2(D);
  val_4 = _3 * n_1(D);
  newA = 0B;
  ret_8 = posix_memalign (&newA, 32, val_4);
  newA.72_9 = newA;
  if (newA.72_9 == 0B)
    goto <bb 4>;
  else
    goto <bb 3>;

  <bb 3>:
  if (ret_8 != 0)
    goto <bb 4>;
  else
    goto <bb 5>;

  <bb 4>:
  stderr.73_10 = stderr;
  __builtin_fwrite ("[PolyBench] posix_memalign: cannot allocate memory", 1, 50, stderr.73_10);
  exit (1);

  <bb 5>:
  newA ={v} {CLOBBER};
  return newA.72_9;

}



;; Function void __device_stub__Z16gemm_cuda_kerneliiiddPdS_S_(int, int, int, double, double, double*, double*, double*) (_Z45__device_stub__Z16gemm_cuda_kerneliiiddPdS_S_iiiddPdS_S_, funcdef_no=3301, decl_uid=67447, cgraph_uid=3122)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12
;; 2 succs { 3 4 }
;; 3 succs { 12 }
;; 4 succs { 3 5 }
;; 5 succs { 3 6 }
;; 6 succs { 3 7 }
;; 7 succs { 3 8 }
;; 8 succs { 3 9 }
;; 9 succs { 3 10 }
;; 10 succs { 3 11 }
;; 11 succs { 12 }
;; 12 succs { 1 }

Value ranges after VRP:

.MEM_1: VARYING
_4: VARYING
_6: VARYING
_8: VARYING
_10: VARYING
_12: VARYING
_14: VARYING
_16: VARYING
_18: VARYING
.MEM_22: VARYING


void __device_stub__Z16gemm_cuda_kerneliiiddPdS_S_(int, int, int, double, double, double*, double*, double*) (int __par0, int __par1, int __par2, double __par3, double __par4, double * __par5, double * __par6, double * __par7)
{
  static volatile char * __f;
  cudaError _4;
  cudaError _6;
  cudaError _8;
  cudaError _10;
  cudaError _12;
  cudaError _14;
  cudaError _16;
  cudaError _18;

  <bb 2>:
  _4 = cudaSetupArgument (&__par0, 4, 0);
  if (_4 != 0)
    goto <bb 3>;
  else
    goto <bb 4>;

  <bb 3>:
  goto <bb 12>;

  <bb 4>:
  _6 = cudaSetupArgument (&__par1, 4, 4);
  if (_6 != 0)
    goto <bb 3>;
  else
    goto <bb 5>;

  <bb 5>:
  _8 = cudaSetupArgument (&__par2, 4, 8);
  if (_8 != 0)
    goto <bb 3>;
  else
    goto <bb 6>;

  <bb 6>:
  _10 = cudaSetupArgument (&__par3, 8, 16);
  if (_10 != 0)
    goto <bb 3>;
  else
    goto <bb 7>;

  <bb 7>:
  _12 = cudaSetupArgument (&__par4, 8, 24);
  if (_12 != 0)
    goto <bb 3>;
  else
    goto <bb 8>;

  <bb 8>:
  _14 = cudaSetupArgument (&__par5, 8, 32);
  if (_14 != 0)
    goto <bb 3>;
  else
    goto <bb 9>;

  <bb 9>:
  _16 = cudaSetupArgument (&__par6, 8, 40);
  if (_16 != 0)
    goto <bb 3>;
  else
    goto <bb 10>;

  <bb 10>:
  _18 = cudaSetupArgument (&__par7, 8, 48);
  if (_18 != 0)
    goto <bb 3>;
  else
    goto <bb 11>;

  <bb 11>:
  __f = gemm_cuda_kernel;
  cudaLaunch (gemm_cuda_kernel);

  <bb 12>:
  return;

}



;; Function void gemm_cuda(int, int, int, double, double, double (*)[4096], double (*)[4096], double (*)[4096], double (*)[4096], double (*)[4096]) (_Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_, funcdef_no=3267, decl_uid=66855, cgraph_uid=3089)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4
;; 2 succs { 3 4 }
;; 3 succs { 4 }
;; 4 succs { 1 }

Value ranges after VRP:

.MEM_1: VARYING
stderr.44_3: VARYING
A_gpu.45_10: VARYING
B_gpu.46_13: VARYING
C_gpu.47_17: VARYING
_29: VARYING
C_gpu.47_30: VARYING
B_gpu.46_31: VARYING
A_gpu.45_32: VARYING
C_gpu.47_43: VARYING
A_gpu.45_47: VARYING
B_gpu.46_49: VARYING
C_gpu.47_51: VARYING
_66: VARYING
_67: [0, +INF]
_68: [0, +INF]
_69: VARYING
_70: [0, +INF]
_71: [0, +INF]
_72: VARYING
_73: [0, +INF]
_74: [0, +INF]
_75: VARYING
_76: [0, +INF]
_77: [0, +INF]
_78: VARYING
_79: [0, +INF]
_80: [0, +INF]
_81: VARYING
_82: [0, +INF]
_83: [0, +INF]
_84: VARYING
_85: [0, +INF]
_86: [0, +INF]
_87: VARYING
_88: [0, +INF]
_89: [0, +INF]
_90: VARYING
_91: [0, +INF]
_92: [0, +INF]
_93: VARYING
_94: [0, +INF]
_95: [0, +INF]
_96: VARYING
_97: [0, +INF]
_98: [0, +INF]
_99: VARYING
_100: [0, +INF]
_101: [0, +INF]


void gemm_cuda(int, int, int, double, double, double (*)[4096], double (*)[4096], double (*)[4096], double (*)[4096], double (*)[4096]) (int ni, int nj, int nk, double alpha, double beta, double[4096] * A, double[4096] * B, double[4096] * C, double[4096] * C_inputToGpu, double[4096] * C_outputFromGpu)
{
  struct timespec spec;
  struct timespec spec;
  struct timespec spec;
  struct timespec spec;
  struct timespec spec;
  struct timespec spec;
  struct dim3 grid;
  struct dim3 block;
  double * C_gpu;
  double * B_gpu;
  double * A_gpu;
  double * C_gpu.47;
  double * B_gpu.46;
  double * A_gpu.45;
  struct _IO_FILE * stderr.44;
  cudaError _29;
  long int _66;
  long unsigned int _67;
  long unsigned int _68;
  long int _69;
  long unsigned int _70;
  uint64_t _71;
  long int _72;
  long unsigned int _73;
  long unsigned int _74;
  long int _75;
  long unsigned int _76;
  uint64_t _77;
  long int _78;
  long unsigned int _79;
  long unsigned int _80;
  long int _81;
  long unsigned int _82;
  uint64_t _83;
  long int _84;
  long unsigned int _85;
  long unsigned int _86;
  long int _87;
  long unsigned int _88;
  uint64_t _89;
  long int _90;
  long unsigned int _91;
  long unsigned int _92;
  long int _93;
  long unsigned int _94;
  uint64_t _95;
  long int _96;
  long unsigned int _97;
  long unsigned int _98;
  long int _99;
  long unsigned int _100;
  uint64_t _101;

  <bb 2>:
  stderr.44_3 = stderr;
  __fprintf_chk (stderr.44_3, 1, "Calling function gemm_cuda.\n");
  GPU_argv_init ();
  cudaMalloc (&A_gpu, 134217728);
  cudaMalloc (&B_gpu, 134217728);
  cudaMalloc (&C_gpu, 134217728);
  clock_gettime (1, &spec);
  _66 = spec.tv_sec;
  _67 = (long unsigned int) _66;
  _68 = _67 * 1000000000;
  _69 = spec.tv_nsec;
  _70 = (long unsigned int) _69;
  _71 = _68 + _70;
  spec ={v} {CLOBBER};
  data_transfer_h2d_start = _71;
  A_gpu.45_10 = A_gpu;
  cudaMemcpy (A_gpu.45_10, A_11(D), 134217728, 1);
  B_gpu.46_13 = B_gpu;
  cudaMemcpy (B_gpu.46_13, B_14(D), 134217728, 1);
  C_gpu.47_17 = C_gpu;
  cudaMemcpy (C_gpu.47_17, C_inputToGpu_18(D), 134217728, 1);
  clock_gettime (1, &spec);
  _72 = spec.tv_sec;
  _73 = (long unsigned int) _72;
  _74 = _73 * 1000000000;
  _75 = spec.tv_nsec;
  _76 = (long unsigned int) _75;
  _77 = _74 + _76;
  spec ={v} {CLOBBER};
  data_transfer_h2d_stop = _77;
  block.z = 1;
  grid.x = 128;
  grid.y = 512;
  grid.z = 1;
  clock_gettime (1, &spec);
  _78 = spec.tv_sec;
  _79 = (long unsigned int) _78;
  _80 = _79 * 1000000000;
  _81 = spec.tv_nsec;
  _82 = (long unsigned int) _81;
  _83 = _80 + _82;
  spec ={v} {CLOBBER};
  dev_kernel1_start = _83;
  MEM[(struct dim3 *)&block] = 32;
  MEM[(struct dim3 *)&block + 4B] = 8;
  _29 = cudaConfigureCall (grid, block, 0, 0B);
  if (_29 == 0)
    goto <bb 3>;
  else
    goto <bb 4>;

  <bb 3>:
  C_gpu.47_30 = C_gpu;
  B_gpu.46_31 = B_gpu;
  A_gpu.45_32 = A_gpu;
  __device_stub__Z16gemm_cuda_kerneliiiddPdS_S_ (ni_33(D), nj_34(D), nk_35(D), alpha_36(D), beta_37(D), A_gpu.45_32, B_gpu.46_31, C_gpu.47_30);

  <bb 4>:
  cudaThreadSynchronize ();
  clock_gettime (1, &spec);
  _84 = spec.tv_sec;
  _85 = (long unsigned int) _84;
  _86 = _85 * 1000000000;
  _87 = spec.tv_nsec;
  _88 = (long unsigned int) _87;
  _89 = _86 + _88;
  spec ={v} {CLOBBER};
  dev_kernel1_stop = _89;
  clock_gettime (1, &spec);
  _90 = spec.tv_sec;
  _91 = (long unsigned int) _90;
  _92 = _91 * 1000000000;
  _93 = spec.tv_nsec;
  _94 = (long unsigned int) _93;
  _95 = _92 + _94;
  spec ={v} {CLOBBER};
  data_transfer_d2h_start = _95;
  C_gpu.47_43 = C_gpu;
  cudaMemcpy (C_outputFromGpu_44(D), C_gpu.47_43, 134217728, 2);
  clock_gettime (1, &spec);
  _96 = spec.tv_sec;
  _97 = (long unsigned int) _96;
  _98 = _97 * 1000000000;
  _99 = spec.tv_nsec;
  _100 = (long unsigned int) _99;
  _101 = _98 + _100;
  spec ={v} {CLOBBER};
  data_transfer_d2h_stop = _101;
  A_gpu.45_47 = A_gpu;
  cudaFree (A_gpu.45_47);
  B_gpu.46_49 = B_gpu;
  cudaFree (B_gpu.46_49);
  C_gpu.47_51 = C_gpu;
  cudaFree (C_gpu.47_51);
  A_gpu ={v} {CLOBBER};
  B_gpu ={v} {CLOBBER};
  C_gpu ={v} {CLOBBER};
  block ={v} {CLOBBER};
  grid ={v} {CLOBBER};
  return;

}



;; Function void __sti____cudaRegisterAll_39_tmpxft_0000336e_00000000_7_gemm_cpp1_ii_132e4611() (_ZL76__sti____cudaRegisterAll_39_tmpxft_0000336e_00000000_7_gemm_cpp1_ii_132e4611v, funcdef_no=3304, decl_uid=67450, cgraph_uid=3125) (executed once)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }

Value ranges after VRP:

_3: VARYING


void __sti____cudaRegisterAll_39_tmpxft_0000336e_00000000_7_gemm_cpp1_ii_132e4611() ()
{
  static volatile void * * __ref;
  void * * _3;

  <bb 2>:
  _3 = __cudaRegisterFatBinary (&__fatDeviceText);
  __cudaFatCubinHandle = _3;
  __ref = _3;
  __nv_fatbinhandle_for_managed_rt = _3;
  __cudaRegisterFunction (_3, gemm_cuda_kernel, "_Z16gemm_cuda_kerneliiiddPdS_S_", "_Z16gemm_cuda_kerneliiiddPdS_S_", -1, 0B, 0B, 0B, 0B, 0B);
  atexit (__cudaUnregisterBinaryUtil);
  return;

}


