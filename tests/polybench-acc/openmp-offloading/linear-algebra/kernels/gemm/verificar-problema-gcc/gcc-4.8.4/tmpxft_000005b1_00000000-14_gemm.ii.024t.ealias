
;; Function void __nv_save_fatbinhandle_for_managed_rt(void**) (_ZL37__nv_save_fatbinhandle_for_managed_rtPPv, funcdef_no=0, decl_uid=2204, cgraph_uid=0)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
READONLY = &READONLY
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
in = &NONLOCAL
__nv_fatbinhandle_for_managed_rt = NONLOCAL
__nv_fatbinhandle_for_managed_rt = in
ESCAPED = in

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"READONLY";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"in";
"__nv_fatbinhandle_for_managed_rt";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"in" -> "ESCAPED";
"in" -> "__nv_fatbinhandle_for_managed_rt";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"READONLY";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = __nv_fatbinhandle_for_managed_rt\l"];
"STOREDANYTHING";
"INTEGER";
"in";
"__nv_fatbinhandle_for_managed_rt";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"in" -> "ESCAPED";
"in" -> "__nv_fatbinhandle_for_managed_rt";
"__nv_fatbinhandle_for_managed_rt" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
READONLY = { READONLY }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as __nv_fatbinhandle_for_managed_rt
STOREDANYTHING = { }
INTEGER = { ANYTHING }
in = { NONLOCAL }
__nv_fatbinhandle_for_managed_rt = { ESCAPED NONLOCAL }


Alias information for void __nv_save_fatbinhandle_for_managed_rt(void**)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

in_2(D), points-to non-local, points-to vars: { }

void __nv_save_fatbinhandle_for_managed_rt(void**) (void * * in)
{
  <bb 2>:
  __nv_fatbinhandle_for_managed_rt = in_2(D);
  return;

}



;; Function void ____nv_dummy_param_ref(void*) (_ZL22____nv_dummy_param_refPv, funcdef_no=3228, decl_uid=66506, cgraph_uid=3049)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
READONLY = &READONLY
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
param = &NONLOCAL
__ref = NONLOCAL
__ref = param
ESCAPED = param

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"READONLY";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"param";
"__ref";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"param" -> "ESCAPED";
"param" -> "__ref";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"READONLY";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = __ref\l"];
"STOREDANYTHING";
"INTEGER";
"param";
"__ref";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"param" -> "ESCAPED";
"param" -> "__ref";
"__ref" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
READONLY = { READONLY }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as __ref
STOREDANYTHING = { }
INTEGER = { ANYTHING }
param = { NONLOCAL }
__ref = { ESCAPED NONLOCAL }


Alias information for void ____nv_dummy_param_ref(void*)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

param_2(D), points-to non-local, points-to vars: { }

void ____nv_dummy_param_ref(void*) (void * param)
{
  static volatile void * * __ref;

  <bb 2>:
  __ref = param_2(D);
  return;

}



;; Function void print_array(int, int, double (*)[4096]) (_ZL11print_arrayiiPA4096_d, funcdef_no=3211, decl_uid=66110, cgraph_uid=3033)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
READONLY = &READONLY
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
ni = &NONLOCAL
nj = &NONLOCAL
C = &NONLOCAL
i_6 = &NULL
j_9 = &NULL
_11 = i_1
_12 = _11
_12 = &NONLOCAL
_14 = C + UNKNOWN
_15 = *_14 + UNKNOWN
stderr = NONLOCAL
stderr.67_16 = stderr
ESCAPED = stderr.67_16
ESCAPED = &READONLY
ESCAPED = _15
_18 = i_1
_18 = ni
_19 = _18
_19 = j_2
_20 = _19
_20 = &NONLOCAL
stderr.67_21 = stderr
ESCAPED = &NONLOCAL
ESCAPED = stderr.67_21
j_23 = j_2
j_23 = &NONLOCAL
j_2 = &NULL
j_2 = j_23
i_24 = i_1
i_24 = &NONLOCAL
i_1 = &NULL
i_1 = i_24
stderr.67_25 = stderr
ESCAPED = &NONLOCAL
ESCAPED = stderr.67_25

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"READONLY";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"ni" [label="\N\n_14 = ni + UNKNOWN\l"];
"i_6";
"_11";
"_14" [label="\N\n_15 = *_14 + UNKNOWN\l"];
"_15";
"stderr";
"fprintf";
"fputc";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_14";
"STOREDANYTHING" -> "_15";
"ni" -> "_11";
"_15" -> "ESCAPED";
"stderr" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"READONLY";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = stderr\l"];
"STOREDANYTHING";
"INTEGER";
"ni" [label="\N\n_14 = ni + UNKNOWN\l"];
"i_6";
"_11";
"_14" [label="\N\n_15 = *_14 + UNKNOWN\l"];
"_15";
"stderr";
"fprintf";
"fputc";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_14";
"STOREDANYTHING" -> "_15";
"ni" -> "_11";
"_15" -> "ESCAPED";
"stderr" -> "ESCAPED";
"stderr" -> "_15";
}



Points-to sets

ANYTHING = { ANYTHING }
READONLY = { READONLY }
ESCAPED = { READONLY ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as stderr
STOREDANYTHING = { }
INTEGER = { ANYTHING }
ni = { NONLOCAL }
nj = { NONLOCAL } same as ni
C = { NONLOCAL } same as ni
i_6 = { NULL }
j_9 = { NULL } same as i_6
_11 = { NULL NONLOCAL }
i_1 = { NULL NONLOCAL } same as _11
_12 = { NULL NONLOCAL } same as _11
_14 = { NONLOCAL }
_15 = { ESCAPED NONLOCAL }
stderr.67_16 = { ESCAPED NONLOCAL } same as stderr
stderr = { ESCAPED NONLOCAL }
fprintf = { }
_18 = { NULL NONLOCAL } same as _11
_19 = { NULL NONLOCAL } same as _11
j_2 = { NULL NONLOCAL } same as _11
_20 = { NULL NONLOCAL } same as _11
stderr.67_21 = { ESCAPED NONLOCAL } same as stderr
fputc = { }
j_23 = { NULL NONLOCAL } same as _11
i_24 = { NULL NONLOCAL } same as _11
stderr.67_25 = { ESCAPED NONLOCAL } same as stderr


Alias information for void print_array(int, int, double (*)[4096])

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

C_13(D), points-to non-local, points-to vars: { }
_14, points-to non-local, points-to vars: { }
stderr.67_16, points-to non-local, points-to escaped, points-to vars: { }
stderr.67_21, points-to non-local, points-to escaped, points-to vars: { }
stderr.67_25, points-to non-local, points-to escaped, points-to vars: { }

void print_array(int, int, double (*)[4096]) (int ni, int nj, double[4096] * C)
{
  int j;
  int i;
  struct _IO_FILE * stderr.67;
  long unsigned int _11;
  long unsigned int _12;
  double[4096] * _14;
  double _15;
  int _18;
  int _19;
  int _20;

  <bb 2>:
  i_6 = 0;
  goto <bb 9>;

  <bb 3>:
  j_9 = 0;
  goto <bb 7>;

  <bb 4>:
  _11 = (long unsigned int) i_1;
  _12 = _11 * 32768;
  _14 = C_13(D) + _12;
  _15 = *_14[j_2];
  stderr.67_16 = stderr;
  fprintf (stderr.67_16, "%0.2lf ", _15);
  _18 = i_1 * ni_8(D);
  _19 = _18 + j_2;
  _20 = _19 % 20;
  if (_20 == 0)
    goto <bb 5>;
  else
    goto <bb 6>;

  <bb 5>:
  stderr.67_21 = stderr;
  __builtin_fputc (10, stderr.67_21);

  <bb 6>:
  j_23 = j_2 + 1;

  <bb 7>:
  # j_2 = PHI <0(3), j_23(6)>
  if (j_2 < nj_10(D))
    goto <bb 4>;
  else
    goto <bb 8>;

  <bb 8>:
  i_24 = i_1 + 1;

  <bb 9>:
  # i_1 = PHI <0(2), i_24(8)>
  if (i_1 < ni_8(D))
    goto <bb 3>;
  else
    goto <bb 10>;

  <bb 10>:
  stderr.67_25 = stderr;
  __builtin_fputc (10, stderr.67_25);
  return;

}



;; Function double rtclock() (_ZL7rtclockv, funcdef_no=3219, decl_uid=66466, cgraph_uid=3041)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
READONLY = &READONLY
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
ESCAPED = &Tp
ESCAPED = &NULL
stat_4 = NONLOCAL
ESCAPED = &READONLY
ESCAPED = stat_4
_7 = Tp
_8 = _7
_9 = Tp
_10 = _9
_11 = _10
_11 = &NONLOCAL
_12 = _8
_12 = _11
ESCAPED = _12

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"READONLY";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"gettimeofday";
"stat_4";
"printf";
"_7";
"_11";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_7";
"stat_4" -> "ESCAPED";
"_7" -> "_11";
"_11" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"READONLY";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = stat_4\l"];
"STOREDANYTHING";
"INTEGER";
"gettimeofday";
"stat_4";
"printf";
"_7";
"_11";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_7";
"stat_4" -> "ESCAPED";
"stat_4" -> "_7";
"_7" -> "ESCAPED";
"_7" -> "_11";
"_11" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
READONLY = { READONLY }
ESCAPED = { NULL READONLY ESCAPED NONLOCAL Tp }
NONLOCAL = { ESCAPED NONLOCAL } same as stat_4
STOREDANYTHING = { }
INTEGER = { ANYTHING }
gettimeofday = { }
Tp = { ESCAPED NONLOCAL } same as _7
stat_4 = { ESCAPED NONLOCAL }
printf = { }
_7 = { ESCAPED NONLOCAL }
_8 = { ESCAPED NONLOCAL } same as _7
_9 = { ESCAPED NONLOCAL } same as _7
_10 = { ESCAPED NONLOCAL } same as _7
_11 = { ESCAPED NONLOCAL }
_12 = { ESCAPED NONLOCAL } same as _11


Alias information for double rtclock()

Aliased symbols

Tp, UID D.66468, struct timeval, is addressable

Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.66468 }

Flow-insensitive points-to information


double rtclock() ()
{
  int stat;
  struct timeval Tp;
  long int _7;
  double _8;
  long int _9;
  double _10;
  double _11;
  double _12;

  <bb 2>:
  stat_4 = gettimeofday (&Tp, 0B);
  if (stat_4 != 0)
    goto <bb 3>;
  else
    goto <bb 4>;

  <bb 3>:
  printf ("Error return from gettimeofday: %d", stat_4);

  <bb 4>:
  _7 = Tp.tv_sec;
  _8 = (double) _7;
  _9 = Tp.tv_usec;
  _10 = (double) _9;
  _11 = _10 * 9.99999999999999954748111825886258685613938723690807819366e-7;
  _12 = _8 + _11;
  Tp ={v} {CLOBBER};
  return _12;

<L5>:
  Tp ={v} {CLOBBER};
  resx 1

}



;; Function void* xmalloc(size_t) (_ZL7xmallocm, funcdef_no=3225, decl_uid=66490, cgraph_uid=3047)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
READONLY = &READONLY
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
num = &NONLOCAL
newA = &NULL
ESCAPED = &newA
ESCAPED = &NONLOCAL
ESCAPED = num
ret_5 = NONLOCAL
newA.72_6 = newA
stderr = NONLOCAL
stderr.73_9 = stderr
ESCAPED = &READONLY
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = stderr.73_9
ESCAPED = &NONLOCAL
_7 = newA
ESCAPED = _7

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"READONLY";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"num";
"posix_memalign";
"ret_5";
"newA.72_6";
"fwrite";
"exit";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "newA.72_6";
"num" -> "ESCAPED";
"ret_5" -> "ESCAPED";
"newA.72_6" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"READONLY";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = ret_5\l"];
"STOREDANYTHING";
"INTEGER";
"num";
"posix_memalign";
"ret_5";
"newA.72_6";
"fwrite";
"exit";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "newA.72_6";
"num" -> "ESCAPED";
"ret_5" -> "ESCAPED";
"ret_5" -> "newA.72_6";
"newA.72_6" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
READONLY = { READONLY }
ESCAPED = { NULL READONLY ESCAPED NONLOCAL newA }
NONLOCAL = { ESCAPED NONLOCAL } same as ret_5
STOREDANYTHING = { }
INTEGER = { ANYTHING }
num = { NONLOCAL }
newA = { NULL ESCAPED NONLOCAL } same as newA.72_6
posix_memalign = { }
ret_5 = { ESCAPED NONLOCAL }
newA.72_6 = { NULL ESCAPED NONLOCAL }
stderr.73_9 = { ESCAPED NONLOCAL } same as ret_5
stderr = { ESCAPED NONLOCAL } same as ret_5
fwrite = { }
exit = { }
_7 = { NULL ESCAPED NONLOCAL } same as newA.72_6


Alias information for void* xmalloc(size_t)

Aliased symbols

newA, UID D.66492, void *, is addressable

Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.66492 }

Flow-insensitive points-to information

newA.72_6, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_7, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.73_9, points-to non-local, points-to escaped, points-to vars: { }

void* xmalloc(size_t) (size_t num)
{
  int ret;
  void * newA;
  struct _IO_FILE * stderr.73;
  void * newA.72;
  void * _7;

  <bb 2>:
  newA = 0B;
  ret_5 = posix_memalign (&newA, 32, num_3(D));
  newA.72_6 = newA;
  if (newA.72_6 == 0B)
    goto <bb 4>;
  else
    goto <bb 3>;

  <bb 3>:
  if (ret_5 != 0)
    goto <bb 4>;
  else
    goto <bb 6>;

  <bb 4>:
  stderr.73_9 = stderr;
  __builtin_fwrite ("[PolyBench] posix_memalign: cannot allocate memory", 1, 50, stderr.73_9);

  <bb 5>:
  exit (1);

  <bb 6>:
  _7 = newA;
  newA ={v} {CLOBBER};
  return _7;

<L5>:
  newA ={v} {CLOBBER};
  resx 1

}



;; Function cudaError_t cudaLaunch(T*) [with T = char; cudaError_t = cudaError] (_Z10cudaLaunchIcE9cudaErrorPT_, funcdef_no=3255, decl_uid=66834, cgraph_uid=3076)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
READONLY = &READONLY
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
func = &NONLOCAL
ESCAPED = func
_4 = NONLOCAL
_5 = _4
ESCAPED = _5

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"READONLY";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"func";
"cudaLaunch";
"_4";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"func" -> "ESCAPED";
"_4" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"READONLY";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = _4\l"];
"STOREDANYTHING";
"INTEGER";
"func";
"cudaLaunch";
"_4";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"func" -> "ESCAPED";
"_4" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
READONLY = { READONLY }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as _4
STOREDANYTHING = { }
INTEGER = { ANYTHING }
func = { NONLOCAL }
cudaLaunch = { }
_4 = { ESCAPED NONLOCAL }
_5 = { ESCAPED NONLOCAL } same as _4


Alias information for cudaError_t cudaLaunch(T*) [with T = char; cudaError_t = cudaError]

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

func_2(D), points-to non-local, points-to vars: { }

cudaError_t cudaLaunch(T*) [with T = char; cudaError_t = cudaError] (char * func)
{
  cudaError_t _4;
  cudaError_t _5;

  <bb 2>:
  _4 = cudaLaunch (func_2(D));
  _5 = _4;
  return _5;

}



;; Function void __cudaUnregisterBinaryUtil() (_ZL26__cudaUnregisterBinaryUtilv, funcdef_no=3229, decl_uid=66570, cgraph_uid=3050)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
READONLY = &READONLY
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__ref = NONLOCAL
__cudaFatCubinHandle = NONLOCAL
__ref = &__cudaFatCubinHandle
ESCAPED = &__cudaFatCubinHandle
__cudaFatCubinHandle.84_3 = __cudaFatCubinHandle
ESCAPED = __cudaFatCubinHandle.84_3

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"READONLY";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"__ref";
"__cudaFatCubinHandle.84_3";
"__cudaUnregisterFatBinary";

  // Edges in the constraint graph:
"NONLOCAL" -> "__ref";
"NONLOCAL" -> "__cudaFatCubinHandle.84_3";
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "__cudaFatCubinHandle.84_3";
"__cudaFatCubinHandle.84_3" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"READONLY";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"__ref";
"__cudaFatCubinHandle.84_3";
"__cudaUnregisterFatBinary";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"NONLOCAL" -> "__ref";
"NONLOCAL" -> "__cudaFatCubinHandle.84_3";
"NONLOCAL" -> "__cudaFatCubinHandle.84_3";
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "__cudaFatCubinHandle.84_3";
"__cudaFatCubinHandle.84_3" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
READONLY = { READONLY }
ESCAPED = { ESCAPED NONLOCAL __cudaFatCubinHandle }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__ref = { ESCAPED NONLOCAL __cudaFatCubinHandle }
__cudaFatCubinHandle = { ESCAPED NONLOCAL } same as __cudaFatCubinHandle.84_3
__cudaFatCubinHandle.84_3 = { ESCAPED NONLOCAL }
__cudaUnregisterFatBinary = { }


Alias information for void __cudaUnregisterBinaryUtil()

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { D.66569 } (includes global vars)

Flow-insensitive points-to information

__cudaFatCubinHandle.84_3, points-to non-local, points-to escaped, points-to vars: { }

void __cudaUnregisterBinaryUtil() ()
{
  static volatile void * * __ref;
  void * * __cudaFatCubinHandle.84;

  <bb 2>:
  __ref = &__cudaFatCubinHandle;
  __cudaFatCubinHandle.84_3 = __cudaFatCubinHandle;
  __cudaUnregisterFatBinary (__cudaFatCubinHandle.84_3);
  return;

}



;; Function void __nv_cudaEntityRegisterCallback(void**) (_ZL31__nv_cudaEntityRegisterCallbackPPv, funcdef_no=3253, decl_uid=66805, cgraph_uid=3074)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
READONLY = &READONLY
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__T26 = &NONLOCAL
__ref = NONLOCAL
__ref = __T26
ESCAPED = __T26
__nv_fatbinhandle_for_managed_rt = NONLOCAL
__nv_fatbinhandle_for_managed_rt = __T26
ESCAPED = __T26
ESCAPED = __T26
ESCAPED = &_Z16gemm_cuda_kerneliiiddPdS_S_
ESCAPED = &READONLY
ESCAPED = &READONLY
ESCAPED = &NONLOCAL
ESCAPED = &NULL
ESCAPED = &NULL
ESCAPED = &NULL
ESCAPED = &NULL
ESCAPED = &NULL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"READONLY";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"__T26";
"__ref";
"__cudaRegisterFunction";
"_Z16gemm_cuda_kerneliiiddPdS_S_";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_Z16gemm_cuda_kerneliiiddPdS_S_";
"__T26" -> "ESCAPED";
"__T26" -> "__ref";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"READONLY";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = __ref\l"];
"STOREDANYTHING";
"INTEGER";
"__T26";
"__ref";
"__cudaRegisterFunction";
"_Z16gemm_cuda_kerneliiiddPdS_S_";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_Z16gemm_cuda_kerneliiiddPdS_S_";
"__T26" -> "ESCAPED";
"__T26" -> "__ref";
"__ref" -> "ESCAPED";
"__ref" -> "_Z16gemm_cuda_kerneliiiddPdS_S_";
"_Z16gemm_cuda_kerneliiiddPdS_S_" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
READONLY = { READONLY }
ESCAPED = { NULL READONLY ESCAPED NONLOCAL _Z16gemm_cuda_kerneliiiddPdS_S_ }
NONLOCAL = { ESCAPED NONLOCAL } same as __ref
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__T26 = { NONLOCAL }
__ref = { ESCAPED NONLOCAL }
__nv_fatbinhandle_for_managed_rt = { ESCAPED NONLOCAL } same as __ref
__cudaRegisterFunction = { }
_Z16gemm_cuda_kerneliiiddPdS_S_ = { ESCAPED NONLOCAL }


Alias information for void __nv_cudaEntityRegisterCallback(void**)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { }

Flow-insensitive points-to information

__T26_2(D), points-to non-local, points-to vars: { }

void __nv_cudaEntityRegisterCallback(void**) (void * * __T26)
{
  static volatile void * * __ref;

  <bb 2>:
  __ref = __T26_2(D);
  __nv_fatbinhandle_for_managed_rt = __T26_2(D);
  __cudaRegisterFunction (__T26_2(D), gemm_cuda_kernel, "_Z16gemm_cuda_kerneliiiddPdS_S_", "_Z16gemm_cuda_kerneliiiddPdS_S_", -1, 0B, 0B, 0B, 0B, 0B);
  return;

}



;; Function dim3::dim3(unsigned int, unsigned int, unsigned int) (_ZN4dim3C2Ejjj, funcdef_no=3, decl_uid=3003, cgraph_uid=3)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
READONLY = &READONLY
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
vx = &NONLOCAL
vy = &NONLOCAL
vz = &NONLOCAL
*this = vx
*this + 32 = vy
*this + 64 = vz

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"READONLY";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"this" [label="\N\n*this = this\l*this + 32 = this\l*this + 64 = this\l"];

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"READONLY";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"this" [label="\N\n*this = this\l*this + 32 = this\l*this + 64 = this\l"];

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"STOREDANYTHING" -> "ESCAPED";
"this" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
READONLY = { READONLY }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
vx = { NONLOCAL } same as this
vy = { NONLOCAL } same as this
vz = { NONLOCAL } same as this


Alias information for dim3::dim3(unsigned int, unsigned int, unsigned int)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_2(D), points-to non-local, points-to vars: { }

dim3::dim3(unsigned int, unsigned int, unsigned int) (struct dim3 * const this, unsigned int vx, unsigned int vy, unsigned int vz)
{
  <bb 2>:
  this_2(D)->x = vx_3(D);
  this_2(D)->y = vy_5(D);
  this_2(D)->z = vz_7(D);
  return;

}



;; Function float std::ceil(float) (_ZSt4ceilf, funcdef_no=139, decl_uid=8558, cgraph_uid=131)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
READONLY = &READONLY
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__x = &NONLOCAL
_2 = __x
_2 = &NONLOCAL
ESCAPED = _2

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"READONLY";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"__x";
"ceilf";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"__x" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"READONLY";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"__x";
"ceilf";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"STOREDANYTHING" -> "ESCAPED";
"__x" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
READONLY = { READONLY }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__x = { NONLOCAL }
ceilf = { }
_2 = { NONLOCAL } same as __x


Alias information for float std::ceil(float)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information


float std::ceil(float) (float __x)
{
  float _2;

  <bb 2>:
  _2 = __builtin_ceilf (__x_1(D));
  return _2;

}



;; Function float absVal(float) (_Z6absValf, funcdef_no=3194, decl_uid=65338, cgraph_uid=3016)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
READONLY = &READONLY
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
a = &NONLOCAL
_3 = a
a_4 = a
_1 = _3
_1 = a_4
ESCAPED = _1

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"READONLY";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"a";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"a" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"READONLY";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"a";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"STOREDANYTHING" -> "ESCAPED";
"a" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
READONLY = { READONLY }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
a = { NONLOCAL }
_3 = { NONLOCAL } same as a
a_4 = { NONLOCAL } same as a
_1 = { NONLOCAL } same as a


Alias information for float absVal(float)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information


float absVal(float) (float a)
{
  float _1;
  float _3;

  <bb 2>:
  if (a_2(D) < 0.0)
    goto <bb 3>;
  else
    goto <bb 4>;

  <bb 3>:
  _3 = -a_2(D);
  goto <bb 5>;

  <bb 4>:
  a_4 = a_2(D);

  <bb 5>:
  # _1 = PHI <_3(3), a_4(4)>
  return _1;

}



;; Function float percentDiff(double, double) (_Z11percentDiffdd, funcdef_no=3195, decl_uid=65342, cgraph_uid=3017)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
READONLY = &READONLY
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
val1 = &NONLOCAL
val2 = &NONLOCAL
_4 = val1
_25 = _4
_26 = _4
_26 = _25
_35 = _26
_5 = _35
_6 = _5
_8 = val2
_27 = _8
_28 = _8
_28 = _27
_36 = _28
_9 = _36
_10 = _9
iftmp.1_11 = &NONLOCAL
iftmp.1_12 = &NULL
iftmp.1_1 = &NONLOCAL
iftmp.1_1 = &NULL
retval.0_13 = iftmp.1_1
_14 = &NONLOCAL
_15 = val1
_15 = val2
_16 = _15
_29 = _16
_30 = _16
_30 = _29
_37 = _30
_17 = _37
_18 = val1
_18 = &NONLOCAL
_19 = _18
_31 = _19
_32 = _19
_32 = _31
_38 = _32
_20 = _38
_21 = _17
_21 = _20
_33 = _21
_34 = _21
_34 = _33
_39 = _34
_22 = _39
_23 = _22
_23 = &NONLOCAL
_2 = &NONLOCAL
_2 = _23
ESCAPED = _2

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"READONLY";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"val1";
"iftmp.1_12";
"iftmp.1_1";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"val1" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"READONLY";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"val1";
"iftmp.1_12";
"iftmp.1_1";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"STOREDANYTHING" -> "ESCAPED";
"val1" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
READONLY = { READONLY }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
val1 = { NONLOCAL }
val2 = { NONLOCAL } same as val1
_4 = { NONLOCAL } same as val1
_25 = { NONLOCAL } same as val1
_26 = { NONLOCAL } same as val1
_35 = { NONLOCAL } same as val1
_5 = { NONLOCAL } same as val1
_6 = { NONLOCAL } same as val1
_8 = { NONLOCAL } same as val1
_27 = { NONLOCAL } same as val1
_28 = { NONLOCAL } same as val1
_36 = { NONLOCAL } same as val1
_9 = { NONLOCAL } same as val1
_10 = { NONLOCAL } same as val1
iftmp.1_11 = { NONLOCAL } same as val1
iftmp.1_12 = { NULL }
iftmp.1_1 = { NULL NONLOCAL }
retval.0_13 = { NULL NONLOCAL } same as iftmp.1_1
_14 = { NONLOCAL } same as val1
_15 = { NONLOCAL } same as val1
_16 = { NONLOCAL } same as val1
_29 = { NONLOCAL } same as val1
_30 = { NONLOCAL } same as val1
_37 = { NONLOCAL } same as val1
_17 = { NONLOCAL } same as val1
_18 = { NONLOCAL } same as val1
_19 = { NONLOCAL } same as val1
_31 = { NONLOCAL } same as val1
_32 = { NONLOCAL } same as val1
_38 = { NONLOCAL } same as val1
_20 = { NONLOCAL } same as val1
_21 = { NONLOCAL } same as val1
_33 = { NONLOCAL } same as val1
_34 = { NONLOCAL } same as val1
_39 = { NONLOCAL } same as val1
_22 = { NONLOCAL } same as val1
_23 = { NONLOCAL } same as val1
_2 = { NONLOCAL } same as val1


Alias information for float percentDiff(double, double)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information


float percentDiff(double, double) (double val1, double val2)
{
  float D.67330;
  float D.67328;
  float D.67326;
  float D.67324;
  float D.67322;
  bool iftmp.1;
  bool retval.0;
  float _2;
  float _4;
  float _5;
  double _6;
  float _8;
  float _9;
  double _10;
  float _14;
  double _15;
  float _16;
  float _17;
  double _18;
  float _19;
  float _20;
  float _21;
  float _22;
  float _23;
  float _25;
  float _26;
  float _27;
  float _28;
  float _29;
  float _30;
  float _31;
  float _32;
  float _33;
  float _34;

  <bb 2>:
  _4 = (float) val1_3(D);
  if (_4 < 0.0)
    goto <bb 3>;
  else
    goto <bb 4>;

  <bb 3>:
  _25 = -_4;

  <bb 4>:
  # _26 = PHI <_4(2), _25(3)>
  _35 = _26;
  _5 = _35;
  _6 = (double) _5;
  if (_6 < 1.00000000000000002081668171172168513294309377670288085938e-2)
    goto <bb 5>;
  else
    goto <bb 9>;

  <bb 5>:
  _8 = (float) val2_7(D);
  if (_8 < 0.0)
    goto <bb 6>;
  else
    goto <bb 7>;

  <bb 6>:
  _27 = -_8;

  <bb 7>:
  # _28 = PHI <_8(5), _27(6)>
  _36 = _28;
  _9 = _36;
  _10 = (double) _9;
  if (_10 < 1.00000000000000002081668171172168513294309377670288085938e-2)
    goto <bb 8>;
  else
    goto <bb 9>;

  <bb 8>:
  iftmp.1_11 = 1;
  goto <bb 10>;

  <bb 9>:
  iftmp.1_12 = 0;

  <bb 10>:
  # iftmp.1_1 = PHI <1(8), 0(9)>
  retval.0_13 = iftmp.1_1;
  if (retval.0_13 != 0)
    goto <bb 11>;
  else
    goto <bb 12>;

  <bb 11>:
  _14 = 0.0;
  goto <bb 19>;

  <bb 12>:
  _15 = val1_3(D) - val2_7(D);
  _16 = (float) _15;
  if (_16 < 0.0)
    goto <bb 13>;
  else
    goto <bb 14>;

  <bb 13>:
  _29 = -_16;

  <bb 14>:
  # _30 = PHI <_16(12), _29(13)>
  _37 = _30;
  _17 = _37;
  _18 = val1_3(D) + 9.99999993922529029077850282192230224609375e-9;
  _19 = (float) _18;
  if (_19 < 0.0)
    goto <bb 15>;
  else
    goto <bb 16>;

  <bb 15>:
  _31 = -_19;

  <bb 16>:
  # _32 = PHI <_19(14), _31(15)>
  _38 = _32;
  _20 = _38;
  _21 = _17 / _20;
  if (_21 < 0.0)
    goto <bb 17>;
  else
    goto <bb 18>;

  <bb 17>:
  _33 = -_21;

  <bb 18>:
  # _34 = PHI <_21(16), _33(17)>
  _39 = _34;
  _22 = _39;
  _23 = _22 * 1.0e+2;

  <bb 19>:
  # _2 = PHI <0.0(11), _23(18)>
  return _2;

}



;; Function uint64_t get_time() (_Z8get_timev, funcdef_no=3200, decl_uid=65516, cgraph_uid=3022)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
READONLY = &READONLY
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
ESCAPED = &NONLOCAL
ESCAPED = &spec
_3 = spec
_4 = _3
_5 = _4
_5 = &NONLOCAL
_6 = spec
_7 = _6
_8 = _5
_8 = _7
ESCAPED = _8

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"READONLY";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"clock_gettime";
"_3";
"_5";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_3";
"_3" -> "_5";
"_5" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"READONLY";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"clock_gettime";
"_3";
"_5";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"NONLOCAL" -> "_3";
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_3";
"_3" -> "ESCAPED";
"_3" -> "_5";
"_5" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
READONLY = { READONLY }
ESCAPED = { ESCAPED NONLOCAL spec }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
clock_gettime = { }
spec = { ESCAPED NONLOCAL } same as _3
_3 = { ESCAPED NONLOCAL }
_4 = { ESCAPED NONLOCAL } same as _3
_5 = { ESCAPED NONLOCAL }
_6 = { ESCAPED NONLOCAL } same as _3
_7 = { ESCAPED NONLOCAL } same as _3
_8 = { ESCAPED NONLOCAL } same as _5


Alias information for uint64_t get_time()

Aliased symbols

spec, UID D.65518, struct timespec, is addressable

Call clobber information

ESCAPED, points-to non-local, points-to vars: { D.65518 }

Flow-insensitive points-to information


uint64_t get_time() ()
{
  struct timespec spec;
  long int _3;
  long unsigned int _4;
  long unsigned int _5;
  long int _6;
  long unsigned int _7;
  uint64_t _8;

  <bb 2>:
  clock_gettime (1, &spec);
  _3 = spec.tv_sec;
  _4 = (long unsigned int) _3;
  _5 = _4 * 1000000000;
  _6 = spec.tv_nsec;
  _7 = (long unsigned int) _6;
  _8 = _5 + _7;
  spec ={v} {CLOBBER};
  return _8;

}



;; Function void hookomp_timing_start(uint64_t*) (_Z20hookomp_timing_startPm, funcdef_no=3201, decl_uid=65520, cgraph_uid=3023)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
READONLY = &READONLY
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
_start = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &spec
_6 = spec
_7 = _6
_8 = _7
_8 = &NONLOCAL
_9 = spec
_10 = _9
_11 = _8
_11 = _10
_14 = _11
_3 = _14
*_start = _3

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"READONLY";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"_start" [label="\N\n*_start = _8\l"];
"clock_gettime";
"_6";
"_8";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_6";
"_6" -> "_8";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"READONLY";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"_start" [label="\N\n*_start = _8\l"];
"clock_gettime";
"_6";
"_8";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"NONLOCAL" -> "_6";
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_6";
"_6" -> "ESCAPED";
"_6" -> "_8";
"_8" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
READONLY = { READONLY }
ESCAPED = { ESCAPED NONLOCAL spec }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
_start = { NONLOCAL }
clock_gettime = { }
spec = { ESCAPED NONLOCAL } same as _6
_6 = { ESCAPED NONLOCAL }
_7 = { ESCAPED NONLOCAL } same as _6
_8 = { ESCAPED NONLOCAL }
_9 = { ESCAPED NONLOCAL } same as _6
_10 = { ESCAPED NONLOCAL } same as _6
_11 = { ESCAPED NONLOCAL } same as _8
_14 = { ESCAPED NONLOCAL } same as _8
_3 = { ESCAPED NONLOCAL } same as _8


Alias information for void hookomp_timing_start(uint64_t*)

Aliased symbols

spec, UID D.67335, struct timespec, is addressable

Call clobber information

ESCAPED, points-to non-local, points-to vars: { D.67335 }

Flow-insensitive points-to information

_start_4(D), points-to non-local, points-to vars: { }

void hookomp_timing_start(uint64_t*) (uint64_t * _start)
{
  struct timespec spec;
  uint64_t D.67336;
  long unsigned int _3;
  long int _6;
  long unsigned int _7;
  long unsigned int _8;
  long int _9;
  long unsigned int _10;
  uint64_t _11;

  <bb 2>:
  clock_gettime (1, &spec);
  _6 = spec.tv_sec;
  _7 = (long unsigned int) _6;
  _8 = _7 * 1000000000;
  _9 = spec.tv_nsec;
  _10 = (long unsigned int) _9;
  _11 = _8 + _10;
  spec ={v} {CLOBBER};
  _14 = _11;
  _3 = _14;
  *_start_4(D) = _3;
  return;

}



;; Function void hookomp_timing_stop(uint64_t*) (_Z19hookomp_timing_stopPm, funcdef_no=3202, decl_uid=65523, cgraph_uid=3024)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
READONLY = &READONLY
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
_stop = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &spec
_6 = spec
_7 = _6
_8 = _7
_8 = &NONLOCAL
_9 = spec
_10 = _9
_11 = _8
_11 = _10
_14 = _11
_3 = _14
*_stop = _3

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"READONLY";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"_stop" [label="\N\n*_stop = _8\l"];
"clock_gettime";
"_6";
"_8";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_6";
"_6" -> "_8";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"READONLY";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"_stop" [label="\N\n*_stop = _8\l"];
"clock_gettime";
"_6";
"_8";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"NONLOCAL" -> "_6";
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_6";
"_6" -> "ESCAPED";
"_6" -> "_8";
"_8" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
READONLY = { READONLY }
ESCAPED = { ESCAPED NONLOCAL spec }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
_stop = { NONLOCAL }
clock_gettime = { }
spec = { ESCAPED NONLOCAL } same as _6
_6 = { ESCAPED NONLOCAL }
_7 = { ESCAPED NONLOCAL } same as _6
_8 = { ESCAPED NONLOCAL }
_9 = { ESCAPED NONLOCAL } same as _6
_10 = { ESCAPED NONLOCAL } same as _6
_11 = { ESCAPED NONLOCAL } same as _8
_14 = { ESCAPED NONLOCAL } same as _8
_3 = { ESCAPED NONLOCAL } same as _8


Alias information for void hookomp_timing_stop(uint64_t*)

Aliased symbols

spec, UID D.67339, struct timespec, is addressable

Call clobber information

ESCAPED, points-to non-local, points-to vars: { D.67339 }

Flow-insensitive points-to information

_stop_4(D), points-to non-local, points-to vars: { }

void hookomp_timing_stop(uint64_t*) (uint64_t * _stop)
{
  struct timespec spec;
  uint64_t D.67340;
  long unsigned int _3;
  long int _6;
  long unsigned int _7;
  long unsigned int _8;
  long int _9;
  long unsigned int _10;
  uint64_t _11;

  <bb 2>:
  clock_gettime (1, &spec);
  _6 = spec.tv_sec;
  _7 = (long unsigned int) _6;
  _8 = _7 * 1000000000;
  _9 = spec.tv_nsec;
  _10 = (long unsigned int) _9;
  _11 = _8 + _10;
  spec ={v} {CLOBBER};
  _14 = _11;
  _3 = _14;
  *_stop_4(D) = _3;
  return;

}



;; Function void hookomp_timing_print(uint64_t, uint64_t) (_Z20hookomp_timing_printmm, funcdef_no=3203, decl_uid=65527, cgraph_uid=3025)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
READONLY = &READONLY
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
tstart = &NONLOCAL
tstop = &NONLOCAL
_3 = tstop
_3 = tstart
ESCAPED = &READONLY
ESCAPED = _3

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"READONLY";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"tstart";
"printf";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"tstart" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"READONLY";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"tstart";
"printf";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"STOREDANYTHING" -> "ESCAPED";
"tstart" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
READONLY = { READONLY }
ESCAPED = { READONLY ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
tstart = { NONLOCAL }
tstop = { NONLOCAL } same as tstart
_3 = { NONLOCAL } same as tstart
printf = { }


Alias information for void hookomp_timing_print(uint64_t, uint64_t)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information


void hookomp_timing_print(uint64_t, uint64_t) (uint64_t tstart, uint64_t tstop)
{
  long unsigned int _3;

  <bb 2>:
  _3 = tstop_1(D) - tstart_2(D);
  printf ("%llu", _3);
  return;

}



;; Function void hookomp_timing_print_without_dev() (_Z32hookomp_timing_print_without_devv, funcdef_no=3204, decl_uid=65529, cgraph_uid=3026)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
READONLY = &READONLY
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
omp_stop = NONLOCAL
omp_stop.2_3 = omp_stop
omp_start = NONLOCAL
omp_start.3_4 = omp_start
total_time_5 = omp_stop.2_3
total_time_5 = omp_start.3_4
dev_kernel1_stop = NONLOCAL
dev_kernel1_stop.4_6 = dev_kernel1_stop
dev_kernel1_start = NONLOCAL
dev_kernel1_start.5_7 = dev_kernel1_start
_8 = dev_kernel1_stop.4_6
_8 = dev_kernel1_start.5_7
dev_kernel2_stop = NONLOCAL
dev_kernel2_stop.6_9 = dev_kernel2_stop
dev_kernel2_start = NONLOCAL
dev_kernel2_start.7_10 = dev_kernel2_start
_11 = dev_kernel2_stop.6_9
_11 = dev_kernel2_start.7_10
_12 = _8
_12 = _11
dev_kernel3_stop = NONLOCAL
dev_kernel3_stop.8_13 = dev_kernel3_stop
dev_kernel3_start = NONLOCAL
dev_kernel3_start.9_14 = dev_kernel3_start
_15 = dev_kernel3_stop.8_13
_15 = dev_kernel3_start.9_14
dev_time_16 = _12
dev_time_16 = _15
data_transfer_h2d_stop = NONLOCAL
data_transfer_h2d_stop.10_17 = data_transfer_h2d_stop
data_transfer_h2d_start = NONLOCAL
data_transfer_h2d_start.11_18 = data_transfer_h2d_start
_19 = data_transfer_h2d_stop.10_17
_19 = data_transfer_h2d_start.11_18
data_transfer_d2h_stop = NONLOCAL
data_transfer_d2h_stop.12_20 = data_transfer_d2h_stop
data_transfer_d2h_start = NONLOCAL
data_transfer_d2h_start.13_21 = data_transfer_d2h_start
_22 = data_transfer_d2h_stop.12_20
_22 = data_transfer_d2h_start.13_21
dt_time_23 = _19
dt_time_23 = _22
_24 = total_time_5
_24 = dev_time_16
iftmp.14_25 = _24
iftmp.14_25 = dt_time_23
total_time_26 = total_time_5
iftmp.14_1 = iftmp.14_25
iftmp.14_1 = total_time_26
ESCAPED = &READONLY
ESCAPED = iftmp.14_1

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"READONLY";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"omp_stop";
"printf";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"omp_stop" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"READONLY";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = omp_stop\l"];
"STOREDANYTHING";
"INTEGER";
"omp_stop";
"printf";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"omp_stop" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
READONLY = { READONLY }
ESCAPED = { READONLY ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as omp_stop
STOREDANYTHING = { }
INTEGER = { ANYTHING }
omp_stop.2_3 = { ESCAPED NONLOCAL } same as omp_stop
omp_stop = { ESCAPED NONLOCAL }
omp_start.3_4 = { ESCAPED NONLOCAL } same as omp_stop
omp_start = { ESCAPED NONLOCAL } same as omp_stop
total_time_5 = { ESCAPED NONLOCAL } same as omp_stop
dev_kernel1_stop.4_6 = { ESCAPED NONLOCAL } same as omp_stop
dev_kernel1_stop = { ESCAPED NONLOCAL } same as omp_stop
dev_kernel1_start.5_7 = { ESCAPED NONLOCAL } same as omp_stop
dev_kernel1_start = { ESCAPED NONLOCAL } same as omp_stop
_8 = { ESCAPED NONLOCAL } same as omp_stop
dev_kernel2_stop.6_9 = { ESCAPED NONLOCAL } same as omp_stop
dev_kernel2_stop = { ESCAPED NONLOCAL } same as omp_stop
dev_kernel2_start.7_10 = { ESCAPED NONLOCAL } same as omp_stop
dev_kernel2_start = { ESCAPED NONLOCAL } same as omp_stop
_11 = { ESCAPED NONLOCAL } same as omp_stop
_12 = { ESCAPED NONLOCAL } same as omp_stop
dev_kernel3_stop.8_13 = { ESCAPED NONLOCAL } same as omp_stop
dev_kernel3_stop = { ESCAPED NONLOCAL } same as omp_stop
dev_kernel3_start.9_14 = { ESCAPED NONLOCAL } same as omp_stop
dev_kernel3_start = { ESCAPED NONLOCAL } same as omp_stop
_15 = { ESCAPED NONLOCAL } same as omp_stop
dev_time_16 = { ESCAPED NONLOCAL } same as omp_stop
data_transfer_h2d_stop.10_17 = { ESCAPED NONLOCAL } same as omp_stop
data_transfer_h2d_stop = { ESCAPED NONLOCAL } same as omp_stop
data_transfer_h2d_start.11_18 = { ESCAPED NONLOCAL } same as omp_stop
data_transfer_h2d_start = { ESCAPED NONLOCAL } same as omp_stop
_19 = { ESCAPED NONLOCAL } same as omp_stop
data_transfer_d2h_stop.12_20 = { ESCAPED NONLOCAL } same as omp_stop
data_transfer_d2h_stop = { ESCAPED NONLOCAL } same as omp_stop
data_transfer_d2h_start.13_21 = { ESCAPED NONLOCAL } same as omp_stop
data_transfer_d2h_start = { ESCAPED NONLOCAL } same as omp_stop
_22 = { ESCAPED NONLOCAL } same as omp_stop
dt_time_23 = { ESCAPED NONLOCAL } same as omp_stop
_24 = { ESCAPED NONLOCAL } same as omp_stop
iftmp.14_25 = { ESCAPED NONLOCAL } same as omp_stop
total_time_26 = { ESCAPED NONLOCAL } same as omp_stop
iftmp.14_1 = { ESCAPED NONLOCAL } same as omp_stop
printf = { }


Alias information for void hookomp_timing_print_without_dev()

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information


void hookomp_timing_print_without_dev() ()
{
  uint64_t dt_time;
  uint64_t dev_time;
  uint64_t total_time;
  uint64_t iftmp.14;
  long unsigned int data_transfer_d2h_start.13;
  long unsigned int data_transfer_d2h_stop.12;
  long unsigned int data_transfer_h2d_start.11;
  long unsigned int data_transfer_h2d_stop.10;
  long unsigned int dev_kernel3_start.9;
  long unsigned int dev_kernel3_stop.8;
  long unsigned int dev_kernel2_start.7;
  long unsigned int dev_kernel2_stop.6;
  long unsigned int dev_kernel1_start.5;
  long unsigned int dev_kernel1_stop.4;
  long unsigned int omp_start.3;
  long unsigned int omp_stop.2;
  long unsigned int _8;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int _15;
  long unsigned int _19;
  long unsigned int _22;
  long unsigned int _24;

  <bb 2>:
  omp_stop.2_3 = omp_stop;
  omp_start.3_4 = omp_start;
  total_time_5 = omp_stop.2_3 - omp_start.3_4;
  dev_kernel1_stop.4_6 = dev_kernel1_stop;
  dev_kernel1_start.5_7 = dev_kernel1_start;
  _8 = dev_kernel1_stop.4_6 - dev_kernel1_start.5_7;
  dev_kernel2_stop.6_9 = dev_kernel2_stop;
  dev_kernel2_start.7_10 = dev_kernel2_start;
  _11 = dev_kernel2_stop.6_9 - dev_kernel2_start.7_10;
  _12 = _8 + _11;
  dev_kernel3_stop.8_13 = dev_kernel3_stop;
  dev_kernel3_start.9_14 = dev_kernel3_start;
  _15 = dev_kernel3_stop.8_13 - dev_kernel3_start.9_14;
  dev_time_16 = _12 + _15;
  data_transfer_h2d_stop.10_17 = data_transfer_h2d_stop;
  data_transfer_h2d_start.11_18 = data_transfer_h2d_start;
  _19 = data_transfer_h2d_stop.10_17 - data_transfer_h2d_start.11_18;
  data_transfer_d2h_stop.12_20 = data_transfer_d2h_stop;
  data_transfer_d2h_start.13_21 = data_transfer_d2h_start;
  _22 = data_transfer_d2h_stop.12_20 - data_transfer_d2h_start.13_21;
  dt_time_23 = _19 + _22;
  if (total_time_5 != 0)
    goto <bb 3>;
  else
    goto <bb 4>;

  <bb 3>:
  _24 = total_time_5 - dev_time_16;
  iftmp.14_25 = _24 - dt_time_23;
  goto <bb 5>;

  <bb 4>:
  total_time_26 = total_time_5;

  <bb 5>:
  # iftmp.14_1 = PHI <iftmp.14_25(3), total_time_26(4)>
  printf ("%llu", iftmp.14_1);
  return;

}



;; Function void hookomp_print_time_results() (_Z26hookomp_print_time_resultsv, funcdef_no=3205, decl_uid=65534, cgraph_uid=3027)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
READONLY = &READONLY
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
stdout = NONLOCAL
stdout.15_3 = stdout
ESCAPED = &READONLY
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = stdout.15_3
seq_stop = NONLOCAL
seq_stop.16_5 = seq_stop
seq_start = NONLOCAL
seq_start.17_6 = seq_start
_75 = seq_stop.16_5
_75 = seq_start.17_6
ESCAPED = &READONLY
ESCAPED = _75
stdout.15_8 = stdout
ESCAPED = &READONLY
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = stdout.15_8
stdout.15_10 = stdout
ESCAPED = &READONLY
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = stdout.15_10
omp_stop = NONLOCAL
omp_stop.18_12 = omp_stop
omp_start = NONLOCAL
omp_start.19_13 = omp_start
_76 = omp_stop.18_12
_76 = omp_start.19_13
ESCAPED = &READONLY
ESCAPED = _76
stdout.15_15 = stdout
ESCAPED = &READONLY
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = stdout.15_15
stdout.15_17 = stdout
ESCAPED = &READONLY
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = stdout.15_17
stdout.15_20 = stdout
ESCAPED = &READONLY
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = stdout.15_20
stdout.15_22 = stdout
ESCAPED = &READONLY
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = stdout.15_22
dev_kernel1_stop = NONLOCAL
dev_kernel1_stop.20_24 = dev_kernel1_stop
dev_kernel1_start = NONLOCAL
dev_kernel1_start.21_25 = dev_kernel1_start
_77 = dev_kernel1_stop.20_24
_77 = dev_kernel1_start.21_25
ESCAPED = &READONLY
ESCAPED = _77
stdout.15_27 = stdout
ESCAPED = &READONLY
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = stdout.15_27
stdout.15_29 = stdout
ESCAPED = &READONLY
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = stdout.15_29
dev_kernel2_stop = NONLOCAL
dev_kernel2_stop.22_31 = dev_kernel2_stop
dev_kernel2_start = NONLOCAL
dev_kernel2_start.23_32 = dev_kernel2_start
_78 = dev_kernel2_stop.22_31
_78 = dev_kernel2_start.23_32
ESCAPED = &READONLY
ESCAPED = _78
stdout.15_34 = stdout
ESCAPED = &READONLY
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = stdout.15_34
stdout.15_36 = stdout
ESCAPED = &READONLY
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = stdout.15_36
dev_kernel3_stop = NONLOCAL
dev_kernel3_stop.24_38 = dev_kernel3_stop
dev_kernel3_start = NONLOCAL
dev_kernel3_start.25_39 = dev_kernel3_start
_79 = dev_kernel3_stop.24_38
_79 = dev_kernel3_start.25_39
ESCAPED = &READONLY
ESCAPED = _79
stdout.15_41 = stdout
ESCAPED = &READONLY
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = stdout.15_41
stdout.15_43 = stdout
ESCAPED = &READONLY
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = stdout.15_43
data_transfer_h2d_stop = NONLOCAL
data_transfer_h2d_stop.26_45 = data_transfer_h2d_stop
data_transfer_h2d_start = NONLOCAL
data_transfer_h2d_start.27_46 = data_transfer_h2d_start
_80 = data_transfer_h2d_stop.26_45
_80 = data_transfer_h2d_start.27_46
ESCAPED = &READONLY
ESCAPED = _80
stdout.15_48 = stdout
ESCAPED = &READONLY
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = stdout.15_48
stdout.15_50 = stdout
ESCAPED = &READONLY
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = stdout.15_50
data_transfer_d2h_stop = NONLOCAL
data_transfer_d2h_stop.28_52 = data_transfer_d2h_stop
data_transfer_d2h_start = NONLOCAL
data_transfer_d2h_start.29_53 = data_transfer_d2h_start
_81 = data_transfer_d2h_stop.28_52
_81 = data_transfer_d2h_start.29_53
ESCAPED = &READONLY
ESCAPED = _81
reach_offload_decision_point = NONLOCAL
reach_offload_decision_point.31_55 = reach_offload_decision_point
iftmp.30_57 = &NONLOCAL
iftmp.30_58 = &NULL
iftmp.30_1 = &NONLOCAL
iftmp.30_1 = &NULL
stdout.15_59 = stdout
ESCAPED = stdout.15_59
ESCAPED = &READONLY
ESCAPED = iftmp.30_1
reach_offload_decision_point.31_61 = reach_offload_decision_point
_62 = reach_offload_decision_point.31_61
stdout.15_63 = stdout
ESCAPED = stdout.15_63
ESCAPED = &READONLY
ESCAPED = _62
decided_by_offloading = NONLOCAL
decided_by_offloading.32_65 = decided_by_offloading
_66 = decided_by_offloading.32_65
stdout.15_67 = stdout
ESCAPED = stdout.15_67
ESCAPED = &READONLY
ESCAPED = _66
made_the_offloading = NONLOCAL
made_the_offloading.33_69 = made_the_offloading
_70 = made_the_offloading.33_69
stdout.15_71 = stdout
ESCAPED = stdout.15_71
ESCAPED = &READONLY
ESCAPED = _70
stdout.15_73 = stdout
ESCAPED = &NONLOCAL
ESCAPED = stdout.15_73

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"READONLY";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"stdout";
"fwrite";
"printf";
"_Z32hookomp_timing_print_without_devv";
"iftmp.30_57";
"iftmp.30_58";
"iftmp.30_1";
"fprintf";
"fputc";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"stdout" -> "ESCAPED";
"iftmp.30_1" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"READONLY";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = stdout\l"];
"STOREDANYTHING";
"INTEGER";
"stdout";
"fwrite";
"printf";
"_Z32hookomp_timing_print_without_devv";
"iftmp.30_57";
"iftmp.30_58";
"iftmp.30_1";
"fprintf";
"fputc";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"stdout" -> "ESCAPED";
"iftmp.30_1" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
READONLY = { READONLY }
ESCAPED = { NULL READONLY ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as stdout
STOREDANYTHING = { }
INTEGER = { ANYTHING }
stdout.15_3 = { ESCAPED NONLOCAL } same as stdout
stdout = { ESCAPED NONLOCAL }
fwrite = { }
seq_stop.16_5 = { ESCAPED NONLOCAL } same as stdout
seq_stop = { ESCAPED NONLOCAL } same as stdout
seq_start.17_6 = { ESCAPED NONLOCAL } same as stdout
seq_start = { ESCAPED NONLOCAL } same as stdout
_75 = { ESCAPED NONLOCAL } same as stdout
printf = { }
stdout.15_8 = { ESCAPED NONLOCAL } same as stdout
stdout.15_10 = { ESCAPED NONLOCAL } same as stdout
omp_stop.18_12 = { ESCAPED NONLOCAL } same as stdout
omp_stop = { ESCAPED NONLOCAL } same as stdout
omp_start.19_13 = { ESCAPED NONLOCAL } same as stdout
omp_start = { ESCAPED NONLOCAL } same as stdout
_76 = { ESCAPED NONLOCAL } same as stdout
stdout.15_15 = { ESCAPED NONLOCAL } same as stdout
stdout.15_17 = { ESCAPED NONLOCAL } same as stdout
_Z32hookomp_timing_print_without_devv = { }
stdout.15_20 = { ESCAPED NONLOCAL } same as stdout
stdout.15_22 = { ESCAPED NONLOCAL } same as stdout
dev_kernel1_stop.20_24 = { ESCAPED NONLOCAL } same as stdout
dev_kernel1_stop = { ESCAPED NONLOCAL } same as stdout
dev_kernel1_start.21_25 = { ESCAPED NONLOCAL } same as stdout
dev_kernel1_start = { ESCAPED NONLOCAL } same as stdout
_77 = { ESCAPED NONLOCAL } same as stdout
stdout.15_27 = { ESCAPED NONLOCAL } same as stdout
stdout.15_29 = { ESCAPED NONLOCAL } same as stdout
dev_kernel2_stop.22_31 = { ESCAPED NONLOCAL } same as stdout
dev_kernel2_stop = { ESCAPED NONLOCAL } same as stdout
dev_kernel2_start.23_32 = { ESCAPED NONLOCAL } same as stdout
dev_kernel2_start = { ESCAPED NONLOCAL } same as stdout
_78 = { ESCAPED NONLOCAL } same as stdout
stdout.15_34 = { ESCAPED NONLOCAL } same as stdout
stdout.15_36 = { ESCAPED NONLOCAL } same as stdout
dev_kernel3_stop.24_38 = { ESCAPED NONLOCAL } same as stdout
dev_kernel3_stop = { ESCAPED NONLOCAL } same as stdout
dev_kernel3_start.25_39 = { ESCAPED NONLOCAL } same as stdout
dev_kernel3_start = { ESCAPED NONLOCAL } same as stdout
_79 = { ESCAPED NONLOCAL } same as stdout
stdout.15_41 = { ESCAPED NONLOCAL } same as stdout
stdout.15_43 = { ESCAPED NONLOCAL } same as stdout
data_transfer_h2d_stop.26_45 = { ESCAPED NONLOCAL } same as stdout
data_transfer_h2d_stop = { ESCAPED NONLOCAL } same as stdout
data_transfer_h2d_start.27_46 = { ESCAPED NONLOCAL } same as stdout
data_transfer_h2d_start = { ESCAPED NONLOCAL } same as stdout
_80 = { ESCAPED NONLOCAL } same as stdout
stdout.15_48 = { ESCAPED NONLOCAL } same as stdout
stdout.15_50 = { ESCAPED NONLOCAL } same as stdout
data_transfer_d2h_stop.28_52 = { ESCAPED NONLOCAL } same as stdout
data_transfer_d2h_stop = { ESCAPED NONLOCAL } same as stdout
data_transfer_d2h_start.29_53 = { ESCAPED NONLOCAL } same as stdout
data_transfer_d2h_start = { ESCAPED NONLOCAL } same as stdout
_81 = { ESCAPED NONLOCAL } same as stdout
reach_offload_decision_point.31_55 = { ESCAPED NONLOCAL } same as stdout
reach_offload_decision_point = { ESCAPED NONLOCAL } same as stdout
iftmp.30_57 = { NONLOCAL }
iftmp.30_58 = { NULL }
iftmp.30_1 = { NULL NONLOCAL }
stdout.15_59 = { ESCAPED NONLOCAL } same as stdout
fprintf = { }
reach_offload_decision_point.31_61 = { ESCAPED NONLOCAL } same as stdout
_62 = { ESCAPED NONLOCAL } same as stdout
stdout.15_63 = { ESCAPED NONLOCAL } same as stdout
decided_by_offloading.32_65 = { ESCAPED NONLOCAL } same as stdout
decided_by_offloading = { ESCAPED NONLOCAL } same as stdout
_66 = { ESCAPED NONLOCAL } same as stdout
stdout.15_67 = { ESCAPED NONLOCAL } same as stdout
made_the_offloading.33_69 = { ESCAPED NONLOCAL } same as stdout
made_the_offloading = { ESCAPED NONLOCAL } same as stdout
_70 = { ESCAPED NONLOCAL } same as stdout
stdout.15_71 = { ESCAPED NONLOCAL } same as stdout
stdout.15_73 = { ESCAPED NONLOCAL } same as stdout
fputc = { }


Alias information for void hookomp_print_time_results()

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { }

Flow-insensitive points-to information

stdout.15_3, points-to non-local, points-to escaped, points-to vars: { }
stdout.15_8, points-to non-local, points-to escaped, points-to vars: { }
stdout.15_10, points-to non-local, points-to escaped, points-to vars: { }
stdout.15_15, points-to non-local, points-to escaped, points-to vars: { }
stdout.15_17, points-to non-local, points-to escaped, points-to vars: { }
stdout.15_20, points-to non-local, points-to escaped, points-to vars: { }
stdout.15_22, points-to non-local, points-to escaped, points-to vars: { }
stdout.15_27, points-to non-local, points-to escaped, points-to vars: { }
stdout.15_29, points-to non-local, points-to escaped, points-to vars: { }
stdout.15_34, points-to non-local, points-to escaped, points-to vars: { }
stdout.15_36, points-to non-local, points-to escaped, points-to vars: { }
stdout.15_41, points-to non-local, points-to escaped, points-to vars: { }
stdout.15_43, points-to non-local, points-to escaped, points-to vars: { }
stdout.15_48, points-to non-local, points-to escaped, points-to vars: { }
stdout.15_50, points-to non-local, points-to escaped, points-to vars: { }
stdout.15_59, points-to non-local, points-to escaped, points-to vars: { }
stdout.15_63, points-to non-local, points-to escaped, points-to vars: { }
stdout.15_67, points-to non-local, points-to escaped, points-to vars: { }
stdout.15_71, points-to non-local, points-to escaped, points-to vars: { }
stdout.15_73, points-to non-local, points-to escaped, points-to vars: { }

void hookomp_print_time_results() ()
{
  bool made_the_offloading.33;
  bool decided_by_offloading.32;
  bool reach_offload_decision_point.31;
  int iftmp.30;
  long unsigned int data_transfer_d2h_start.29;
  long unsigned int data_transfer_d2h_stop.28;
  long unsigned int data_transfer_h2d_start.27;
  long unsigned int data_transfer_h2d_stop.26;
  long unsigned int dev_kernel3_start.25;
  long unsigned int dev_kernel3_stop.24;
  long unsigned int dev_kernel2_start.23;
  long unsigned int dev_kernel2_stop.22;
  long unsigned int dev_kernel1_start.21;
  long unsigned int dev_kernel1_stop.20;
  long unsigned int omp_start.19;
  long unsigned int omp_stop.18;
  long unsigned int seq_start.17;
  long unsigned int seq_stop.16;
  struct _IO_FILE * stdout.15;
  int _62;
  int _66;
  int _70;
  long unsigned int _75;
  long unsigned int _76;
  long unsigned int _77;
  long unsigned int _78;
  long unsigned int _79;
  long unsigned int _80;
  long unsigned int _81;

  <bb 2>:
  stdout.15_3 = stdout;
  __builtin_fwrite ("ORIG = ", 1, 7, stdout.15_3);
  seq_stop.16_5 = seq_stop;
  seq_start.17_6 = seq_start;
  _75 = seq_stop.16_5 - seq_start.17_6;
  printf ("%llu", _75);
  stdout.15_8 = stdout;
  __builtin_fwrite (", ", 1, 2, stdout.15_8);
  stdout.15_10 = stdout;
  __builtin_fwrite ("OMP_OFF = ", 1, 10, stdout.15_10);
  omp_stop.18_12 = omp_stop;
  omp_start.19_13 = omp_start;
  _76 = omp_stop.18_12 - omp_start.19_13;
  printf ("%llu", _76);
  stdout.15_15 = stdout;
  __builtin_fwrite (", ", 1, 2, stdout.15_15);
  stdout.15_17 = stdout;
  __builtin_fwrite ("OMP = ", 1, 6, stdout.15_17);
  hookomp_timing_print_without_dev ();
  stdout.15_20 = stdout;
  __builtin_fwrite (", ", 1, 2, stdout.15_20);
  stdout.15_22 = stdout;
  __builtin_fwrite ("CUDA_KERNEL1 = ", 1, 15, stdout.15_22);
  dev_kernel1_stop.20_24 = dev_kernel1_stop;
  dev_kernel1_start.21_25 = dev_kernel1_start;
  _77 = dev_kernel1_stop.20_24 - dev_kernel1_start.21_25;
  printf ("%llu", _77);
  stdout.15_27 = stdout;
  __builtin_fwrite (", ", 1, 2, stdout.15_27);
  stdout.15_29 = stdout;
  __builtin_fwrite ("CUDA_KERNEL2 = ", 1, 15, stdout.15_29);
  dev_kernel2_stop.22_31 = dev_kernel2_stop;
  dev_kernel2_start.23_32 = dev_kernel2_start;
  _78 = dev_kernel2_stop.22_31 - dev_kernel2_start.23_32;
  printf ("%llu", _78);
  stdout.15_34 = stdout;
  __builtin_fwrite (", ", 1, 2, stdout.15_34);
  stdout.15_36 = stdout;
  __builtin_fwrite ("CUDA_KERNEL3 = ", 1, 15, stdout.15_36);
  dev_kernel3_stop.24_38 = dev_kernel3_stop;
  dev_kernel3_start.25_39 = dev_kernel3_start;
  _79 = dev_kernel3_stop.24_38 - dev_kernel3_start.25_39;
  printf ("%llu", _79);
  stdout.15_41 = stdout;
  __builtin_fwrite (", ", 1, 2, stdout.15_41);
  stdout.15_43 = stdout;
  __builtin_fwrite ("DT_H2D = ", 1, 9, stdout.15_43);
  data_transfer_h2d_stop.26_45 = data_transfer_h2d_stop;
  data_transfer_h2d_start.27_46 = data_transfer_h2d_start;
  _80 = data_transfer_h2d_stop.26_45 - data_transfer_h2d_start.27_46;
  printf ("%llu", _80);
  stdout.15_48 = stdout;
  __builtin_fwrite (", ", 1, 2, stdout.15_48);
  stdout.15_50 = stdout;
  __builtin_fwrite ("DT_D2H = ", 1, 9, stdout.15_50);
  data_transfer_d2h_stop.28_52 = data_transfer_d2h_stop;
  data_transfer_d2h_start.29_53 = data_transfer_d2h_start;
  _81 = data_transfer_d2h_stop.28_52 - data_transfer_d2h_start.29_53;
  printf ("%llu", _81);
  reach_offload_decision_point.31_55 = reach_offload_decision_point;
  if (reach_offload_decision_point.31_55 != 0)
    goto <bb 4>;
  else
    goto <bb 3>;

  <bb 3>:
  iftmp.30_57 = 1;
  goto <bb 5>;

  <bb 4>:
  iftmp.30_58 = 0;

  <bb 5>:
  # iftmp.30_1 = PHI <1(3), 0(4)>
  stdout.15_59 = stdout;
  fprintf (stdout.15_59, ", WORK_FINISHED_BEFORE_OFFLOAD_DECISION = %d", iftmp.30_1);
  reach_offload_decision_point.31_61 = reach_offload_decision_point;
  _62 = (int) reach_offload_decision_point.31_61;
  stdout.15_63 = stdout;
  fprintf (stdout.15_63, ", REACH_OFFLOAD_DECISION_POINT = %d", _62);
  decided_by_offloading.32_65 = decided_by_offloading;
  _66 = (int) decided_by_offloading.32_65;
  stdout.15_67 = stdout;
  fprintf (stdout.15_67, ", DECIDED_BY_OFFLOADING = %d", _66);
  made_the_offloading.33_69 = made_the_offloading;
  _70 = (int) made_the_offloading.33_69;
  stdout.15_71 = stdout;
  fprintf (stdout.15_71, ", MADE_THE_OFFLOADING = %d", _70);
  stdout.15_73 = stdout;
  __builtin_fputc (10, stdout.15_73);
  return;

}



;; Function bool create_target_functions_table(Func****, int, int) (_Z29create_target_functions_tablePPPP4Funcii, funcdef_no=3206, decl_uid=66020, cgraph_uid=3028)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
READONLY = &READONLY
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
table_ = &NONLOCAL
nrows = &NONLOCAL
ncolumns = &NONLOCAL
result_10 = &NONLOCAL
stderr = NONLOCAL
stderr.34_12 = stderr
ESCAPED = &READONLY
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = stderr.34_12
_15 = nrows
_16 = _15
_16 = &NONLOCAL
ESCAPED = _16
table_18 = &HEAP
stderr.34_19 = stderr
ESCAPED = &READONLY
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = stderr.34_19
i_21 = &NULL
_22 = i_4
_23 = _22
_23 = &NONLOCAL
_24 = table_18 + UNKNOWN
_26 = ncolumns
_27 = _26
_27 = &NONLOCAL
ESCAPED = _27
_29 = &HEAP
*_24 = _29
_31 = i_4
_32 = _31
_32 = &NONLOCAL
_33 = table_18 + UNKNOWN
_34 = *_33
j_35 = &NULL
_36 = i_4
_37 = _36
_37 = &NONLOCAL
_38 = table_18 + UNKNOWN
_39 = *_38
_40 = j_5
_41 = _40
_41 = &NONLOCAL
_42 = _39 + UNKNOWN
ESCAPED = &NONLOCAL
_44 = &HEAP
*_42 = _44
_46 = i_4
_47 = _46
_47 = &NONLOCAL
_48 = table_18 + UNKNOWN
_49 = *_48
_50 = j_5
_51 = _50
_51 = &NONLOCAL
_52 = _49 + UNKNOWN
_53 = *_52
derefaddrtmp = &NULL
*_53 = derefaddrtmp
j_55 = j_5
j_55 = &NONLOCAL
j_5 = &NULL
j_5 = j_55
stderr.34_56 = stderr
ESCAPED = &READONLY
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = stderr.34_56
result_58 = &NULL
result_1 = result_2
result_1 = &NULL
i_59 = i_4
i_59 = &NONLOCAL
result_2 = &NONLOCAL
result_2 = result_1
i_4 = &NULL
i_4 = i_59
stderr.34_60 = stderr
ESCAPED = &READONLY
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = stderr.34_60
result_62 = &NULL
result_3 = result_2
result_3 = &NULL
stderr.34_63 = stderr
ESCAPED = &READONLY
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = stderr.34_63
*table_ = table_18
result_67 = result_3
ESCAPED = result_67

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"READONLY";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"table_" [label="\N\n*table_ = table_18\l"];
"stderr";
"fwrite";
"malloc";
"table_18" [label="\N\n_24 = table_18 + UNKNOWN\l_33 = table_18 + UNKNOWN\l_38 = table_18 + UNKNOWN\l_48 = table_18 + UNKNOWN\l"];
"HEAP";
"i_21";
"_22";
"_24" [label="\N\n*_24 = _29\l"];
"_29";
"HEAP";
"_33" [label="\N\n_34 = *_33\l"];
"_34";
"_38" [label="\N\n_39 = *_38\l"];
"_39" [label="\N\n_42 = _39 + UNKNOWN\l"];
"_42" [label="\N\n*_42 = _44\l"];
"_44";
"HEAP";
"_48" [label="\N\n_49 = *_48\l"];
"_49" [label="\N\n_52 = _49 + UNKNOWN\l"];
"_52" [label="\N\n_53 = *_52\l"];
"_53" [label="\N\n*_53 = i_21\l"];

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "HEAP";
"STOREDANYTHING" -> "_24";
"STOREDANYTHING" -> "HEAP";
"STOREDANYTHING" -> "_33";
"STOREDANYTHING" -> "_38";
"STOREDANYTHING" -> "_42";
"STOREDANYTHING" -> "HEAP";
"STOREDANYTHING" -> "_48";
"STOREDANYTHING" -> "_52";
"table_" -> "ESCAPED";
"stderr" -> "ESCAPED";
"_22" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"READONLY";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = stderr\l"];
"STOREDANYTHING";
"INTEGER";
"table_" [label="\N\n*table_ = table_18\l"];
"stderr";
"fwrite";
"malloc";
"table_18" [label="\N\n_24 = table_18 + UNKNOWN\l_33 = table_18 + UNKNOWN\l_38 = table_18 + UNKNOWN\l_48 = table_18 + UNKNOWN\l"];
"HEAP";
"i_21";
"_22";
"_24" [label="\N\n*_24 = _29\l"];
"_29";
"HEAP";
"_33" [label="\N\n_34 = *_33\l"];
"_34";
"_38" [label="\N\n_39 = *_38\l"];
"_39" [label="\N\n_42 = _39 + UNKNOWN\l"];
"_42" [label="\N\n*_42 = _44\l"];
"_44";
"HEAP";
"_48" [label="\N\n_49 = *_48\l"];
"_49" [label="\N\n_52 = _49 + UNKNOWN\l"];
"_52" [label="\N\n_53 = *_52\l"];
"_53" [label="\N\n*_53 = i_21\l"];

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "HEAP";
"STOREDANYTHING" -> "_24";
"STOREDANYTHING" -> "HEAP";
"STOREDANYTHING" -> "_33";
"STOREDANYTHING" -> "_38";
"STOREDANYTHING" -> "_42";
"STOREDANYTHING" -> "HEAP";
"STOREDANYTHING" -> "_48";
"STOREDANYTHING" -> "_52";
"table_" -> "ESCAPED";
"stderr" -> "ESCAPED";
"stderr" -> "HEAP";
"stderr" -> "HEAP";
"stderr" -> "HEAP";
"stderr" -> "_53";
"table_18" -> "ESCAPED";
"HEAP" -> "ESCAPED";
"HEAP" -> "_34";
"HEAP" -> "_39";
"HEAP" -> "_49";
"i_21" -> "ESCAPED";
"i_21" -> "HEAP";
"_22" -> "ESCAPED";
"_29" -> "HEAP";
"HEAP" -> "ESCAPED";
"HEAP" -> "_53";
"_44" -> "ESCAPED";
"_44" -> "HEAP";
"HEAP" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
READONLY = { READONLY }
ESCAPED = { NULL READONLY ESCAPED NONLOCAL HEAP HEAP HEAP }
NONLOCAL = { ESCAPED NONLOCAL } same as stderr
STOREDANYTHING = { }
INTEGER = { ANYTHING }
table_ = { NONLOCAL }
nrows = { NONLOCAL } same as table_
ncolumns = { NONLOCAL } same as table_
result_10 = { NONLOCAL } same as table_
stderr.34_12 = { ESCAPED NONLOCAL } same as stderr
stderr = { ESCAPED NONLOCAL }
fwrite = { }
_15 = { NONLOCAL } same as table_
_16 = { NONLOCAL } same as table_
malloc = { }
table_18 = { HEAP }
HEAP = { ESCAPED NONLOCAL HEAP }
stderr.34_19 = { ESCAPED NONLOCAL } same as stderr
i_21 = { NULL }
_22 = { NULL NONLOCAL }
i_4 = { NULL NONLOCAL } same as _22
_23 = { NULL NONLOCAL } same as _22
_24 = { HEAP }
_26 = { NONLOCAL } same as table_
_27 = { NONLOCAL } same as table_
_29 = { HEAP }
HEAP = { ESCAPED NONLOCAL HEAP }
_31 = { NULL NONLOCAL } same as _22
_32 = { NULL NONLOCAL } same as _22
_33 = { HEAP }
_34 = { ESCAPED NONLOCAL HEAP }
j_35 = { NULL } same as i_21
_36 = { NULL NONLOCAL } same as _22
_37 = { NULL NONLOCAL } same as _22
_38 = { HEAP }
_39 = { ESCAPED NONLOCAL HEAP }
_40 = { NULL NONLOCAL } same as _22
j_5 = { NULL NONLOCAL } same as _22
_41 = { NULL NONLOCAL } same as _22
_42 = { ESCAPED NONLOCAL HEAP }
_44 = { HEAP }
HEAP = { NULL ESCAPED NONLOCAL }
_46 = { NULL NONLOCAL } same as _22
_47 = { NULL NONLOCAL } same as _22
_48 = { HEAP }
_49 = { ESCAPED NONLOCAL HEAP }
_50 = { NULL NONLOCAL } same as _22
_51 = { NULL NONLOCAL } same as _22
_52 = { ESCAPED NONLOCAL HEAP }
_53 = { ESCAPED NONLOCAL HEAP }
derefaddrtmp = { NULL } same as i_21
j_55 = { NULL NONLOCAL } same as _22
stderr.34_56 = { ESCAPED NONLOCAL } same as stderr
result_58 = { NULL } same as i_21
result_1 = { NULL NONLOCAL } same as _22
result_2 = { NULL NONLOCAL } same as _22
i_59 = { NULL NONLOCAL } same as _22
stderr.34_60 = { ESCAPED NONLOCAL } same as stderr
result_62 = { NULL } same as i_21
result_3 = { NULL NONLOCAL } same as _22
stderr.34_63 = { ESCAPED NONLOCAL } same as stderr
result_67 = { NULL NONLOCAL } same as _22


Alias information for bool create_target_functions_table(Func****, int, int)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.67363 D.67364 D.67365 }

Flow-insensitive points-to information

stderr.34_12, points-to non-local, points-to escaped, points-to vars: { }
table_18, points-to vars: { D.67363 } (includes global vars)
stderr.34_19, points-to non-local, points-to escaped, points-to vars: { }
_24, points-to vars: { D.67363 } (includes global vars)
_29, points-to vars: { D.67364 } (includes global vars)
_33, points-to vars: { D.67363 } (includes global vars)
_34, points-to non-local, points-to escaped, points-to vars: { D.67364 } (includes global vars)
_38, points-to vars: { D.67363 } (includes global vars)
_39, points-to non-local, points-to escaped, points-to vars: { D.67364 } (includes global vars)
_42, points-to non-local, points-to escaped, points-to vars: { D.67364 } (includes global vars)
_44, points-to vars: { D.67365 } (includes global vars)
_48, points-to vars: { D.67363 } (includes global vars)
_49, points-to non-local, points-to escaped, points-to vars: { D.67364 } (includes global vars)
_52, points-to non-local, points-to escaped, points-to vars: { D.67364 } (includes global vars)
_53, points-to non-local, points-to escaped, points-to vars: { D.67365 } (includes global vars)
stderr.34_56, points-to non-local, points-to escaped, points-to vars: { }
stderr.34_60, points-to non-local, points-to escaped, points-to vars: { }
stderr.34_63, points-to non-local, points-to escaped, points-to vars: { }
table__65(D), points-to non-local, points-to vars: { }

bool create_target_functions_table(Func****, int, int) (struct Func * * * * table_, int nrows, int ncolumns)
{
  int j;
  int i;
  bool result;
  struct Func * * * table;
  struct _IO_FILE * stderr.34;
  long unsigned int _15;
  long unsigned int _16;
  long unsigned int _22;
  long unsigned int _23;
  struct Func * * * _24;
  long unsigned int _26;
  long unsigned int _27;
  void * _29;
  long unsigned int _31;
  long unsigned int _32;
  struct Func * * * _33;
  struct Func * * _34;
  long unsigned int _36;
  long unsigned int _37;
  struct Func * * * _38;
  struct Func * * _39;
  long unsigned int _40;
  long unsigned int _41;
  struct Func * * _42;
  void * _44;
  long unsigned int _46;
  long unsigned int _47;
  struct Func * * * _48;
  struct Func * * _49;
  long unsigned int _50;
  long unsigned int _51;
  struct Func * * _52;
  struct Func * _53;

  <bb 2>:
  result_10 = 1;
  stderr.34_12 = stderr;
  __builtin_fwrite ("Allocating the rows.\n", 1, 21, stderr.34_12);
  _15 = (long unsigned int) nrows_14(D);
  _16 = _15 * 8;
  table_18 = malloc (_16);
  if (table_18 != 0B)
    goto <bb 3>;
  else
    goto <bb 11>;

  <bb 3>:
  stderr.34_19 = stderr;
  __builtin_fwrite ("Allocating the columns.\n", 1, 24, stderr.34_19);
  i_21 = 0;
  goto <bb 10>;

  <bb 4>:
  _22 = (long unsigned int) i_4;
  _23 = _22 * 8;
  _24 = table_18 + _23;
  _26 = (long unsigned int) ncolumns_25(D);
  _27 = _26 * 8;
  _29 = malloc (_27);
  *_24 = _29;
  _31 = (long unsigned int) i_4;
  _32 = _31 * 8;
  _33 = table_18 + _32;
  _34 = *_33;
  if (_34 != 0B)
    goto <bb 5>;
  else
    goto <bb 8>;

  <bb 5>:
  j_35 = 0;
  goto <bb 7>;

  <bb 6>:
  _36 = (long unsigned int) i_4;
  _37 = _36 * 8;
  _38 = table_18 + _37;
  _39 = *_38;
  _40 = (long unsigned int) j_5;
  _41 = _40 * 8;
  _42 = _39 + _41;
  _44 = malloc (48);
  *_42 = _44;
  _46 = (long unsigned int) i_4;
  _47 = _46 * 8;
  _48 = table_18 + _47;
  _49 = *_48;
  _50 = (long unsigned int) j_5;
  _51 = _50 * 8;
  _52 = _49 + _51;
  _53 = *_52;
  _53->f = 0B;
  j_55 = j_5 + 1;

  <bb 7>:
  # j_5 = PHI <0(5), j_55(6)>
  if (j_5 < ncolumns_25(D))
    goto <bb 6>;
  else
    goto <bb 9>;

  <bb 8>:
  stderr.34_56 = stderr;
  __builtin_fwrite ("Error in table of target functions allocation (columns).\n", 1, 57, stderr.34_56);
  result_58 = 0;

  <bb 9>:
  # result_1 = PHI <result_2(7), 0(8)>
  i_59 = i_4 + 1;

  <bb 10>:
  # result_2 = PHI <1(3), result_1(9)>
  # i_4 = PHI <0(3), i_59(9)>
  if (i_4 < nrows_14(D))
    goto <bb 4>;
  else
    goto <bb 12>;

  <bb 11>:
  stderr.34_60 = stderr;
  __builtin_fwrite ("Error in table of target functions allocation (rows).\n", 1, 54, stderr.34_60);
  result_62 = 0;

  <bb 12>:
  # result_3 = PHI <result_2(10), 0(11)>
  stderr.34_63 = stderr;
  __builtin_fwrite ("Allocating the columns is OK.\n", 1, 30, stderr.34_63);
  *table__65(D) = table_18;
  result_67 = result_3;
  return result_67;

}



;; Function void call_function_ffi_call(Func*) (_Z22call_function_ffi_callP4Func, funcdef_no=3207, decl_uid=66035, cgraph_uid=3029)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
READONLY = &READONLY
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
ff = &NONLOCAL
stderr = NONLOCAL
stderr.35_3 = stderr
ESCAPED = &READONLY
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = stderr.35_3
_6 = *ff + 128
_7 = *ff + 256
_8 = *ff + 64
_9 = _8
ESCAPED = &cif.0+64
ESCAPED = &NONLOCAL
ESCAPED = _9
ESCAPED = _7
ESCAPED = _6
_11 = NONLOCAL
_12 = _11
stderr.35_14 = stderr
ESCAPED = &READONLY
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = stderr.35_14
ESCAPED = &NONLOCAL
_17 = *ff + 192
_18 = *ff + 320
_19 = *ff
_20 = _19
ESCAPED = &cif.0+64
ESCAPED = _20
ESCAPED = _18
ESCAPED = _17

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"READONLY";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"ff" [label="\N\n_6 = *ff + 128\l_7 = *ff + 256\l_8 = *ff + 64\l_17 = *ff + 192\l_18 = *ff + 320\l_19 = *ff\l"];
"stderr";
"fwrite";
"_6";
"_7";
"_8";
"ffi_prep_cif";
"cif.0+64";
"cif.64+64";
"cif.128+64";
"cif.192+64";
"exit";
"_17";
"_18";
"_19";
"ffi_call";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_6";
"STOREDANYTHING" -> "_7";
"STOREDANYTHING" -> "_8";
"STOREDANYTHING" -> "cif.0+64";
"STOREDANYTHING" -> "cif.64+64";
"STOREDANYTHING" -> "cif.128+64";
"STOREDANYTHING" -> "cif.192+64";
"STOREDANYTHING" -> "_17";
"STOREDANYTHING" -> "_18";
"stderr" -> "ESCAPED";
"_6" -> "ESCAPED";
"_7" -> "ESCAPED";
"_8" -> "ESCAPED";
"_17" -> "ESCAPED";
"_18" -> "ESCAPED";
"_19" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"READONLY";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = stderr\l"];
"STOREDANYTHING";
"INTEGER";
"ff" [label="\N\n_6 = *ff + 128\l_7 = *ff + 256\l_8 = *ff + 64\l_17 = *ff + 192\l_18 = *ff + 320\l_19 = *ff\l"];
"stderr";
"fwrite";
"_6";
"_7";
"_8";
"ffi_prep_cif";
"cif.0+64";
"cif.64+64";
"cif.128+64";
"cif.192+64";
"exit";
"_17";
"_18";
"_19";
"ffi_call";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_6";
"STOREDANYTHING" -> "_7";
"STOREDANYTHING" -> "_8";
"STOREDANYTHING" -> "cif.0+64";
"STOREDANYTHING" -> "cif.64+64";
"STOREDANYTHING" -> "cif.128+64";
"STOREDANYTHING" -> "cif.192+64";
"STOREDANYTHING" -> "_17";
"STOREDANYTHING" -> "_18";
"stderr" -> "ESCAPED";
"stderr" -> "_6";
"stderr" -> "_7";
"stderr" -> "_8";
"stderr" -> "cif.0+64";
"stderr" -> "cif.64+64";
"stderr" -> "cif.128+64";
"stderr" -> "cif.192+64";
"stderr" -> "_17";
"stderr" -> "_18";
"stderr" -> "_19";
"_6" -> "ESCAPED";
"_7" -> "ESCAPED";
"_8" -> "ESCAPED";
"cif.0+64" -> "ESCAPED";
"cif.64+64" -> "ESCAPED";
"cif.128+64" -> "ESCAPED";
"cif.192+64" -> "ESCAPED";
"_17" -> "ESCAPED";
"_18" -> "ESCAPED";
"_19" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
READONLY = { READONLY }
ESCAPED = { READONLY ESCAPED NONLOCAL cif.0+64 cif.64+64 cif.128+64 cif.192+64 }
NONLOCAL = { ESCAPED NONLOCAL } same as stderr
STOREDANYTHING = { }
INTEGER = { ANYTHING }
ff = { NONLOCAL }
stderr.35_3 = { ESCAPED NONLOCAL } same as stderr
stderr = { ESCAPED NONLOCAL }
fwrite = { }
_6 = { ESCAPED NONLOCAL }
_7 = { ESCAPED NONLOCAL }
_8 = { ESCAPED NONLOCAL }
_9 = { ESCAPED NONLOCAL } same as _8
ffi_prep_cif = { }
cif.0+64 = { ESCAPED NONLOCAL }
cif.64+64 = { ESCAPED NONLOCAL }
cif.128+64 = { ESCAPED NONLOCAL }
cif.192+64 = { ESCAPED NONLOCAL }
_11 = { ESCAPED NONLOCAL } same as stderr
_12 = { ESCAPED NONLOCAL } same as stderr
stderr.35_14 = { ESCAPED NONLOCAL } same as stderr
exit = { }
_17 = { ESCAPED NONLOCAL }
_18 = { ESCAPED NONLOCAL }
_19 = { ESCAPED NONLOCAL }
_20 = { ESCAPED NONLOCAL } same as _19
ffi_call = { }


Alias information for void call_function_ffi_call(Func*)

Aliased symbols

cif, UID D.66037, struct ffi_cif, is addressable

Call clobber information

ESCAPED, points-to non-local, points-to vars: { D.66037 }

Flow-insensitive points-to information

stderr.35_3, points-to non-local, points-to escaped, points-to vars: { }
ff_5(D), points-to non-local, points-to vars: { }
_6, points-to non-local, points-to escaped, points-to vars: { }
_7, points-to non-local, points-to escaped, points-to vars: { }
stderr.35_14, points-to non-local, points-to escaped, points-to vars: { }
_17, points-to non-local, points-to escaped, points-to vars: { }
_18, points-to non-local, points-to escaped, points-to vars: { }
_19, points-to non-local, points-to escaped, points-to vars: { }
_20, points-to non-local, points-to escaped, points-to vars: { }

void call_function_ffi_call(Func*) (struct Func * ff)
{
  struct ffi_cif cif;
  bool retval.36;
  struct _IO_FILE * stderr.35;
  struct ffi_type * * _6;
  struct ffi_type * _7;
  int _8;
  unsigned int _9;
  ffi_status _11;
  ffi_status _12;
  void * * _17;
  void * _18;
  void * _19;
  void (*<T1993>) (void) _20;

  <bb 2>:
  stderr.35_3 = stderr;
  __builtin_fwrite (" In call_function_ffi_call.\n", 1, 28, stderr.35_3);

  <bb 3>:
  _6 = ff_5(D)->arg_types;
  _7 = ff_5(D)->ret_type;
  _8 = ff_5(D)->nargs;
  _9 = (unsigned int) _8;
  _11 = ffi_prep_cif (&cif, 2, _9, _7, _6);

  <bb 4>:
  _12 = _11;
  if (_12 != 0)
    goto <bb 5>;
  else
    goto <bb 7>;

  <bb 5>:
  stderr.35_14 = stderr;
  __builtin_fwrite ("Error ffi_prep_cif.\n", 1, 20, stderr.35_14);

  <bb 6>:
  exit (1);

  <bb 7>:
  _17 = ff_5(D)->arg_values;
  _18 = ff_5(D)->ret_value;
  _19 = ff_5(D)->f;
  _20 = (void (*<T1993>) (void)) _19;
  ffi_call (&cif, _20, _18, _17);

  <bb 8>:
  cif ={v} {CLOBBER};
  return;

<L2>:
  cif ={v} {CLOBBER};
  resx 1

}



;; Function void init_array(int, int, int, double*, double*, double (*)[4096], double (*)[4096], double (*)[4096]) (_Z10init_arrayiiiPdS_PA4096_dS1_S1_, funcdef_no=3208, decl_uid=66046, cgraph_uid=3030)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
READONLY = &READONLY
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
ni = &NONLOCAL
nj = &NONLOCAL
nk = &NONLOCAL
alpha = &NONLOCAL
beta = &NONLOCAL
A = &NONLOCAL
B = &NONLOCAL
C = &NONLOCAL
derefaddrtmp = &NONLOCAL
*alpha = derefaddrtmp
derefaddrtmp = &NONLOCAL
*beta = derefaddrtmp
i_18 = &NULL
j_20 = &NULL
_22 = i_1
_23 = _22
_23 = &NONLOCAL
_25 = A + UNKNOWN
_26 = i_1
_27 = j_4
_28 = _26
_28 = _27
_29 = _28
_29 = &NONLOCAL
*_25 + UNKNOWN = _29
j_31 = j_4
j_31 = &NONLOCAL
j_4 = &NULL
j_4 = j_31
i_32 = i_1
i_32 = &NONLOCAL
i_1 = &NULL
i_1 = i_32
i_33 = &NULL
j_34 = &NULL
_36 = i_2
_37 = _36
_37 = &NONLOCAL
_39 = B + UNKNOWN
_40 = i_2
_41 = j_5
_42 = _40
_42 = _41
_43 = _42
_43 = &NONLOCAL
*_39 + UNKNOWN = _43
j_45 = j_5
j_45 = &NONLOCAL
j_5 = &NULL
j_5 = j_45
i_46 = i_2
i_46 = &NONLOCAL
i_2 = &NULL
i_2 = i_46
i_47 = &NULL
j_48 = &NULL
_49 = i_3
_50 = _49
_50 = &NONLOCAL
_52 = C + UNKNOWN
_53 = i_3
_54 = j_6
_55 = _53
_55 = _54
_56 = _55
_56 = &NONLOCAL
*_52 + UNKNOWN = _56
j_58 = j_6
j_58 = &NONLOCAL
j_6 = &NULL
j_6 = j_58
i_59 = i_3
i_59 = &NONLOCAL
i_3 = &NULL
i_3 = i_59

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"READONLY";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"ni" [label="\N\n_25 = ni + UNKNOWN\l_39 = ni + UNKNOWN\l_52 = ni + UNKNOWN\l*ni = ni\l"];
"i_18";
"_22";
"_25" [label="\N\n*_25 + UNKNOWN = _22\l"];
"_39" [label="\N\n*_39 + UNKNOWN = _22\l"];
"_52" [label="\N\n*_52 + UNKNOWN = _22\l"];

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_25";
"STOREDANYTHING" -> "_39";
"STOREDANYTHING" -> "_52";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"READONLY";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"ni" [label="\N\n_25 = ni + UNKNOWN\l_39 = ni + UNKNOWN\l_52 = ni + UNKNOWN\l*ni = ni\l"];
"i_18";
"_22";
"_25" [label="\N\n*_25 + UNKNOWN = _22\l"];
"_39" [label="\N\n*_39 + UNKNOWN = _22\l"];
"_52" [label="\N\n*_52 + UNKNOWN = _22\l"];

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_25";
"STOREDANYTHING" -> "_39";
"STOREDANYTHING" -> "_52";
"ni" -> "ESCAPED";
"_22" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
READONLY = { READONLY }
ESCAPED = { NULL ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
ni = { NONLOCAL }
nj = { NONLOCAL } same as ni
nk = { NONLOCAL } same as ni
alpha = { NONLOCAL } same as ni
beta = { NONLOCAL } same as ni
A = { NONLOCAL } same as ni
B = { NONLOCAL } same as ni
C = { NONLOCAL } same as ni
derefaddrtmp = { NONLOCAL } same as ni
derefaddrtmp = { NONLOCAL } same as ni
i_18 = { NULL }
j_20 = { NULL } same as i_18
_22 = { NULL NONLOCAL }
i_1 = { NULL NONLOCAL } same as _22
_23 = { NULL NONLOCAL } same as _22
_25 = { NONLOCAL }
_26 = { NULL NONLOCAL } same as _22
_27 = { NULL NONLOCAL } same as _22
j_4 = { NULL NONLOCAL } same as _22
_28 = { NULL NONLOCAL } same as _22
_29 = { NULL NONLOCAL } same as _22
j_31 = { NULL NONLOCAL } same as _22
i_32 = { NULL NONLOCAL } same as _22
i_33 = { NULL } same as i_18
j_34 = { NULL } same as i_18
_36 = { NULL NONLOCAL } same as _22
i_2 = { NULL NONLOCAL } same as _22
_37 = { NULL NONLOCAL } same as _22
_39 = { NONLOCAL }
_40 = { NULL NONLOCAL } same as _22
_41 = { NULL NONLOCAL } same as _22
j_5 = { NULL NONLOCAL } same as _22
_42 = { NULL NONLOCAL } same as _22
_43 = { NULL NONLOCAL } same as _22
j_45 = { NULL NONLOCAL } same as _22
i_46 = { NULL NONLOCAL } same as _22
i_47 = { NULL } same as i_18
j_48 = { NULL } same as i_18
_49 = { NULL NONLOCAL } same as _22
i_3 = { NULL NONLOCAL } same as _22
_50 = { NULL NONLOCAL } same as _22
_52 = { NONLOCAL }
_53 = { NULL NONLOCAL } same as _22
_54 = { NULL NONLOCAL } same as _22
j_6 = { NULL NONLOCAL } same as _22
_55 = { NULL NONLOCAL } same as _22
_56 = { NULL NONLOCAL } same as _22
j_58 = { NULL NONLOCAL } same as _22
i_59 = { NULL NONLOCAL } same as _22


Alias information for void init_array(int, int, int, double*, double*, double (*)[4096], double (*)[4096], double (*)[4096])

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { }

Flow-insensitive points-to information

alpha_14(D), points-to non-local, points-to vars: { }
beta_16(D), points-to non-local, points-to vars: { }
A_24(D), points-to non-local, points-to vars: { }
_25, points-to non-local, points-to vars: { }
B_38(D), points-to non-local, points-to vars: { }
_39, points-to non-local, points-to vars: { }
C_51(D), points-to non-local, points-to vars: { }
_52, points-to non-local, points-to vars: { }

void init_array(int, int, int, double*, double*, double (*)[4096], double (*)[4096], double (*)[4096]) (int ni, int nj, int nk, double * alpha, double * beta, double[4096] * A, double[4096] * B, double[4096] * C)
{
  int j;
  int i;
  long unsigned int _22;
  long unsigned int _23;
  double[4096] * _25;
  double _26;
  double _27;
  double _28;
  double _29;
  long unsigned int _36;
  long unsigned int _37;
  double[4096] * _39;
  double _40;
  double _41;
  double _42;
  double _43;
  long unsigned int _49;
  long unsigned int _50;
  double[4096] * _52;
  double _53;
  double _54;
  double _55;
  double _56;

  <bb 2>:
  *alpha_14(D) = 3.2412e+4;
  *beta_16(D) = 2.123e+3;
  i_18 = 0;
  goto <bb 7>;

  <bb 3>:
  j_20 = 0;
  goto <bb 5>;

  <bb 4>:
  _22 = (long unsigned int) i_1;
  _23 = _22 * 32768;
  _25 = A_24(D) + _23;
  _26 = (double) i_1;
  _27 = (double) j_4;
  _28 = _26 * _27;
  _29 = _28 * 2.44140625e-4;
  *_25[j_4] = _29;
  j_31 = j_4 + 1;

  <bb 5>:
  # j_4 = PHI <0(3), j_31(4)>
  if (j_4 < nk_21(D))
    goto <bb 4>;
  else
    goto <bb 6>;

  <bb 6>:
  i_32 = i_1 + 1;

  <bb 7>:
  # i_1 = PHI <0(2), i_32(6)>
  if (i_1 < ni_19(D))
    goto <bb 3>;
  else
    goto <bb 8>;

  <bb 8>:
  i_33 = 0;
  goto <bb 13>;

  <bb 9>:
  j_34 = 0;
  goto <bb 11>;

  <bb 10>:
  _36 = (long unsigned int) i_2;
  _37 = _36 * 32768;
  _39 = B_38(D) + _37;
  _40 = (double) i_2;
  _41 = (double) j_5;
  _42 = _40 * _41;
  _43 = _42 * 2.44140625e-4;
  *_39[j_5] = _43;
  j_45 = j_5 + 1;

  <bb 11>:
  # j_5 = PHI <0(9), j_45(10)>
  if (j_5 < nj_35(D))
    goto <bb 10>;
  else
    goto <bb 12>;

  <bb 12>:
  i_46 = i_2 + 1;

  <bb 13>:
  # i_2 = PHI <0(8), i_46(12)>
  if (i_2 < nk_21(D))
    goto <bb 9>;
  else
    goto <bb 14>;

  <bb 14>:
  i_47 = 0;
  goto <bb 19>;

  <bb 15>:
  j_48 = 0;
  goto <bb 17>;

  <bb 16>:
  _49 = (long unsigned int) i_3;
  _50 = _49 * 32768;
  _52 = C_51(D) + _50;
  _53 = (double) i_3;
  _54 = (double) j_6;
  _55 = _53 * _54;
  _56 = _55 * 2.44140625e-4;
  *_52[j_6] = _56;
  j_58 = j_6 + 1;

  <bb 17>:
  # j_6 = PHI <0(15), j_58(16)>
  if (j_6 < nj_35(D))
    goto <bb 16>;
  else
    goto <bb 18>;

  <bb 18>:
  i_59 = i_3 + 1;

  <bb 19>:
  # i_3 = PHI <0(14), i_59(18)>
  if (i_3 < ni_19(D))
    goto <bb 15>;
  else
    goto <bb 20>;

  <bb 20>:
  return;

}



;; Function void copy_array(int, int, double (*)[4096], double (*)[4096]) (_Z10copy_arrayiiPA4096_dS0_, funcdef_no=3209, decl_uid=66078, cgraph_uid=3031)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
READONLY = &READONLY
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
ni = &NONLOCAL
nj = &NONLOCAL
C_source = &NONLOCAL
C_dest = &NONLOCAL
i_5 = &NULL
j_8 = &NULL
_10 = i_1
_11 = _10
_11 = &NONLOCAL
_13 = C_dest + UNKNOWN
_14 = i_1
_15 = _14
_15 = &NONLOCAL
_17 = C_source + UNKNOWN
_18 = *_17 + UNKNOWN
*_13 + UNKNOWN = _18
j_20 = j_2
j_20 = &NONLOCAL
j_2 = &NULL
j_2 = j_20
i_21 = i_1
i_21 = &NONLOCAL
i_1 = &NULL
i_1 = i_21

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"READONLY";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"ni" [label="\N\n_13 = ni + UNKNOWN\l_17 = ni + UNKNOWN\l"];
"i_5";
"_10";
"_13" [label="\N\n*_13 + UNKNOWN = _18\l"];
"_17" [label="\N\n_18 = *_17 + UNKNOWN\l"];
"_18";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_13";
"STOREDANYTHING" -> "_17";
"STOREDANYTHING" -> "_18";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"READONLY";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"ni" [label="\N\n_13 = ni + UNKNOWN\l_17 = ni + UNKNOWN\l"];
"i_5";
"_10";
"_13" [label="\N\n*_13 + UNKNOWN = _18\l"];
"_17" [label="\N\n_18 = *_17 + UNKNOWN\l"];
"_18";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_13";
"STOREDANYTHING" -> "_17";
"STOREDANYTHING" -> "_18";
"_18" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
READONLY = { READONLY }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
ni = { NONLOCAL }
nj = { NONLOCAL } same as ni
C_source = { NONLOCAL } same as ni
C_dest = { NONLOCAL } same as ni
i_5 = { NULL }
j_8 = { NULL } same as i_5
_10 = { NULL NONLOCAL }
i_1 = { NULL NONLOCAL } same as _10
_11 = { NULL NONLOCAL } same as _10
_13 = { NONLOCAL }
_14 = { NULL NONLOCAL } same as _10
_15 = { NULL NONLOCAL } same as _10
_17 = { NONLOCAL }
_18 = { ESCAPED NONLOCAL }
j_20 = { NULL NONLOCAL } same as _10
j_2 = { NULL NONLOCAL } same as _10
i_21 = { NULL NONLOCAL } same as _10


Alias information for void copy_array(int, int, double (*)[4096], double (*)[4096])

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

C_dest_12(D), points-to non-local, points-to vars: { }
_13, points-to non-local, points-to vars: { }
C_source_16(D), points-to non-local, points-to vars: { }
_17, points-to non-local, points-to vars: { }

void copy_array(int, int, double (*)[4096], double (*)[4096]) (int ni, int nj, double[4096] * C_source, double[4096] * C_dest)
{
  int j;
  int i;
  long unsigned int _10;
  long unsigned int _11;
  double[4096] * _13;
  long unsigned int _14;
  long unsigned int _15;
  double[4096] * _17;
  double _18;

  <bb 2>:
  i_5 = 0;
  goto <bb 7>;

  <bb 3>:
  j_8 = 0;
  goto <bb 5>;

  <bb 4>:
  _10 = (long unsigned int) i_1;
  _11 = _10 * 32768;
  _13 = C_dest_12(D) + _11;
  _14 = (long unsigned int) i_1;
  _15 = _14 * 32768;
  _17 = C_source_16(D) + _15;
  _18 = *_17[j_2];
  *_13[j_2] = _18;
  j_20 = j_2 + 1;

  <bb 5>:
  # j_2 = PHI <0(3), j_20(4)>
  if (j_2 < nj_9(D))
    goto <bb 4>;
  else
    goto <bb 6>;

  <bb 6>:
  i_21 = i_1 + 1;

  <bb 7>:
  # i_1 = PHI <0(2), i_21(6)>
  if (i_1 < ni_7(D))
    goto <bb 3>;
  else
    goto <bb 8>;

  <bb 8>:
  return;

}



;; Function void compareResults(int, int, double (*)[4096], double (*)[4096]) (_Z14compareResultsiiPA4096_dS0_, funcdef_no=3210, decl_uid=66094, cgraph_uid=3032)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
READONLY = &READONLY
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
ni = &NONLOCAL
nj = &NONLOCAL
C = &NONLOCAL
C_output = &NONLOCAL
fail_6 = &NULL
i_7 = &NULL
j_9 = &NULL
_11 = i_1
_12 = _11
_12 = &NONLOCAL
_14 = C_output + UNKNOWN
_16 = *_14 + UNKNOWN
_17 = i_1
_18 = _17
_18 = &NONLOCAL
_20 = C + UNKNOWN
_21 = *_20 + UNKNOWN
_22 = _21
_22 = _16
_22 = &NONLOCAL
_23 = _22
fail_25 = fail_4
fail_25 = &NONLOCAL
fail_3 = fail_4
fail_3 = fail_25
j_26 = j_2
j_26 = &NONLOCAL
j_2 = &NULL
j_2 = j_26
fail_4 = fail_5
fail_4 = fail_3
i_27 = i_1
i_27 = &NONLOCAL
i_1 = &NULL
i_1 = i_27
fail_5 = &NULL
fail_5 = fail_4
stderr = NONLOCAL
stderr.38_28 = stderr
ESCAPED = stderr.38_28
ESCAPED = &READONLY
ESCAPED = &NONLOCAL
ESCAPED = fail_5

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"READONLY";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"ni" [label="\N\n_14 = ni + UNKNOWN\l_20 = ni + UNKNOWN\l"];
"fail_6";
"_11";
"_14" [label="\N\n_16 = *_14 + UNKNOWN\l"];
"_16";
"_20" [label="\N\n_21 = *_20 + UNKNOWN\l"];
"_21";
"_Z11percentDiffdd";
"_22";
"stderr";
"fprintf";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_14";
"STOREDANYTHING" -> "_16";
"STOREDANYTHING" -> "_20";
"STOREDANYTHING" -> "_21";
"_11" -> "ESCAPED";
"_16" -> "_22";
"_21" -> "_22";
"stderr" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"READONLY";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = stderr\l"];
"STOREDANYTHING";
"INTEGER";
"ni" [label="\N\n_14 = ni + UNKNOWN\l_20 = ni + UNKNOWN\l"];
"fail_6";
"_11";
"_14" [label="\N\n_16 = *_14 + UNKNOWN\l"];
"_16";
"_20" [label="\N\n_21 = *_20 + UNKNOWN\l"];
"_21";
"_Z11percentDiffdd";
"_22";
"stderr";
"fprintf";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_14";
"STOREDANYTHING" -> "_16";
"STOREDANYTHING" -> "_20";
"STOREDANYTHING" -> "_21";
"_11" -> "ESCAPED";
"_16" -> "_22";
"_21" -> "_22";
"stderr" -> "ESCAPED";
"stderr" -> "_16";
"stderr" -> "_21";
}



Points-to sets

ANYTHING = { ANYTHING }
READONLY = { READONLY }
ESCAPED = { NULL READONLY ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as stderr
STOREDANYTHING = { }
INTEGER = { ANYTHING }
ni = { NONLOCAL }
nj = { NONLOCAL } same as ni
C = { NONLOCAL } same as ni
C_output = { NONLOCAL } same as ni
fail_6 = { NULL }
i_7 = { NULL } same as fail_6
j_9 = { NULL } same as fail_6
_11 = { NULL NONLOCAL }
i_1 = { NULL NONLOCAL } same as _11
_12 = { NULL NONLOCAL } same as _11
_14 = { NONLOCAL }
_16 = { ESCAPED NONLOCAL }
_17 = { NULL NONLOCAL } same as _11
_18 = { NULL NONLOCAL } same as _11
_20 = { NONLOCAL }
_21 = { ESCAPED NONLOCAL }
_Z11percentDiffdd = { }
_22 = { ESCAPED NONLOCAL }
_23 = { ESCAPED NONLOCAL } same as _22
fail_25 = { NULL NONLOCAL } same as _11
fail_4 = { NULL NONLOCAL } same as _11
fail_3 = { NULL NONLOCAL } same as _11
j_26 = { NULL NONLOCAL } same as _11
j_2 = { NULL NONLOCAL } same as _11
fail_5 = { NULL NONLOCAL } same as _11
i_27 = { NULL NONLOCAL } same as _11
stderr.38_28 = { ESCAPED NONLOCAL } same as stderr
stderr = { ESCAPED NONLOCAL }
fprintf = { }


Alias information for void compareResults(int, int, double (*)[4096], double (*)[4096])

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { }

Flow-insensitive points-to information

C_output_13(D), points-to non-local, points-to vars: { }
_14, points-to non-local, points-to vars: { }
C_19(D), points-to non-local, points-to vars: { }
_20, points-to non-local, points-to vars: { }
stderr.38_28, points-to non-local, points-to escaped, points-to vars: { }

void compareResults(int, int, double (*)[4096], double (*)[4096]) (int ni, int nj, double[4096] * C, double[4096] * C_output)
{
  int fail;
  int j;
  int i;
  struct _IO_FILE * stderr.38;
  bool retval.37;
  long unsigned int _11;
  long unsigned int _12;
  double[4096] * _14;
  double _16;
  long unsigned int _17;
  long unsigned int _18;
  double[4096] * _20;
  double _21;
  float _22;
  double _23;

  <bb 2>:
  fail_6 = 0;
  i_7 = 0;
  goto <bb 9>;

  <bb 3>:
  j_9 = 0;
  goto <bb 7>;

  <bb 4>:
  _11 = (long unsigned int) i_1;
  _12 = _11 * 32768;
  _14 = C_output_13(D) + _12;
  _16 = *_14[j_2];
  _17 = (long unsigned int) i_1;
  _18 = _17 * 32768;
  _20 = C_19(D) + _18;
  _21 = *_20[j_2];
  _22 = percentDiff (_21, _16);
  _23 = (double) _22;
  if (_23 > 5.000000000000000277555756156289135105907917022705078125e-2)
    goto <bb 5>;
  else
    goto <bb 6>;

  <bb 5>:
  fail_25 = fail_4 + 1;

  <bb 6>:
  # fail_3 = PHI <fail_4(4), fail_25(5)>
  j_26 = j_2 + 1;

  <bb 7>:
  # j_2 = PHI <0(3), j_26(6)>
  # fail_4 = PHI <fail_5(3), fail_3(6)>
  if (j_2 < nj_10(D))
    goto <bb 4>;
  else
    goto <bb 8>;

  <bb 8>:
  i_27 = i_1 + 1;

  <bb 9>:
  # i_1 = PHI <0(2), i_27(8)>
  # fail_5 = PHI <0(2), fail_4(8)>
  if (i_1 < ni_8(D))
    goto <bb 3>;
  else
    goto <bb 10>;

  <bb 10>:
  stderr.38_28 = stderr;
  fprintf (stderr.38_28, "Non-Matching CPU-GPU Outputs Beyond Error Threshold of %4.2f Percent: %d\n", 5.000000000000000277555756156289135105907917022705078125e-2, fail_5);
  return;

}



;; Function void gemm(int, int, int, double, double, double (*)[4096], double (*)[4096], double (*)[4096]) (_Z4gemmiiiddPA4096_dS0_S0_, funcdef_no=3212, decl_uid=66130, cgraph_uid=3034)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
READONLY = &READONLY
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
ni = &NONLOCAL
nj = &NONLOCAL
nk = &NONLOCAL
alpha = &NONLOCAL
beta = &NONLOCAL
A = &NONLOCAL
B = &NONLOCAL
C = &NONLOCAL
i_7 = &NULL
j_10 = &NULL
_16 = i_1
_17 = _16
_17 = &NONLOCAL
_18 = C + UNKNOWN
_19 = *_18 + UNKNOWN
_21 = _19
_21 = beta
*_18 + UNKNOWN = _21
k_23 = &NULL
_28 = i_1
_29 = _28
_29 = &NONLOCAL
_30 = C + UNKNOWN
_31 = *_30 + UNKNOWN
_32 = i_1
_33 = _32
_33 = &NONLOCAL
_35 = A + UNKNOWN
_36 = *_35 + UNKNOWN
_38 = _36
_38 = alpha
_39 = k_3
_40 = _39
_40 = &NONLOCAL
_42 = B + UNKNOWN
_43 = *_42 + UNKNOWN
_44 = _38
_44 = _43
_45 = _31
_45 = _44
*_30 + UNKNOWN = _45
k_47 = k_3
k_47 = &NONLOCAL
k_3 = &NULL
k_3 = k_47
j_48 = j_2
j_48 = &NONLOCAL
j_2 = &NULL
j_2 = j_48
i_49 = i_1
i_49 = &NONLOCAL
i_1 = &NULL
i_1 = i_49

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"READONLY";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"ni" [label="\N\n_18 = ni + UNKNOWN\l_30 = ni + UNKNOWN\l_35 = ni + UNKNOWN\l_42 = ni + UNKNOWN\l"];
"i_7";
"_16";
"_18" [label="\N\n_19 = *_18 + UNKNOWN\l*_18 + UNKNOWN = _21\l"];
"_19";
"_21";
"_30" [label="\N\n_31 = *_30 + UNKNOWN\l*_30 + UNKNOWN = _45\l"];
"_31";
"_35" [label="\N\n_36 = *_35 + UNKNOWN\l"];
"_36";
"_38";
"_42" [label="\N\n_43 = *_42 + UNKNOWN\l"];
"_43";
"_44";
"_45";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_18";
"STOREDANYTHING" -> "_19";
"STOREDANYTHING" -> "_30";
"STOREDANYTHING" -> "_31";
"STOREDANYTHING" -> "_35";
"STOREDANYTHING" -> "_36";
"STOREDANYTHING" -> "_42";
"STOREDANYTHING" -> "_43";
"ni" -> "_21";
"ni" -> "_38";
"_19" -> "_21";
"_31" -> "_45";
"_36" -> "_38";
"_38" -> "_44";
"_43" -> "_44";
"_44" -> "_45";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"READONLY";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"ni" [label="\N\n_18 = ni + UNKNOWN\l_30 = ni + UNKNOWN\l_35 = ni + UNKNOWN\l_42 = ni + UNKNOWN\l"];
"i_7";
"_16";
"_18" [label="\N\n_19 = *_18 + UNKNOWN\l*_18 + UNKNOWN = _21\l"];
"_19";
"_21";
"_30" [label="\N\n_31 = *_30 + UNKNOWN\l*_30 + UNKNOWN = _45\l"];
"_31";
"_35" [label="\N\n_36 = *_35 + UNKNOWN\l"];
"_36";
"_38";
"_42" [label="\N\n_43 = *_42 + UNKNOWN\l"];
"_43";
"_44";
"_45";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_18";
"STOREDANYTHING" -> "_19";
"STOREDANYTHING" -> "_30";
"STOREDANYTHING" -> "_31";
"STOREDANYTHING" -> "_35";
"STOREDANYTHING" -> "_36";
"STOREDANYTHING" -> "_42";
"STOREDANYTHING" -> "_43";
"ni" -> "_21";
"ni" -> "_38";
"_19" -> "_21";
"_21" -> "ESCAPED";
"_31" -> "_45";
"_36" -> "_38";
"_38" -> "_44";
"_43" -> "_44";
"_44" -> "_45";
"_45" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
READONLY = { READONLY }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
ni = { NONLOCAL }
nj = { NONLOCAL } same as ni
nk = { NONLOCAL } same as ni
alpha = { NONLOCAL } same as ni
beta = { NONLOCAL } same as ni
A = { NONLOCAL } same as ni
B = { NONLOCAL } same as ni
C = { NONLOCAL } same as ni
i_7 = { NULL }
j_10 = { NULL } same as i_7
_16 = { NULL NONLOCAL }
i_1 = { NULL NONLOCAL } same as _16
_17 = { NULL NONLOCAL } same as _16
_18 = { NONLOCAL }
_19 = { ESCAPED NONLOCAL }
_21 = { ESCAPED NONLOCAL }
k_23 = { NULL } same as i_7
_28 = { NULL NONLOCAL } same as _16
_29 = { NULL NONLOCAL } same as _16
_30 = { NONLOCAL }
_31 = { ESCAPED NONLOCAL }
_32 = { NULL NONLOCAL } same as _16
_33 = { NULL NONLOCAL } same as _16
_35 = { NONLOCAL }
_36 = { ESCAPED NONLOCAL }
_38 = { ESCAPED NONLOCAL }
_39 = { NULL NONLOCAL } same as _16
k_3 = { NULL NONLOCAL } same as _16
_40 = { NULL NONLOCAL } same as _16
_42 = { NONLOCAL }
_43 = { ESCAPED NONLOCAL }
_44 = { ESCAPED NONLOCAL }
_45 = { ESCAPED NONLOCAL }
k_47 = { NULL NONLOCAL } same as _16
j_48 = { NULL NONLOCAL } same as _16
j_2 = { NULL NONLOCAL } same as _16
i_49 = { NULL NONLOCAL } same as _16


Alias information for void gemm(int, int, int, double, double, double (*)[4096], double (*)[4096], double (*)[4096])

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

C_14(D), points-to non-local, points-to vars: { }
_18, points-to non-local, points-to vars: { }
_30, points-to non-local, points-to vars: { }
A_34(D), points-to non-local, points-to vars: { }
_35, points-to non-local, points-to vars: { }
B_41(D), points-to non-local, points-to vars: { }
_42, points-to non-local, points-to vars: { }

void gemm(int, int, int, double, double, double (*)[4096], double (*)[4096], double (*)[4096]) (int ni, int nj, int nk, double alpha, double beta, double[4096] * A, double[4096] * B, double[4096] * C)
{
  int k;
  int j;
  int i;
  long unsigned int _16;
  long unsigned int _17;
  double[4096] * _18;
  double _19;
  double _21;
  long unsigned int _28;
  long unsigned int _29;
  double[4096] * _30;
  double _31;
  long unsigned int _32;
  long unsigned int _33;
  double[4096] * _35;
  double _36;
  double _38;
  long unsigned int _39;
  long unsigned int _40;
  double[4096] * _42;
  double _43;
  double _44;
  double _45;

  <bb 2>:
  i_7 = 0;
  goto <bb 10>;

  <bb 3>:
  j_10 = 0;
  goto <bb 8>;

  <bb 4>:
  _16 = (long unsigned int) i_1;
  _17 = _16 * 32768;
  _18 = C_14(D) + _17;
  _19 = *_18[j_2];
  _21 = _19 * beta_20(D);
  *_18[j_2] = _21;
  k_23 = 0;
  goto <bb 6>;

  <bb 5>:
  _28 = (long unsigned int) i_1;
  _29 = _28 * 32768;
  _30 = C_14(D) + _29;
  _31 = *_30[j_2];
  _32 = (long unsigned int) i_1;
  _33 = _32 * 32768;
  _35 = A_34(D) + _33;
  _36 = *_35[k_3];
  _38 = _36 * alpha_37(D);
  _39 = (long unsigned int) k_3;
  _40 = _39 * 32768;
  _42 = B_41(D) + _40;
  _43 = *_42[j_2];
  _44 = _38 * _43;
  _45 = _31 + _44;
  *_30[j_2] = _45;
  k_47 = k_3 + 1;

  <bb 6>:
  # k_3 = PHI <0(4), k_47(5)>
  if (k_3 < nk_24(D))
    goto <bb 5>;
  else
    goto <bb 7>;

  <bb 7>:
  j_48 = j_2 + 1;

  <bb 8>:
  # j_2 = PHI <0(3), j_48(7)>
  if (j_2 < nj_11(D))
    goto <bb 4>;
  else
    goto <bb 9>;

  <bb 9>:
  i_49 = i_1 + 1;

  <bb 10>:
  # i_1 = PHI <0(2), i_49(9)>
  if (i_1 < ni_9(D))
    goto <bb 3>;
  else
    goto <bb 11>;

  <bb 11>:
  return;

}



;; Function void gemm_original(int, int, int, double, double, double (*)[4096], double (*)[4096], double (*)[4096]) (_Z13gemm_originaliiiddPA4096_dS0_S0_, funcdef_no=3213, decl_uid=66155, cgraph_uid=3035)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
READONLY = &READONLY
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
ni = &NONLOCAL
nj = &NONLOCAL
nk = &NONLOCAL
alpha = &NONLOCAL
beta = &NONLOCAL
A = &NONLOCAL
B = &NONLOCAL
C = &NONLOCAL
seq_start = NONLOCAL
ESCAPED = &seq_start
ESCAPED = ni
ESCAPED = nj
ESCAPED = nk
ESCAPED = alpha
ESCAPED = beta
ESCAPED = A
ESCAPED = B
ESCAPED = C
seq_stop = NONLOCAL
ESCAPED = &seq_stop

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"READONLY";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"ni";
"_Z20hookomp_timing_startPm";
"seq_start";
"_Z4gemmiiiddPA4096_dS0_S0_";
"_Z19hookomp_timing_stopPm";
"seq_stop";

  // Edges in the constraint graph:
"NONLOCAL" -> "seq_start";
"NONLOCAL" -> "seq_stop";
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "seq_start";
"STOREDANYTHING" -> "seq_stop";
"ni" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"READONLY";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"ni";
"_Z20hookomp_timing_startPm";
"seq_start";
"_Z4gemmiiiddPA4096_dS0_S0_";
"_Z19hookomp_timing_stopPm";
"seq_stop";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"NONLOCAL" -> "seq_start";
"NONLOCAL" -> "seq_stop";
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "seq_start";
"STOREDANYTHING" -> "seq_stop";
"ni" -> "ESCAPED";
"seq_start" -> "ESCAPED";
"seq_stop" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
READONLY = { READONLY }
ESCAPED = { ESCAPED NONLOCAL seq_start seq_stop }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
ni = { NONLOCAL }
nj = { NONLOCAL } same as ni
nk = { NONLOCAL } same as ni
alpha = { NONLOCAL } same as ni
beta = { NONLOCAL } same as ni
A = { NONLOCAL } same as ni
B = { NONLOCAL } same as ni
C = { NONLOCAL } same as ni
_Z20hookomp_timing_startPm = { }
seq_start = { ESCAPED NONLOCAL }
_Z4gemmiiiddPA4096_dS0_S0_ = { }
_Z19hookomp_timing_stopPm = { }
seq_stop = { ESCAPED NONLOCAL }


Alias information for void gemm_original(int, int, int, double, double, double (*)[4096], double (*)[4096], double (*)[4096])

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { D.65499 D.65500 } (includes global vars)

Flow-insensitive points-to information

A_8(D), points-to non-local, points-to vars: { }
B_9(D), points-to non-local, points-to vars: { }
C_10(D), points-to non-local, points-to vars: { }

void gemm_original(int, int, int, double, double, double (*)[4096], double (*)[4096], double (*)[4096]) (int ni, int nj, int nk, double alpha, double beta, double[4096] * A, double[4096] * B, double[4096] * C)
{
  <bb 2>:
  hookomp_timing_start (&seq_start);
  gemm (ni_3(D), nj_4(D), nk_5(D), alpha_6(D), beta_7(D), A_8(D), B_9(D), C_10(D));
  hookomp_timing_stop (&seq_stop);
  return;

}



;; Function void gemm_omp_kernel(int, int, int, double, double, double (*)[4096], double (*)[4096], double (*)[4096]) (_Z15gemm_omp_kerneliiiddPA4096_dS0_S0_, funcdef_no=3214, decl_uid=66165, cgraph_uid=3036)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
READONLY = &READONLY
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
ni = &NONLOCAL
nj = &NONLOCAL
nk = &NONLOCAL
alpha = &NONLOCAL
beta = &NONLOCAL
A = &NONLOCAL
B = &NONLOCAL
C = &NONLOCAL
.omp_data_o.42.0+128 = alpha
.omp_data_o.42.0+128 = beta
.omp_data_o.42.128+64 = A
.omp_data_o.42.192+64 = B
.omp_data_o.42.256+64 = C
.omp_data_o.42.320+96 = ni
.omp_data_o.42.320+96 = nj
.omp_data_o.42.320+96 = nk
ESCAPED = &_Z15gemm_omp_kerneliiiddPA4096_dS0_S0_._omp_fn.0
ESCAPED = &.omp_data_o.42.0+128
ESCAPED = &NONLOCAL
ESCAPED = &.omp_data_o.42.0+128

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"READONLY";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"ni";
".omp_data_o.42.0+128";
".omp_data_o.42.128+64";
".omp_data_o.42.192+64";
".omp_data_o.42.256+64";
".omp_data_o.42.320+96";
"GOMP_parallel_start";
"_Z15gemm_omp_kerneliiiddPA4096_dS0_S0_._omp_fn.0";
"GOMP_parallel_end";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> ".omp_data_o.42.0+128";
"STOREDANYTHING" -> ".omp_data_o.42.128+64";
"STOREDANYTHING" -> ".omp_data_o.42.192+64";
"STOREDANYTHING" -> ".omp_data_o.42.256+64";
"STOREDANYTHING" -> ".omp_data_o.42.320+96";
"STOREDANYTHING" -> "_Z15gemm_omp_kerneliiiddPA4096_dS0_S0_._omp_fn.0";
"ni" -> ".omp_data_o.42.0+128";
"ni" -> ".omp_data_o.42.128+64";
"ni" -> ".omp_data_o.42.192+64";
"ni" -> ".omp_data_o.42.256+64";
"ni" -> ".omp_data_o.42.320+96";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"READONLY";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"ni";
".omp_data_o.42.0+128";
".omp_data_o.42.128+64";
".omp_data_o.42.192+64";
".omp_data_o.42.256+64";
".omp_data_o.42.320+96";
"GOMP_parallel_start";
"_Z15gemm_omp_kerneliiiddPA4096_dS0_S0_._omp_fn.0";
"GOMP_parallel_end";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"NONLOCAL" -> ".omp_data_o.42.0+128";
"NONLOCAL" -> ".omp_data_o.42.128+64";
"NONLOCAL" -> ".omp_data_o.42.192+64";
"NONLOCAL" -> ".omp_data_o.42.256+64";
"NONLOCAL" -> ".omp_data_o.42.320+96";
"NONLOCAL" -> "_Z15gemm_omp_kerneliiiddPA4096_dS0_S0_._omp_fn.0";
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> ".omp_data_o.42.0+128";
"STOREDANYTHING" -> ".omp_data_o.42.128+64";
"STOREDANYTHING" -> ".omp_data_o.42.192+64";
"STOREDANYTHING" -> ".omp_data_o.42.256+64";
"STOREDANYTHING" -> ".omp_data_o.42.320+96";
"STOREDANYTHING" -> "_Z15gemm_omp_kerneliiiddPA4096_dS0_S0_._omp_fn.0";
"ni" -> ".omp_data_o.42.0+128";
"ni" -> ".omp_data_o.42.128+64";
"ni" -> ".omp_data_o.42.192+64";
"ni" -> ".omp_data_o.42.256+64";
"ni" -> ".omp_data_o.42.320+96";
".omp_data_o.42.0+128" -> "ESCAPED";
".omp_data_o.42.128+64" -> "ESCAPED";
".omp_data_o.42.192+64" -> "ESCAPED";
".omp_data_o.42.256+64" -> "ESCAPED";
".omp_data_o.42.320+96" -> "ESCAPED";
"_Z15gemm_omp_kerneliiiddPA4096_dS0_S0_._omp_fn.0" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
READONLY = { READONLY }
ESCAPED = { ESCAPED NONLOCAL .omp_data_o.42.0+128 .omp_data_o.42.128+64 .omp_data_o.42.192+64 .omp_data_o.42.256+64 .omp_data_o.42.320+96 _Z15gemm_omp_kerneliiiddPA4096_dS0_S0_._omp_fn.0 }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
ni = { NONLOCAL }
nj = { NONLOCAL } same as ni
nk = { NONLOCAL } same as ni
alpha = { NONLOCAL } same as ni
beta = { NONLOCAL } same as ni
A = { NONLOCAL } same as ni
B = { NONLOCAL } same as ni
C = { NONLOCAL } same as ni
.omp_data_o.42.0+128 = { ESCAPED NONLOCAL }
.omp_data_o.42.128+64 = { ESCAPED NONLOCAL }
.omp_data_o.42.192+64 = { ESCAPED NONLOCAL }
.omp_data_o.42.256+64 = { ESCAPED NONLOCAL }
.omp_data_o.42.320+96 = { ESCAPED NONLOCAL }
GOMP_parallel_start = { }
_Z15gemm_omp_kerneliiiddPA4096_dS0_S0_._omp_fn.0 = { ESCAPED NONLOCAL }
GOMP_parallel_end = { }


Alias information for void gemm_omp_kernel(int, int, int, double, double, double (*)[4096], double (*)[4096], double (*)[4096])

Aliased symbols

.omp_data_o.42, UID D.67093, struct .omp_data_s.41, is addressable

Call clobber information

ESCAPED, points-to non-local, points-to vars: { D.67093 }

Flow-insensitive points-to information

A_6(D), points-to non-local, points-to vars: { }
B_8(D), points-to non-local, points-to vars: { }
C_10(D), points-to non-local, points-to vars: { }

void gemm_omp_kernel(int, int, int, double, double, double (*)[4096], double (*)[4096], double (*)[4096]) (int ni, int nj, int nk, double alpha, double beta, double[4096] * A, double[4096] * B, double[4096] * C)
{
  struct .omp_data_s.41 .omp_data_o.42;

  <bb 2>:
  .omp_data_o.42.alpha = alpha_2(D);
  .omp_data_o.42.beta = beta_4(D);
  .omp_data_o.42.A = A_6(D);
  .omp_data_o.42.B = B_8(D);
  .omp_data_o.42.C = C_10(D);
  .omp_data_o.42.ni = ni_12(D);
  .omp_data_o.42.nj = nj_14(D);
  .omp_data_o.42.nk = nk_16(D);
  __builtin_GOMP_parallel_start (_Z15gemm_omp_kerneliiiddPA4096_dS0_S0_._omp_fn.0, &.omp_data_o.42, 8);
  _Z15gemm_omp_kerneliiiddPA4096_dS0_S0_._omp_fn.0 (&.omp_data_o.42);
  __builtin_GOMP_parallel_end ();
  return;

}



;; Function void gemm_omp(int, int, int, double, double, double (*)[4096], double (*)[4096], double (*)[4096]) (_Z8gemm_ompiiiddPA4096_dS0_S0_, funcdef_no=3215, decl_uid=66187, cgraph_uid=3037)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
READONLY = &READONLY
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
ni = &NONLOCAL
nj = &NONLOCAL
nk = &NONLOCAL
alpha = &NONLOCAL
beta = &NONLOCAL
A = &NONLOCAL
B = &NONLOCAL
C_outputFromOMP = &NONLOCAL
omp_start = NONLOCAL
ESCAPED = &omp_start
ESCAPED = ni
ESCAPED = nj
ESCAPED = nk
ESCAPED = alpha
ESCAPED = beta
ESCAPED = A
ESCAPED = B
ESCAPED = C_outputFromOMP
omp_stop = NONLOCAL
ESCAPED = &omp_stop

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"READONLY";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"ni";
"_Z20hookomp_timing_startPm";
"omp_start";
"_Z15gemm_omp_kerneliiiddPA4096_dS0_S0_";
"_Z19hookomp_timing_stopPm";
"omp_stop";

  // Edges in the constraint graph:
"NONLOCAL" -> "omp_start";
"NONLOCAL" -> "omp_stop";
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "omp_start";
"STOREDANYTHING" -> "omp_stop";
"ni" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"READONLY";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"ni";
"_Z20hookomp_timing_startPm";
"omp_start";
"_Z15gemm_omp_kerneliiiddPA4096_dS0_S0_";
"_Z19hookomp_timing_stopPm";
"omp_stop";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"NONLOCAL" -> "omp_start";
"NONLOCAL" -> "omp_stop";
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "omp_start";
"STOREDANYTHING" -> "omp_stop";
"ni" -> "ESCAPED";
"omp_start" -> "ESCAPED";
"omp_stop" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
READONLY = { READONLY }
ESCAPED = { ESCAPED NONLOCAL omp_start omp_stop }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
ni = { NONLOCAL }
nj = { NONLOCAL } same as ni
nk = { NONLOCAL } same as ni
alpha = { NONLOCAL } same as ni
beta = { NONLOCAL } same as ni
A = { NONLOCAL } same as ni
B = { NONLOCAL } same as ni
C_outputFromOMP = { NONLOCAL } same as ni
_Z20hookomp_timing_startPm = { }
omp_start = { ESCAPED NONLOCAL }
_Z15gemm_omp_kerneliiiddPA4096_dS0_S0_ = { }
_Z19hookomp_timing_stopPm = { }
omp_stop = { ESCAPED NONLOCAL }


Alias information for void gemm_omp(int, int, int, double, double, double (*)[4096], double (*)[4096], double (*)[4096])

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { D.65501 D.65502 } (includes global vars)

Flow-insensitive points-to information

A_8(D), points-to non-local, points-to vars: { }
B_9(D), points-to non-local, points-to vars: { }
C_outputFromOMP_10(D), points-to non-local, points-to vars: { }

void gemm_omp(int, int, int, double, double, double (*)[4096], double (*)[4096], double (*)[4096]) (int ni, int nj, int nk, double alpha, double beta, double[4096] * A, double[4096] * B, double[4096] * C_outputFromOMP)
{
  <bb 2>:
  hookomp_timing_start (&omp_start);
  gemm_omp_kernel (ni_3(D), nj_4(D), nk_5(D), alpha_6(D), beta_7(D), A_8(D), B_9(D), C_outputFromOMP_10(D));
  hookomp_timing_stop (&omp_stop);
  return;

}



;; Function void GPU_argv_init() (_Z13GPU_argv_initv, funcdef_no=3216, decl_uid=66189, cgraph_uid=3038)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
READONLY = &READONLY
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
stderr = NONLOCAL
stderr.43_3 = stderr
ESCAPED = &READONLY
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = stderr.43_3
ESCAPED = &deviceProp.0+4832
ESCAPED = &NULL
stderr.43_6 = stderr
ESCAPED = stderr.43_6
ESCAPED = &READONLY
ESCAPED = &NULL
ESCAPED = &deviceProp.0+4832
ESCAPED = &NULL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"READONLY";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"stderr";
"fwrite";
"cudaGetDeviceProperties";
"deviceProp.0+4832";
"deviceProp.4864+192";
"fprintf";
"cudaSetDevice";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "deviceProp.0+4832";
"STOREDANYTHING" -> "deviceProp.4864+192";
"stderr" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"READONLY";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = stderr\l"];
"STOREDANYTHING";
"INTEGER";
"stderr";
"fwrite";
"cudaGetDeviceProperties";
"deviceProp.0+4832";
"deviceProp.4864+192";
"fprintf";
"cudaSetDevice";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "deviceProp.0+4832";
"STOREDANYTHING" -> "deviceProp.4864+192";
"stderr" -> "ESCAPED";
"stderr" -> "deviceProp.0+4832";
"stderr" -> "deviceProp.4864+192";
"deviceProp.0+4832" -> "ESCAPED";
"deviceProp.4864+192" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
READONLY = { READONLY }
ESCAPED = { NULL READONLY ESCAPED NONLOCAL deviceProp.0+4832 deviceProp.4864+192 }
NONLOCAL = { ESCAPED NONLOCAL } same as stderr
STOREDANYTHING = { }
INTEGER = { ANYTHING }
stderr.43_3 = { ESCAPED NONLOCAL } same as stderr
stderr = { ESCAPED NONLOCAL }
fwrite = { }
cudaGetDeviceProperties = { }
deviceProp.0+4832 = { ESCAPED NONLOCAL }
deviceProp.4864+192 = { ESCAPED NONLOCAL }
stderr.43_6 = { ESCAPED NONLOCAL } same as stderr
fprintf = { }
cudaSetDevice = { }


Alias information for void GPU_argv_init()

Aliased symbols

deviceProp, UID D.66191, struct cudaDeviceProp, is addressable

Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.66191 }

Flow-insensitive points-to information

stderr.43_3, points-to non-local, points-to escaped, points-to vars: { }
stderr.43_6, points-to non-local, points-to escaped, points-to vars: { }

void GPU_argv_init() ()
{
  struct cudaDeviceProp deviceProp;
  struct _IO_FILE * stderr.43;

  <bb 2>:
  stderr.43_3 = stderr;
  __builtin_fwrite ("GPU init.\n", 1, 10, stderr.43_3);

  <bb 3>:
  cudaGetDeviceProperties (&deviceProp, 0);

  <bb 4>:
  stderr.43_6 = stderr;
  fprintf (stderr.43_6, "setting device %d with name %s\n", 0, &deviceProp.name);

  <bb 5>:
  cudaSetDevice (0);

  <bb 6>:
  deviceProp ={v} {CLOBBER};
  return;

<L0>:
  deviceProp ={v} {CLOBBER};
  resx 1

}



;; Function void polybench_flush_cache() (_Z21polybench_flush_cachev, funcdef_no=3220, decl_uid=66470, cgraph_uid=3042)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
READONLY = &READONLY
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
cs_4 = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
flush_8 = &HEAP
tmp_9 = &NONLOCAL
i_10 = &NULL
_11 = i_1
_12 = _11
_12 = &NONLOCAL
_13 = flush_8 + UNKNOWN
_14 = *_13
tmp_15 = _14
tmp_15 = tmp_2
i_16 = i_1
i_16 = &NONLOCAL
i_1 = &NULL
i_1 = i_16
tmp_2 = &NONLOCAL
tmp_2 = tmp_15
ESCAPED = &READONLY
ESCAPED = &READONLY
ESCAPED = &NONLOCAL
__PRETTY_FUNCTION__ = NONLOCAL
ESCAPED = &__PRETTY_FUNCTION__

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"READONLY";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"cs_4";
"calloc";
"flush_8" [label="\N\n_13 = flush_8 + UNKNOWN\l"];
"HEAP";
"i_10";
"_11";
"_13" [label="\N\n_14 = *_13\l"];
"_14";
"tmp_15";
"__assert_fail";
"__PRETTY_FUNCTION__";

  // Edges in the constraint graph:
"NONLOCAL" -> "__PRETTY_FUNCTION__";
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "HEAP";
"STOREDANYTHING" -> "_13";
"STOREDANYTHING" -> "__PRETTY_FUNCTION__";
"_14" -> "tmp_15";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"READONLY";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"cs_4";
"calloc";
"flush_8" [label="\N\n_13 = flush_8 + UNKNOWN\l"];
"HEAP";
"i_10";
"_11";
"_13" [label="\N\n_14 = *_13\l"];
"_14";
"tmp_15";
"__assert_fail";
"__PRETTY_FUNCTION__";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"NONLOCAL" -> "__PRETTY_FUNCTION__";
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "HEAP";
"STOREDANYTHING" -> "_13";
"STOREDANYTHING" -> "__PRETTY_FUNCTION__";
"HEAP" -> "_14";
"_14" -> "tmp_15";
"__PRETTY_FUNCTION__" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
READONLY = { READONLY }
ESCAPED = { READONLY ESCAPED NONLOCAL __PRETTY_FUNCTION__ }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
cs_4 = { NONLOCAL }
calloc = { }
flush_8 = { HEAP }
HEAP = { }
tmp_9 = { NONLOCAL } same as cs_4
i_10 = { NULL }
_11 = { NULL NONLOCAL }
i_1 = { NULL NONLOCAL } same as _11
_12 = { NULL NONLOCAL } same as _11
_13 = { HEAP }
_14 = { }
tmp_15 = { NONLOCAL }
tmp_2 = { NONLOCAL } same as tmp_15
i_16 = { NULL NONLOCAL } same as _11
__assert_fail = { }
__PRETTY_FUNCTION__ = { ESCAPED NONLOCAL }


Alias information for void polybench_flush_cache()

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { D.66476 } (includes global vars)

Flow-insensitive points-to information

flush_8, points-to vars: { D.67444 }
_13, points-to vars: { D.67444 }

void polybench_flush_cache() ()
{
  static const char __PRETTY_FUNCTION__[29] = "void polybench_flush_cache()";
  double tmp;
  int i;
  double * flush;
  int cs;
  long unsigned int _11;
  long unsigned int _12;
  double * _13;
  double _14;

  <bb 2>:
  cs_4 = 4194560;
  flush_8 = calloc (4194560, 8);
  tmp_9 = 0.0;
  i_10 = 0;
  goto <bb 4>;

  <bb 3>:
  _11 = (long unsigned int) i_1;
  _12 = _11 * 8;
  _13 = flush_8 + _12;
  _14 = *_13;
  tmp_15 = _14 + tmp_2;
  i_16 = i_1 + 1;

  <bb 4>:
  # i_1 = PHI <0(2), i_16(3)>
  # tmp_2 = PHI <0.0(2), tmp_15(3)>
  if (i_1 <= 4194559)
    goto <bb 3>;
  else
    goto <bb 5>;

  <bb 5>:
  if (tmp_2 <= 1.0e+1)
    goto <bb 7>;
  else
    goto <bb 6>;

  <bb 6>:
  __assert_fail ("tmp <= 10.0", "../../../utilities/polybench.c", 96, &__PRETTY_FUNCTION__);

  <bb 7>:
  free (flush_8);
  return;

}



;; Function void polybench_prepare_instruments() (_Z29polybench_prepare_instrumentsv, funcdef_no=3221, decl_uid=66481, cgraph_uid=3043)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
READONLY = &READONLY
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"READONLY";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"_Z21polybench_flush_cachev";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"READONLY";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"_Z21polybench_flush_cachev";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
READONLY = { READONLY }
ESCAPED = { }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
_Z21polybench_flush_cachev = { }


Alias information for void polybench_prepare_instruments()

Aliased symbols


Call clobber information

ESCAPED, points-to vars: { }

Flow-insensitive points-to information


void polybench_prepare_instruments() ()
{
  <bb 2>:
  polybench_flush_cache ();
  return;

}



;; Function void polybench_timer_start() (_Z21polybench_timer_startv, funcdef_no=3222, decl_uid=65328, cgraph_uid=3044)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
READONLY = &READONLY
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
_4 = NONLOCAL
polybench_t_start.68_5 = _4
polybench_t_start = NONLOCAL
polybench_t_start = polybench_t_start.68_5
ESCAPED = polybench_t_start.68_5

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"READONLY";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"_Z21polybench_flush_cachev";
"_ZL7rtclockv";
"_4";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"_4" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"READONLY";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = _4\l"];
"STOREDANYTHING";
"INTEGER";
"_Z21polybench_flush_cachev";
"_ZL7rtclockv";
"_4";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"_4" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
READONLY = { READONLY }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as _4
STOREDANYTHING = { }
INTEGER = { ANYTHING }
_Z21polybench_flush_cachev = { }
_ZL7rtclockv = { }
_4 = { ESCAPED NONLOCAL }
polybench_t_start.68_5 = { ESCAPED NONLOCAL } same as _4
polybench_t_start = { ESCAPED NONLOCAL } same as _4


Alias information for void polybench_timer_start()

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information


void polybench_timer_start() ()
{
  double polybench_t_start.68;
  double _4;

  <bb 2>:
  polybench_flush_cache ();
  _4 = rtclock ();
  polybench_t_start.68_5 = _4;
  polybench_t_start = polybench_t_start.68_5;
  return;

}



;; Function void polybench_timer_stop() (_Z20polybench_timer_stopv, funcdef_no=3223, decl_uid=65329, cgraph_uid=3045)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
READONLY = &READONLY
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
_3 = NONLOCAL
polybench_t_end.69_4 = _3
polybench_t_end = NONLOCAL
polybench_t_end = polybench_t_end.69_4
ESCAPED = polybench_t_end.69_4

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"READONLY";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"_ZL7rtclockv";
"_3";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"_3" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"READONLY";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = _3\l"];
"STOREDANYTHING";
"INTEGER";
"_ZL7rtclockv";
"_3";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"_3" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
READONLY = { READONLY }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as _3
STOREDANYTHING = { }
INTEGER = { ANYTHING }
_ZL7rtclockv = { }
_3 = { ESCAPED NONLOCAL }
polybench_t_end.69_4 = { ESCAPED NONLOCAL } same as _3
polybench_t_end = { ESCAPED NONLOCAL } same as _3


Alias information for void polybench_timer_stop()

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information


void polybench_timer_stop() ()
{
  double polybench_t_end.69;
  double _3;

  <bb 2>:
  _3 = rtclock ();
  polybench_t_end.69_4 = _3;
  polybench_t_end = polybench_t_end.69_4;
  return;

}



;; Function void polybench_timer_print() (_Z21polybench_timer_printv, funcdef_no=3224, decl_uid=65330, cgraph_uid=3046)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
READONLY = &READONLY
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
polybench_t_end = NONLOCAL
polybench_t_end.70_2 = polybench_t_end
polybench_t_start = NONLOCAL
polybench_t_start.71_3 = polybench_t_start
_4 = polybench_t_end.70_2
_4 = polybench_t_start.71_3
ESCAPED = &READONLY
ESCAPED = _4

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"READONLY";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"polybench_t_end";
"printf";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"polybench_t_end" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"READONLY";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = polybench_t_end\l"];
"STOREDANYTHING";
"INTEGER";
"polybench_t_end";
"printf";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"polybench_t_end" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
READONLY = { READONLY }
ESCAPED = { READONLY ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as polybench_t_end
STOREDANYTHING = { }
INTEGER = { ANYTHING }
polybench_t_end.70_2 = { ESCAPED NONLOCAL } same as polybench_t_end
polybench_t_end = { ESCAPED NONLOCAL }
polybench_t_start.71_3 = { ESCAPED NONLOCAL } same as polybench_t_end
polybench_t_start = { ESCAPED NONLOCAL } same as polybench_t_end
_4 = { ESCAPED NONLOCAL } same as polybench_t_end
printf = { }


Alias information for void polybench_timer_print()

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information


void polybench_timer_print() ()
{
  double polybench_t_start.71;
  double polybench_t_end.70;
  double _4;

  <bb 2>:
  polybench_t_end.70_2 = polybench_t_end;
  polybench_t_start.71_3 = polybench_t_start;
  _4 = polybench_t_end.70_2 - polybench_t_start.71_3;
  printf ("%0.6f\n", _4);
  return;

}



;; Function void* polybench_alloc_data(long long unsigned int, int) (_Z20polybench_alloc_datayi, funcdef_no=3226, decl_uid=65336, cgraph_uid=3048)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
READONLY = &READONLY
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
n = &NONLOCAL
elt_size = &NONLOCAL
n_2 = n
_4 = elt_size
val_5 = _4
val_5 = n_2
ESCAPED = val_5
ret_8 = NONLOCAL
ret_9 = ret_8
ret_10 = ret_9
ESCAPED = ret_10

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"READONLY";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"n";
"_ZL7xmallocm";
"ret_8";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"n" -> "ESCAPED";
"ret_8" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"READONLY";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = ret_8\l"];
"STOREDANYTHING";
"INTEGER";
"n";
"_ZL7xmallocm";
"ret_8";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"n" -> "ESCAPED";
"ret_8" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
READONLY = { READONLY }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as ret_8
STOREDANYTHING = { }
INTEGER = { ANYTHING }
n = { NONLOCAL }
elt_size = { NONLOCAL } same as n
n_2 = { NONLOCAL } same as n
_4 = { NONLOCAL } same as n
val_5 = { NONLOCAL } same as n
_ZL7xmallocm = { }
ret_8 = { ESCAPED NONLOCAL }
ret_9 = { ESCAPED NONLOCAL } same as ret_8
ret_10 = { ESCAPED NONLOCAL } same as ret_8


Alias information for void* polybench_alloc_data(long long unsigned int, int)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

ret_8, points-to non-local, points-to escaped, points-to vars: { }
ret_9, points-to non-local, points-to escaped, points-to vars: { }
ret_10, points-to non-local, points-to escaped, points-to vars: { }

void* polybench_alloc_data(long long unsigned int, int) (long long unsigned int n, int elt_size)
{
  void * ret;
  size_t val;
  long unsigned int _4;

  <bb 2>:
  n_2 = n_1(D);
  _4 = (long unsigned int) elt_size_3(D);
  val_5 = _4 * n_2;
  ret_8 = xmalloc (val_5);
  ret_9 = ret_8;
  ret_10 = ret_9;
  return ret_10;

}



;; Function int main(int, char**) (main, funcdef_no=3218, decl_uid=66234, cgraph_uid=3040)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
READONLY = &READONLY
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
argc = &NONLOCAL
argv = &NONLOCAL
ni = &NONLOCAL
nj = &NONLOCAL
nk = &NONLOCAL
ESCAPED = &NONLOCAL
ret_221 = NONLOCAL
ret_262 = ret_221
ret_9 = ret_262
ret_10 = ret_9
A = ret_10
ESCAPED = &NONLOCAL
ret_224 = NONLOCAL
ret_264 = ret_224
ret_13 = ret_264
ret_14 = ret_13
B = ret_14
ESCAPED = &NONLOCAL
ret_227 = NONLOCAL
ret_266 = ret_227
ret_17 = ret_266
ret_18 = ret_17
C = ret_18
ESCAPED = &NONLOCAL
C_outputFromOMP_230 = NONLOCAL
C_outputFromOMP_268 = C_outputFromOMP_230
C_outputFromOMP_21 = C_outputFromOMP_268
C_outputFromOMP_22 = C_outputFromOMP_21
ESCAPED = &NONLOCAL
ret_233 = NONLOCAL
ret_270 = ret_233
ret_24 = ret_270
ret_25 = ret_24
C_inputToGpu = ret_25
ESCAPED = &NONLOCAL
ret_236 = NONLOCAL
ret_272 = ret_236
ret_28 = ret_272
ret_29 = ret_28
C_outputFromGpu = ret_29
stderr = NONLOCAL
stderr.53_31 = stderr
ESCAPED = &READONLY
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = stderr.53_31
ESCAPED = &NONLOCAL
ff_0_35 = &HEAP
ESCAPED = &NONLOCAL
_40 = &HEAP
*ff_0_35 + 128 = _40
ESCAPED = &NONLOCAL
_46 = &HEAP
*ff_0_35 + 192 = _46
derefaddrtmp = &_Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_
*ff_0_35 = derefaddrtmp
_49 = ff_0_35 + 320
derefaddrtmp = &NULL
*_49 + UNKNOWN = derefaddrtmp
ffi_type_void.0+96 = NONLOCAL
ffi_type_void.128+64 = NONLOCAL
derefaddrtmp = &ffi_type_void.0+96
*ff_0_35 + 256 = derefaddrtmp
derefaddrtmp = &NONLOCAL
*ff_0_35 + 64 = derefaddrtmp
_53 = *ff_0_35 + 192
derefaddrtmp = &ni
*_53 = derefaddrtmp
_55 = *ff_0_35 + 192
derefaddrtmp = &nj
*_55 + 64 = derefaddrtmp
_58 = *ff_0_35 + 192
derefaddrtmp = &nk
*_58 + 128 = derefaddrtmp
_61 = *ff_0_35 + 192
derefaddrtmp = &alpha
*_61 + 192 = derefaddrtmp
_64 = *ff_0_35 + 192
derefaddrtmp = &beta
*_64 + 256 = derefaddrtmp
_67 = *ff_0_35 + 192
derefaddrtmp = &A
*_67 + 320 = derefaddrtmp
_70 = *ff_0_35 + 192
derefaddrtmp = &B
*_70 + 384 = derefaddrtmp
_73 = *ff_0_35 + 192
derefaddrtmp = &C
*_73 + 448 = derefaddrtmp
_76 = *ff_0_35 + 192
derefaddrtmp = &C_inputToGpu
*_76 + 512 = derefaddrtmp
_79 = *ff_0_35 + 192
derefaddrtmp = &C_outputFromGpu
*_79 + 576 = derefaddrtmp
_82 = *ff_0_35 + 192
derefaddrtmp = &NULL
*_82 + 640 = derefaddrtmp
_85 = *ff_0_35 + 128
ffi_type_sint32.0+96 = NONLOCAL
ffi_type_sint32.128+64 = NONLOCAL
derefaddrtmp = &ffi_type_sint32.0+96
*_85 = derefaddrtmp
_87 = *ff_0_35 + 128
derefaddrtmp = &ffi_type_sint32.0+96
*_87 + 64 = derefaddrtmp
_90 = *ff_0_35 + 128
derefaddrtmp = &ffi_type_sint32.0+96
*_90 + 128 = derefaddrtmp
_93 = *ff_0_35 + 128
ffi_type_double.0+96 = NONLOCAL
ffi_type_double.128+64 = NONLOCAL
derefaddrtmp = &ffi_type_double.0+96
*_93 + 192 = derefaddrtmp
_96 = *ff_0_35 + 128
derefaddrtmp = &ffi_type_double.0+96
*_96 + 256 = derefaddrtmp
_99 = *ff_0_35 + 128
ffi_type_pointer.0+96 = NONLOCAL
ffi_type_pointer.128+64 = NONLOCAL
derefaddrtmp = &ffi_type_pointer.0+96
*_99 + 320 = derefaddrtmp
_102 = *ff_0_35 + 128
derefaddrtmp = &ffi_type_pointer.0+96
*_102 + 384 = derefaddrtmp
_105 = *ff_0_35 + 128
derefaddrtmp = &ffi_type_pointer.0+96
*_105 + 448 = derefaddrtmp
_108 = *ff_0_35 + 128
derefaddrtmp = &ffi_type_pointer.0+96
*_108 + 512 = derefaddrtmp
_111 = *ff_0_35 + 128
derefaddrtmp = &ffi_type_pointer.0+96
*_111 + 576 = derefaddrtmp
_114 = *ff_0_35 + 128
derefaddrtmp = &NULL
*_114 + 640 = derefaddrtmp
stderr.53_117 = stderr
ESCAPED = &READONLY
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = stderr.53_117
table = NONLOCAL
ESCAPED = &table
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
_122 = NONLOCAL
retval.54_123 = _122
table.55_124 = table
ESCAPED = &READONLY
ESCAPED = &READONLY
ESCAPED = &NONLOCAL
__PRETTY_FUNCTION__ = NONLOCAL
ESCAPED = &__PRETTY_FUNCTION__
stderr.53_126 = stderr
ESCAPED = &READONLY
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = stderr.53_126
table.55_128 = table
_129 = *table.55_128
_131 = *_129 + 64
doubledereftmp = *ff_0_35 + UNKNOWN
*_131 + UNKNOWN = doubledereftmp
table.55_133 = table
TablePointerFunctions = NONLOCAL
TablePointerFunctions = table.55_133
ESCAPED = table.55_133
TablePointerFunctions.56_135 = TablePointerFunctions
ESCAPED = &READONLY
ESCAPED = &READONLY
ESCAPED = &NONLOCAL
ESCAPED = &__PRETTY_FUNCTION__
stderr.53_137 = stderr
ESCAPED = &READONLY
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = stderr.53_137
C.57_139 = C
B.58_140 = B
A.59_141 = A
nk.60_142 = nk
nj.61_143 = nj
ni.62_144 = ni
ESCAPED = ni.62_144
ESCAPED = nj.61_143
ESCAPED = nk.60_142
ESCAPED = &alpha
ESCAPED = &beta
ESCAPED = A.59_141
ESCAPED = B.58_140
ESCAPED = C.57_139
C.57_146 = C
nj.61_147 = nj
ni.62_148 = ni
_238 = i_237
_239 = _238
_239 = &NONLOCAL
_240 = C_outputFromOMP_22 + UNKNOWN
_241 = C.57_146 + UNKNOWN
_243 = *_241 + UNKNOWN
*_240 + UNKNOWN = _243
j_244 = j_242
j_244 = &NONLOCAL
j_242 = j_244
j_242 = &NULL
i_245 = i_237
i_245 = &NONLOCAL
i_237 = &NULL
i_237 = i_245
C_outputFromGpu.63_150 = C_outputFromGpu
C.57_151 = C
nj.61_152 = nj
ni.62_153 = ni
_248 = i_247
_249 = _248
_249 = &NONLOCAL
_250 = C_outputFromGpu.63_150 + UNKNOWN
_251 = C.57_151 + UNKNOWN
_253 = *_251 + UNKNOWN
*_250 + UNKNOWN = _253
j_254 = j_252
j_254 = &NONLOCAL
j_252 = j_254
j_252 = &NULL
i_255 = i_247
i_255 = &NONLOCAL
i_247 = &NULL
i_247 = i_255
stderr.53_155 = stderr
ESCAPED = &READONLY
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = stderr.53_155
B.58_157 = B
A.59_158 = A
beta.64_159 = beta
alpha.65_160 = alpha
nk.60_161 = nk
nj.61_162 = nj
ni.62_163 = ni
ESCAPED = ni.62_163
ESCAPED = nj.61_162
ESCAPED = nk.60_161
ESCAPED = alpha.65_160
ESCAPED = beta.64_159
ESCAPED = A.59_158
ESCAPED = B.58_157
ESCAPED = C_outputFromOMP_22
stdout = NONLOCAL
stdout.66_165 = stdout
ESCAPED = stdout.66_165
ESCAPED = &READONLY
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
stderr.53_168 = stderr
ESCAPED = &READONLY
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = stderr.53_168
C.57_170 = C
nj.61_171 = nj
ni.62_172 = ni
ESCAPED = ni.62_172
ESCAPED = nj.61_171
ESCAPED = C.57_170
ESCAPED = C_outputFromOMP_22
stderr.53_174 = stderr
ESCAPED = &READONLY
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = stderr.53_174
C_outputFromGpu.63_176 = C_outputFromGpu
C.57_177 = C
nj.61_178 = nj
ni.62_179 = ni
ESCAPED = ni.62_179
ESCAPED = nj.61_178
ESCAPED = C.57_177
ESCAPED = C_outputFromGpu.63_176
_183 = *argv
_184 = *_183
C_outputFromGpu.63_185 = C_outputFromGpu
nj.61_186 = nj
ni.62_187 = ni
ESCAPED = ni.62_187
ESCAPED = nj.61_186
ESCAPED = C_outputFromGpu.63_185
A.59_189 = A
B.58_191 = B
C.57_193 = C
C_outputFromGpu.63_196 = C_outputFromGpu
ESCAPED = &NULL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"READONLY";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"argc" [label="\N\n_183 = *argc\l"];
"_ZL7xmallocm";
"ret_221" [label="\N\n_240 = ret_221 + UNKNOWN\l"];
"C_inputToGpu";
"fwrite";
"malloc";
"ff_0_35" [label="\N\n_49 = ff_0_35 + 320\l_53 = *ff_0_35 + 192\l_55 = *ff_0_35 + 192\l_58 = *ff_0_35 + 192\l_61 = *ff_0_35 + 192\l_64 = *ff_0_35 + 192\l_67 = *ff_0_35 + 192\l_70 = *ff_0_35 + 192\l_73 = *ff_0_35 + 192\l_76 = *ff_0_35 + 192\l_79 = *ff_0_35 + 192\l_82 = *ff_0_35 + 192\l_85 = *ff_0_35 + 128\l_87 = *ff_0_35 + 128\l_90 = *ff_0_35 + 128\l_93 = *ff_0_35 + 128\l_96 = *ff_0_35 + 128\l_99 = *ff_0_35 + 128\l_102 = *ff_0_35 + 128\l_105 = *ff_0_35 + 128\l_108 = *ff_0_35 + 128\l_111 = *ff_0_35 + 128\l_114 = *ff_0_35 + 128\ldoubledereftmp = *ff_0_35 + UNKNOWN\l*ff_0_35 = derefaddrtmp\l*ff_0_35 + 64 = argc\l*ff_0_35 + 128 = _40\l*ff_0_35 + 192 = _46\l*ff_0_35 + 256 = derefaddrtmp\l"];
"HEAP";
"_40";
"HEAP";
"_46";
"HEAP";
"_Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_";
"derefaddrtmp";
"_49" [label="\N\n*_49 + UNKNOWN = derefaddrtmp\l"];
"derefaddrtmp";
"ffi_type_void.0+96";
"ffi_type_void.128+64";
"derefaddrtmp";
"_53" [label="\N\n*_53 = derefaddrtmp\l"];
"derefaddrtmp";
"_55" [label="\N\n*_55 + 64 = derefaddrtmp\l"];
"derefaddrtmp";
"_58" [label="\N\n*_58 + 128 = derefaddrtmp\l"];
"derefaddrtmp";
"_61" [label="\N\n*_61 + 192 = derefaddrtmp\l"];
"derefaddrtmp";
"_64" [label="\N\n*_64 + 256 = derefaddrtmp\l"];
"derefaddrtmp";
"_67" [label="\N\n*_67 + 320 = derefaddrtmp\l"];
"derefaddrtmp";
"_70" [label="\N\n*_70 + 384 = derefaddrtmp\l"];
"derefaddrtmp";
"_73" [label="\N\n*_73 + 448 = derefaddrtmp\l"];
"derefaddrtmp";
"_76" [label="\N\n*_76 + 512 = derefaddrtmp\l"];
"derefaddrtmp";
"_79" [label="\N\n*_79 + 576 = derefaddrtmp\l"];
"derefaddrtmp";
"_82" [label="\N\n*_82 + 640 = derefaddrtmp\l"];
"_85" [label="\N\n*_85 = derefaddrtmp\l"];
"ffi_type_sint32.0+96";
"ffi_type_sint32.128+64";
"derefaddrtmp";
"_87" [label="\N\n*_87 + 64 = derefaddrtmp\l"];
"_90" [label="\N\n*_90 + 128 = derefaddrtmp\l"];
"_93" [label="\N\n*_93 + 192 = derefaddrtmp\l"];
"ffi_type_double.0+96";
"ffi_type_double.128+64";
"derefaddrtmp";
"_96" [label="\N\n*_96 + 256 = derefaddrtmp\l"];
"_99" [label="\N\n*_99 + 320 = derefaddrtmp\l"];
"ffi_type_pointer.0+96";
"ffi_type_pointer.128+64";
"derefaddrtmp";
"_102" [label="\N\n*_102 + 384 = derefaddrtmp\l"];
"_105" [label="\N\n*_105 + 448 = derefaddrtmp\l"];
"_108" [label="\N\n*_108 + 512 = derefaddrtmp\l"];
"_111" [label="\N\n*_111 + 576 = derefaddrtmp\l"];
"_114" [label="\N\n*_114 + 640 = derefaddrtmp\l"];
"_Z29create_target_functions_tablePPPP4Funcii";
"table.55_124" [label="\N\n_129 = *table.55_124\l"];
"__assert_fail";
"__PRETTY_FUNCTION__";
"_129" [label="\N\n_131 = *_129 + 64\l"];
"_131" [label="\N\n*_131 + UNKNOWN = doubledereftmp\l"];
"doubledereftmp";
"C.57_139" [label="\N\n_241 = C.57_139 + UNKNOWN\l_251 = C.57_139 + UNKNOWN\l"];
"B.58_140";
"A.59_141";
"nk.60_142";
"nj.61_143";
"ni.62_144";
"_Z10init_arrayiiiPdS_PA4096_dS1_S1_";
"_238";
"_240" [label="\N\n*_240 + UNKNOWN = _243\l"];
"_241" [label="\N\n_243 = *_241 + UNKNOWN\l"];
"_243";
"C_outputFromGpu.63_150" [label="\N\n_250 = C_outputFromGpu.63_150 + UNKNOWN\l"];
"_250" [label="\N\n*_250 + UNKNOWN = _253\l"];
"_251" [label="\N\n_253 = *_251 + UNKNOWN\l"];
"_253";
"beta.64_159";
"alpha.65_160";
"_Z8gemm_ompiiiddPA4096_dS0_S0_";
"fprintf";
"_Z26hookomp_print_time_resultsv";
"_Z14compareResultsiiPA4096_dS0_";
"_183" [label="\N\n_184 = *_183\l"];
"_184";
"_ZL11print_arrayiiPA4096_d";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "ni.62_144";
"STOREDANYTHING" -> "nj.61_143";
"STOREDANYTHING" -> "nk.60_142";
"STOREDANYTHING" -> "A.59_141";
"STOREDANYTHING" -> "B.58_140";
"STOREDANYTHING" -> "C.57_139";
"STOREDANYTHING" -> "C_inputToGpu";
"STOREDANYTHING" -> "C_outputFromGpu.63_150";
"STOREDANYTHING" -> "HEAP";
"STOREDANYTHING" -> "HEAP";
"STOREDANYTHING" -> "HEAP";
"STOREDANYTHING" -> "_Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_";
"STOREDANYTHING" -> "_49";
"STOREDANYTHING" -> "ffi_type_void.0+96";
"STOREDANYTHING" -> "ffi_type_void.128+64";
"STOREDANYTHING" -> "_53";
"STOREDANYTHING" -> "_55";
"STOREDANYTHING" -> "_58";
"STOREDANYTHING" -> "_61";
"STOREDANYTHING" -> "alpha.65_160";
"STOREDANYTHING" -> "_64";
"STOREDANYTHING" -> "beta.64_159";
"STOREDANYTHING" -> "_67";
"STOREDANYTHING" -> "_70";
"STOREDANYTHING" -> "_73";
"STOREDANYTHING" -> "_76";
"STOREDANYTHING" -> "_79";
"STOREDANYTHING" -> "_82";
"STOREDANYTHING" -> "_85";
"STOREDANYTHING" -> "ffi_type_sint32.0+96";
"STOREDANYTHING" -> "ffi_type_sint32.128+64";
"STOREDANYTHING" -> "_87";
"STOREDANYTHING" -> "_90";
"STOREDANYTHING" -> "_93";
"STOREDANYTHING" -> "ffi_type_double.0+96";
"STOREDANYTHING" -> "ffi_type_double.128+64";
"STOREDANYTHING" -> "_96";
"STOREDANYTHING" -> "_99";
"STOREDANYTHING" -> "ffi_type_pointer.0+96";
"STOREDANYTHING" -> "ffi_type_pointer.128+64";
"STOREDANYTHING" -> "_102";
"STOREDANYTHING" -> "_105";
"STOREDANYTHING" -> "_108";
"STOREDANYTHING" -> "_111";
"STOREDANYTHING" -> "_114";
"STOREDANYTHING" -> "table.55_124";
"STOREDANYTHING" -> "__PRETTY_FUNCTION__";
"STOREDANYTHING" -> "_131";
"STOREDANYTHING" -> "doubledereftmp";
"STOREDANYTHING" -> "_240";
"STOREDANYTHING" -> "_241";
"STOREDANYTHING" -> "_243";
"STOREDANYTHING" -> "_250";
"STOREDANYTHING" -> "_251";
"STOREDANYTHING" -> "_253";
"ret_221" -> "ESCAPED";
"ret_221" -> "A.59_141";
"ret_221" -> "B.58_140";
"ret_221" -> "C.57_139";
"ret_221" -> "C_inputToGpu";
"ret_221" -> "C_outputFromGpu.63_150";
"ret_221" -> "ffi_type_void.0+96";
"ret_221" -> "ffi_type_void.128+64";
"ret_221" -> "ffi_type_sint32.0+96";
"ret_221" -> "ffi_type_sint32.128+64";
"ret_221" -> "ffi_type_double.0+96";
"ret_221" -> "ffi_type_double.128+64";
"ret_221" -> "ffi_type_pointer.0+96";
"ret_221" -> "ffi_type_pointer.128+64";
"ret_221" -> "table.55_124";
"ret_221" -> "table.55_124";
"ret_221" -> "__PRETTY_FUNCTION__";
"table.55_124" -> "ESCAPED";
"C.57_139" -> "ESCAPED";
"B.58_140" -> "ESCAPED";
"A.59_141" -> "ESCAPED";
"nk.60_142" -> "ESCAPED";
"nj.61_143" -> "ESCAPED";
"ni.62_144" -> "ESCAPED";
"C_outputFromGpu.63_150" -> "ESCAPED";
"beta.64_159" -> "ESCAPED";
"alpha.65_160" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"READONLY";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = ret_221\l"];
"STOREDANYTHING";
"INTEGER";
"argc" [label="\N\n_183 = *argc\l"];
"_ZL7xmallocm";
"ret_221" [label="\N\n_240 = ret_221 + UNKNOWN\l"];
"C_inputToGpu";
"fwrite";
"malloc";
"ff_0_35" [label="\N\n_49 = ff_0_35 + 320\l_53 = *ff_0_35 + 192\l_55 = *ff_0_35 + 192\l_58 = *ff_0_35 + 192\l_61 = *ff_0_35 + 192\l_64 = *ff_0_35 + 192\l_67 = *ff_0_35 + 192\l_70 = *ff_0_35 + 192\l_73 = *ff_0_35 + 192\l_76 = *ff_0_35 + 192\l_79 = *ff_0_35 + 192\l_82 = *ff_0_35 + 192\l_85 = *ff_0_35 + 128\l_87 = *ff_0_35 + 128\l_90 = *ff_0_35 + 128\l_93 = *ff_0_35 + 128\l_96 = *ff_0_35 + 128\l_99 = *ff_0_35 + 128\l_102 = *ff_0_35 + 128\l_105 = *ff_0_35 + 128\l_108 = *ff_0_35 + 128\l_111 = *ff_0_35 + 128\l_114 = *ff_0_35 + 128\ldoubledereftmp = *ff_0_35 + UNKNOWN\l*ff_0_35 = derefaddrtmp\l*ff_0_35 + 64 = argc\l*ff_0_35 + 128 = _40\l*ff_0_35 + 192 = _46\l*ff_0_35 + 256 = derefaddrtmp\l"];
"HEAP";
"_40";
"HEAP";
"_46";
"HEAP";
"_Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_";
"derefaddrtmp";
"_49" [label="\N\n*_49 + UNKNOWN = derefaddrtmp\l"];
"derefaddrtmp";
"ffi_type_void.0+96";
"ffi_type_void.128+64";
"derefaddrtmp";
"_53" [label="\N\n*_53 = derefaddrtmp\l"];
"derefaddrtmp";
"_55" [label="\N\n*_55 + 64 = derefaddrtmp\l"];
"derefaddrtmp";
"_58" [label="\N\n*_58 + 128 = derefaddrtmp\l"];
"derefaddrtmp";
"_61" [label="\N\n*_61 + 192 = derefaddrtmp\l"];
"derefaddrtmp";
"_64" [label="\N\n*_64 + 256 = derefaddrtmp\l"];
"derefaddrtmp";
"_67" [label="\N\n*_67 + 320 = derefaddrtmp\l"];
"derefaddrtmp";
"_70" [label="\N\n*_70 + 384 = derefaddrtmp\l"];
"derefaddrtmp";
"_73" [label="\N\n*_73 + 448 = derefaddrtmp\l"];
"derefaddrtmp";
"_76" [label="\N\n*_76 + 512 = derefaddrtmp\l"];
"derefaddrtmp";
"_79" [label="\N\n*_79 + 576 = derefaddrtmp\l"];
"derefaddrtmp";
"_82" [label="\N\n*_82 + 640 = derefaddrtmp\l"];
"_85" [label="\N\n*_85 = derefaddrtmp\l"];
"ffi_type_sint32.0+96";
"ffi_type_sint32.128+64";
"derefaddrtmp";
"_87" [label="\N\n*_87 + 64 = derefaddrtmp\l"];
"_90" [label="\N\n*_90 + 128 = derefaddrtmp\l"];
"_93" [label="\N\n*_93 + 192 = derefaddrtmp\l"];
"ffi_type_double.0+96";
"ffi_type_double.128+64";
"derefaddrtmp";
"_96" [label="\N\n*_96 + 256 = derefaddrtmp\l"];
"_99" [label="\N\n*_99 + 320 = derefaddrtmp\l"];
"ffi_type_pointer.0+96";
"ffi_type_pointer.128+64";
"derefaddrtmp";
"_102" [label="\N\n*_102 + 384 = derefaddrtmp\l"];
"_105" [label="\N\n*_105 + 448 = derefaddrtmp\l"];
"_108" [label="\N\n*_108 + 512 = derefaddrtmp\l"];
"_111" [label="\N\n*_111 + 576 = derefaddrtmp\l"];
"_114" [label="\N\n*_114 + 640 = derefaddrtmp\l"];
"_Z29create_target_functions_tablePPPP4Funcii";
"table.55_124" [label="\N\n_129 = *table.55_124\l"];
"__assert_fail";
"__PRETTY_FUNCTION__";
"_129" [label="\N\n_131 = *_129 + 64\l"];
"_131" [label="\N\n*_131 + UNKNOWN = doubledereftmp\l"];
"doubledereftmp";
"C.57_139" [label="\N\n_241 = C.57_139 + UNKNOWN\l_251 = C.57_139 + UNKNOWN\l"];
"B.58_140";
"A.59_141";
"nk.60_142";
"nj.61_143";
"ni.62_144";
"_Z10init_arrayiiiPdS_PA4096_dS1_S1_";
"_238";
"_240" [label="\N\n*_240 + UNKNOWN = _243\l"];
"_241" [label="\N\n_243 = *_241 + UNKNOWN\l"];
"_243";
"C_outputFromGpu.63_150" [label="\N\n_250 = C_outputFromGpu.63_150 + UNKNOWN\l"];
"_250" [label="\N\n*_250 + UNKNOWN = _253\l"];
"_251" [label="\N\n_253 = *_251 + UNKNOWN\l"];
"_253";
"beta.64_159";
"alpha.65_160";
"_Z8gemm_ompiiiddPA4096_dS0_S0_";
"fprintf";
"_Z26hookomp_print_time_resultsv";
"_Z14compareResultsiiPA4096_dS0_";
"_183" [label="\N\n_184 = *_183\l"];
"_184";
"_ZL11print_arrayiiPA4096_d";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "ni.62_144";
"STOREDANYTHING" -> "nj.61_143";
"STOREDANYTHING" -> "nk.60_142";
"STOREDANYTHING" -> "A.59_141";
"STOREDANYTHING" -> "B.58_140";
"STOREDANYTHING" -> "C.57_139";
"STOREDANYTHING" -> "C_inputToGpu";
"STOREDANYTHING" -> "C_outputFromGpu.63_150";
"STOREDANYTHING" -> "HEAP";
"STOREDANYTHING" -> "HEAP";
"STOREDANYTHING" -> "HEAP";
"STOREDANYTHING" -> "_Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_";
"STOREDANYTHING" -> "_49";
"STOREDANYTHING" -> "ffi_type_void.0+96";
"STOREDANYTHING" -> "ffi_type_void.128+64";
"STOREDANYTHING" -> "_53";
"STOREDANYTHING" -> "_55";
"STOREDANYTHING" -> "_58";
"STOREDANYTHING" -> "_61";
"STOREDANYTHING" -> "alpha.65_160";
"STOREDANYTHING" -> "_64";
"STOREDANYTHING" -> "beta.64_159";
"STOREDANYTHING" -> "_67";
"STOREDANYTHING" -> "_70";
"STOREDANYTHING" -> "_73";
"STOREDANYTHING" -> "_76";
"STOREDANYTHING" -> "_79";
"STOREDANYTHING" -> "_82";
"STOREDANYTHING" -> "_85";
"STOREDANYTHING" -> "ffi_type_sint32.0+96";
"STOREDANYTHING" -> "ffi_type_sint32.128+64";
"STOREDANYTHING" -> "_87";
"STOREDANYTHING" -> "_90";
"STOREDANYTHING" -> "_93";
"STOREDANYTHING" -> "ffi_type_double.0+96";
"STOREDANYTHING" -> "ffi_type_double.128+64";
"STOREDANYTHING" -> "_96";
"STOREDANYTHING" -> "_99";
"STOREDANYTHING" -> "ffi_type_pointer.0+96";
"STOREDANYTHING" -> "ffi_type_pointer.128+64";
"STOREDANYTHING" -> "_102";
"STOREDANYTHING" -> "_105";
"STOREDANYTHING" -> "_108";
"STOREDANYTHING" -> "_111";
"STOREDANYTHING" -> "_114";
"STOREDANYTHING" -> "table.55_124";
"STOREDANYTHING" -> "__PRETTY_FUNCTION__";
"STOREDANYTHING" -> "_131";
"STOREDANYTHING" -> "doubledereftmp";
"STOREDANYTHING" -> "_240";
"STOREDANYTHING" -> "_241";
"STOREDANYTHING" -> "_243";
"STOREDANYTHING" -> "_250";
"STOREDANYTHING" -> "_251";
"STOREDANYTHING" -> "_253";
"argc" -> "HEAP";
"ret_221" -> "ESCAPED";
"ret_221" -> "A.59_141";
"ret_221" -> "B.58_140";
"ret_221" -> "C.57_139";
"ret_221" -> "C_inputToGpu";
"ret_221" -> "C_outputFromGpu.63_150";
"ret_221" -> "HEAP";
"ret_221" -> "HEAP";
"ret_221" -> "_Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_";
"ret_221" -> "ffi_type_void.0+96";
"ret_221" -> "ffi_type_void.128+64";
"ret_221" -> "ffi_type_sint32.0+96";
"ret_221" -> "ffi_type_sint32.128+64";
"ret_221" -> "ffi_type_double.0+96";
"ret_221" -> "ffi_type_double.128+64";
"ret_221" -> "ffi_type_pointer.0+96";
"ret_221" -> "ffi_type_pointer.128+64";
"ret_221" -> "table.55_124";
"ret_221" -> "table.55_124";
"ret_221" -> "__PRETTY_FUNCTION__";
"ret_221" -> "_129";
"ret_221" -> "_131";
"ret_221" -> "C.57_139";
"ret_221" -> "B.58_140";
"ret_221" -> "A.59_141";
"ret_221" -> "nk.60_142";
"ret_221" -> "nj.61_143";
"ret_221" -> "ni.62_144";
"ret_221" -> "_243";
"ret_221" -> "C_outputFromGpu.63_150";
"ret_221" -> "_253";
"ret_221" -> "beta.64_159";
"ret_221" -> "alpha.65_160";
"ret_221" -> "_183";
"ret_221" -> "_184";
"C_inputToGpu" -> "ESCAPED";
"HEAP" -> "_53";
"HEAP" -> "_55";
"HEAP" -> "_58";
"HEAP" -> "_61";
"HEAP" -> "_64";
"HEAP" -> "_67";
"HEAP" -> "_70";
"HEAP" -> "_73";
"HEAP" -> "_76";
"HEAP" -> "_79";
"HEAP" -> "_82";
"HEAP" -> "_85";
"HEAP" -> "_87";
"HEAP" -> "_90";
"HEAP" -> "_93";
"HEAP" -> "_96";
"HEAP" -> "_99";
"HEAP" -> "_102";
"HEAP" -> "_105";
"HEAP" -> "_108";
"HEAP" -> "_111";
"HEAP" -> "_114";
"HEAP" -> "doubledereftmp";
"_40" -> "HEAP";
"HEAP" -> "ESCAPED";
"_46" -> "HEAP";
"HEAP" -> "ESCAPED";
"_Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_" -> "ESCAPED";
"derefaddrtmp" -> "HEAP";
"derefaddrtmp" -> "ESCAPED";
"derefaddrtmp" -> "HEAP";
"derefaddrtmp" -> "HEAP";
"derefaddrtmp" -> "HEAP";
"derefaddrtmp" -> "_Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_";
"derefaddrtmp" -> "ffi_type_void.128+64";
"ffi_type_void.0+96" -> "ESCAPED";
"ffi_type_void.128+64" -> "ESCAPED";
"derefaddrtmp" -> "HEAP";
"derefaddrtmp" -> "ESCAPED";
"derefaddrtmp" -> "HEAP";
"derefaddrtmp" -> "HEAP";
"derefaddrtmp" -> "_Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_";
"derefaddrtmp" -> "ffi_type_void.0+96";
"derefaddrtmp" -> "ESCAPED";
"derefaddrtmp" -> "HEAP";
"derefaddrtmp" -> "HEAP";
"derefaddrtmp" -> "_Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_";
"derefaddrtmp" -> "ffi_type_void.0+96";
"derefaddrtmp" -> "ffi_type_void.128+64";
"derefaddrtmp" -> "ESCAPED";
"derefaddrtmp" -> "HEAP";
"derefaddrtmp" -> "HEAP";
"derefaddrtmp" -> "_Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_";
"derefaddrtmp" -> "ffi_type_void.128+64";
"derefaddrtmp" -> "ESCAPED";
"derefaddrtmp" -> "HEAP";
"derefaddrtmp" -> "HEAP";
"derefaddrtmp" -> "_Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_";
"derefaddrtmp" -> "ffi_type_void.128+64";
"derefaddrtmp" -> "ESCAPED";
"derefaddrtmp" -> "HEAP";
"derefaddrtmp" -> "HEAP";
"derefaddrtmp" -> "_Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_";
"derefaddrtmp" -> "ffi_type_void.128+64";
"derefaddrtmp" -> "ESCAPED";
"derefaddrtmp" -> "HEAP";
"derefaddrtmp" -> "HEAP";
"derefaddrtmp" -> "_Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_";
"derefaddrtmp" -> "ffi_type_void.128+64";
"derefaddrtmp" -> "ESCAPED";
"derefaddrtmp" -> "HEAP";
"derefaddrtmp" -> "HEAP";
"derefaddrtmp" -> "_Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_";
"derefaddrtmp" -> "ffi_type_void.128+64";
"derefaddrtmp" -> "ESCAPED";
"derefaddrtmp" -> "HEAP";
"derefaddrtmp" -> "HEAP";
"derefaddrtmp" -> "_Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_";
"derefaddrtmp" -> "ffi_type_void.128+64";
"derefaddrtmp" -> "ESCAPED";
"derefaddrtmp" -> "HEAP";
"derefaddrtmp" -> "HEAP";
"derefaddrtmp" -> "_Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_";
"derefaddrtmp" -> "ffi_type_void.128+64";
"derefaddrtmp" -> "ESCAPED";
"derefaddrtmp" -> "HEAP";
"derefaddrtmp" -> "HEAP";
"derefaddrtmp" -> "_Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_";
"derefaddrtmp" -> "ffi_type_void.128+64";
"ffi_type_sint32.0+96" -> "ESCAPED";
"ffi_type_sint32.128+64" -> "ESCAPED";
"derefaddrtmp" -> "ESCAPED";
"derefaddrtmp" -> "HEAP";
"derefaddrtmp" -> "HEAP";
"derefaddrtmp" -> "_Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_";
"derefaddrtmp" -> "ffi_type_void.0+96";
"derefaddrtmp" -> "ffi_type_void.128+64";
"ffi_type_double.0+96" -> "ESCAPED";
"ffi_type_double.128+64" -> "ESCAPED";
"derefaddrtmp" -> "ESCAPED";
"derefaddrtmp" -> "HEAP";
"derefaddrtmp" -> "HEAP";
"derefaddrtmp" -> "_Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_";
"derefaddrtmp" -> "ffi_type_void.128+64";
"ffi_type_pointer.0+96" -> "ESCAPED";
"ffi_type_pointer.128+64" -> "ESCAPED";
"derefaddrtmp" -> "ESCAPED";
"derefaddrtmp" -> "HEAP";
"derefaddrtmp" -> "HEAP";
"derefaddrtmp" -> "_Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_";
"derefaddrtmp" -> "ffi_type_void.128+64";
"table.55_124" -> "ESCAPED";
"__PRETTY_FUNCTION__" -> "ESCAPED";
"doubledereftmp" -> "ESCAPED";
"C.57_139" -> "ESCAPED";
"B.58_140" -> "ESCAPED";
"A.59_141" -> "ESCAPED";
"nk.60_142" -> "ESCAPED";
"nj.61_143" -> "ESCAPED";
"ni.62_144" -> "ESCAPED";
"_243" -> "ESCAPED";
"C_outputFromGpu.63_150" -> "ESCAPED";
"_253" -> "ESCAPED";
"beta.64_159" -> "ESCAPED";
"alpha.65_160" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
READONLY = { READONLY }
ESCAPED = { NULL READONLY ESCAPED NONLOCAL ni nj nk A B C C_inputToGpu C_outputFromGpu HEAP HEAP _Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_ ffi_type_void.0+96 ffi_type_void.128+64 alpha beta ffi_type_sint32.0+96 ffi_type_sint32.128+64 ffi_type_double.0+96 ffi_type_double.128+64 ffi_type_pointer.0+96 ffi_type_pointer.128+64 table __PRETTY_FUNCTION__ }
NONLOCAL = { ESCAPED NONLOCAL } same as ret_221
STOREDANYTHING = { }
INTEGER = { ANYTHING }
argc = { NONLOCAL }
argv = { NONLOCAL } same as argc
ni = { ESCAPED NONLOCAL } same as ni.62_144
nj = { ESCAPED NONLOCAL } same as nj.61_143
nk = { ESCAPED NONLOCAL } same as nk.60_142
_ZL7xmallocm = { }
ret_221 = { ESCAPED NONLOCAL }
ret_262 = { ESCAPED NONLOCAL } same as ret_221
ret_9 = { ESCAPED NONLOCAL } same as ret_221
ret_10 = { ESCAPED NONLOCAL } same as ret_221
A = { ESCAPED NONLOCAL } same as A.59_141
ret_224 = { ESCAPED NONLOCAL } same as ret_221
ret_264 = { ESCAPED NONLOCAL } same as ret_221
ret_13 = { ESCAPED NONLOCAL } same as ret_221
ret_14 = { ESCAPED NONLOCAL } same as ret_221
B = { ESCAPED NONLOCAL } same as B.58_140
ret_227 = { ESCAPED NONLOCAL } same as ret_221
ret_266 = { ESCAPED NONLOCAL } same as ret_221
ret_17 = { ESCAPED NONLOCAL } same as ret_221
ret_18 = { ESCAPED NONLOCAL } same as ret_221
C = { ESCAPED NONLOCAL } same as C.57_139
C_outputFromOMP_230 = { ESCAPED NONLOCAL } same as ret_221
C_outputFromOMP_268 = { ESCAPED NONLOCAL } same as ret_221
C_outputFromOMP_21 = { ESCAPED NONLOCAL } same as ret_221
C_outputFromOMP_22 = { ESCAPED NONLOCAL } same as ret_221
ret_233 = { ESCAPED NONLOCAL } same as ret_221
ret_270 = { ESCAPED NONLOCAL } same as ret_221
ret_24 = { ESCAPED NONLOCAL } same as ret_221
ret_25 = { ESCAPED NONLOCAL } same as ret_221
C_inputToGpu = { ESCAPED NONLOCAL }
ret_236 = { ESCAPED NONLOCAL } same as ret_221
ret_272 = { ESCAPED NONLOCAL } same as ret_221
ret_28 = { ESCAPED NONLOCAL } same as ret_221
ret_29 = { ESCAPED NONLOCAL } same as ret_221
C_outputFromGpu = { ESCAPED NONLOCAL } same as C_outputFromGpu.63_150
stderr.53_31 = { ESCAPED NONLOCAL } same as ret_221
stderr = { ESCAPED NONLOCAL } same as ret_221
fwrite = { }
malloc = { }
ff_0_35 = { HEAP }
HEAP = { NULL NONLOCAL HEAP HEAP _Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_ ffi_type_void.0+96 }
_40 = { HEAP }
HEAP = { NULL ESCAPED NONLOCAL ni nj nk A B C C_inputToGpu C_outputFromGpu alpha beta ffi_type_sint32.0+96 ffi_type_double.0+96 ffi_type_pointer.0+96 }
_46 = { HEAP }
HEAP = { NULL ESCAPED NONLOCAL ni nj nk A B C C_inputToGpu C_outputFromGpu alpha beta ffi_type_sint32.0+96 ffi_type_double.0+96 ffi_type_pointer.0+96 }
_Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_ = { NULL ESCAPED NONLOCAL ni nj nk A B C C_inputToGpu C_outputFromGpu alpha beta ffi_type_sint32.0+96 ffi_type_double.0+96 ffi_type_pointer.0+96 }
derefaddrtmp = { _Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_ }
_49 = { HEAP }
derefaddrtmp = { NULL }
ffi_type_void.0+96 = { ESCAPED NONLOCAL ni nj ffi_type_sint32.0+96 }
ffi_type_void.128+64 = { NULL ESCAPED NONLOCAL nj nk A B C C_inputToGpu C_outputFromGpu alpha beta ffi_type_sint32.0+96 ffi_type_double.0+96 ffi_type_pointer.0+96 }
derefaddrtmp = { ffi_type_void.0+96 }
derefaddrtmp = { NONLOCAL } same as argc
_53 = { NULL NONLOCAL HEAP HEAP _Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_ ffi_type_void.0+96 }
derefaddrtmp = { ni }
_55 = { NULL NONLOCAL HEAP HEAP _Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_ ffi_type_void.0+96 }
derefaddrtmp = { nj }
_58 = { NULL NONLOCAL HEAP HEAP _Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_ ffi_type_void.0+96 }
derefaddrtmp = { nk }
_61 = { NULL NONLOCAL HEAP HEAP _Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_ ffi_type_void.0+96 }
alpha = { ESCAPED NONLOCAL } same as alpha.65_160
derefaddrtmp = { alpha }
_64 = { NULL NONLOCAL HEAP HEAP _Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_ ffi_type_void.0+96 }
beta = { ESCAPED NONLOCAL } same as beta.64_159
derefaddrtmp = { beta }
_67 = { NULL NONLOCAL HEAP HEAP _Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_ ffi_type_void.0+96 }
derefaddrtmp = { A }
_70 = { NULL NONLOCAL HEAP HEAP _Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_ ffi_type_void.0+96 }
derefaddrtmp = { B }
_73 = { NULL NONLOCAL HEAP HEAP _Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_ ffi_type_void.0+96 }
derefaddrtmp = { C }
_76 = { NULL NONLOCAL HEAP HEAP _Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_ ffi_type_void.0+96 }
derefaddrtmp = { C_inputToGpu }
_79 = { NULL NONLOCAL HEAP HEAP _Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_ ffi_type_void.0+96 }
derefaddrtmp = { C_outputFromGpu }
_82 = { NULL NONLOCAL HEAP HEAP _Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_ ffi_type_void.0+96 }
derefaddrtmp = { NULL } same as derefaddrtmp
_85 = { NULL NONLOCAL HEAP HEAP _Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_ ffi_type_void.0+96 }
ffi_type_sint32.0+96 = { ESCAPED NONLOCAL }
ffi_type_sint32.128+64 = { ESCAPED NONLOCAL }
derefaddrtmp = { ffi_type_sint32.0+96 }
_87 = { NULL NONLOCAL HEAP HEAP _Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_ ffi_type_void.0+96 }
derefaddrtmp = { ffi_type_sint32.0+96 } same as derefaddrtmp
_90 = { NULL NONLOCAL HEAP HEAP _Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_ ffi_type_void.0+96 }
derefaddrtmp = { ffi_type_sint32.0+96 } same as derefaddrtmp
_93 = { NULL NONLOCAL HEAP HEAP _Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_ ffi_type_void.0+96 }
ffi_type_double.0+96 = { ESCAPED NONLOCAL }
ffi_type_double.128+64 = { ESCAPED NONLOCAL }
derefaddrtmp = { ffi_type_double.0+96 }
_96 = { NULL NONLOCAL HEAP HEAP _Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_ ffi_type_void.0+96 }
derefaddrtmp = { ffi_type_double.0+96 } same as derefaddrtmp
_99 = { NULL NONLOCAL HEAP HEAP _Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_ ffi_type_void.0+96 }
ffi_type_pointer.0+96 = { ESCAPED NONLOCAL }
ffi_type_pointer.128+64 = { ESCAPED NONLOCAL }
derefaddrtmp = { ffi_type_pointer.0+96 }
_102 = { NULL NONLOCAL HEAP HEAP _Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_ ffi_type_void.0+96 }
derefaddrtmp = { ffi_type_pointer.0+96 } same as derefaddrtmp
_105 = { NULL NONLOCAL HEAP HEAP _Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_ ffi_type_void.0+96 }
derefaddrtmp = { ffi_type_pointer.0+96 } same as derefaddrtmp
_108 = { NULL NONLOCAL HEAP HEAP _Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_ ffi_type_void.0+96 }
derefaddrtmp = { ffi_type_pointer.0+96 } same as derefaddrtmp
_111 = { NULL NONLOCAL HEAP HEAP _Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_ ffi_type_void.0+96 }
derefaddrtmp = { ffi_type_pointer.0+96 } same as derefaddrtmp
_114 = { NULL NONLOCAL HEAP HEAP _Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_ ffi_type_void.0+96 }
derefaddrtmp = { NULL } same as derefaddrtmp
stderr.53_117 = { ESCAPED NONLOCAL } same as ret_221
_Z29create_target_functions_tablePPPP4Funcii = { }
table = { ESCAPED NONLOCAL } same as table.55_124
_122 = { ESCAPED NONLOCAL } same as ret_221
retval.54_123 = { ESCAPED NONLOCAL } same as ret_221
table.55_124 = { ESCAPED NONLOCAL }
__assert_fail = { }
__PRETTY_FUNCTION__ = { ESCAPED NONLOCAL }
stderr.53_126 = { ESCAPED NONLOCAL } same as ret_221
table.55_128 = { ESCAPED NONLOCAL } same as table.55_124
_129 = { ESCAPED NONLOCAL }
_131 = { ESCAPED NONLOCAL }
doubledereftmp = { NULL NONLOCAL HEAP HEAP _Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_ ffi_type_void.0+96 }
table.55_133 = { ESCAPED NONLOCAL } same as table.55_124
TablePointerFunctions = { ESCAPED NONLOCAL } same as table.55_124
TablePointerFunctions.56_135 = { ESCAPED NONLOCAL } same as table.55_124
stderr.53_137 = { ESCAPED NONLOCAL } same as ret_221
C.57_139 = { ESCAPED NONLOCAL }
B.58_140 = { ESCAPED NONLOCAL }
A.59_141 = { ESCAPED NONLOCAL }
nk.60_142 = { ESCAPED NONLOCAL }
nj.61_143 = { ESCAPED NONLOCAL }
ni.62_144 = { ESCAPED NONLOCAL }
_Z10init_arrayiiiPdS_PA4096_dS1_S1_ = { }
C.57_146 = { ESCAPED NONLOCAL } same as C.57_139
nj.61_147 = { ESCAPED NONLOCAL } same as nj.61_143
ni.62_148 = { ESCAPED NONLOCAL } same as ni.62_144
_238 = { NULL NONLOCAL }
i_237 = { NULL NONLOCAL } same as _238
_239 = { NULL NONLOCAL } same as _238
_240 = { ESCAPED NONLOCAL }
_241 = { ESCAPED NONLOCAL }
_243 = { ESCAPED NONLOCAL }
j_244 = { NULL NONLOCAL } same as _238
j_242 = { NULL NONLOCAL } same as _238
i_245 = { NULL NONLOCAL } same as _238
C_outputFromGpu.63_150 = { ESCAPED NONLOCAL }
C.57_151 = { ESCAPED NONLOCAL } same as C.57_139
nj.61_152 = { ESCAPED NONLOCAL } same as nj.61_143
ni.62_153 = { ESCAPED NONLOCAL } same as ni.62_144
_248 = { NULL NONLOCAL } same as _238
i_247 = { NULL NONLOCAL } same as _238
_249 = { NULL NONLOCAL } same as _238
_250 = { ESCAPED NONLOCAL }
_251 = { ESCAPED NONLOCAL }
_253 = { ESCAPED NONLOCAL }
j_254 = { NULL NONLOCAL } same as _238
j_252 = { NULL NONLOCAL } same as _238
i_255 = { NULL NONLOCAL } same as _238
stderr.53_155 = { ESCAPED NONLOCAL } same as ret_221
B.58_157 = { ESCAPED NONLOCAL } same as B.58_140
A.59_158 = { ESCAPED NONLOCAL } same as A.59_141
beta.64_159 = { ESCAPED NONLOCAL }
alpha.65_160 = { ESCAPED NONLOCAL }
nk.60_161 = { ESCAPED NONLOCAL } same as nk.60_142
nj.61_162 = { ESCAPED NONLOCAL } same as nj.61_143
ni.62_163 = { ESCAPED NONLOCAL } same as ni.62_144
_Z8gemm_ompiiiddPA4096_dS0_S0_ = { }
stdout.66_165 = { ESCAPED NONLOCAL } same as ret_221
stdout = { ESCAPED NONLOCAL } same as ret_221
fprintf = { }
_Z26hookomp_print_time_resultsv = { }
stderr.53_168 = { ESCAPED NONLOCAL } same as ret_221
C.57_170 = { ESCAPED NONLOCAL } same as C.57_139
nj.61_171 = { ESCAPED NONLOCAL } same as nj.61_143
ni.62_172 = { ESCAPED NONLOCAL } same as ni.62_144
_Z14compareResultsiiPA4096_dS0_ = { }
stderr.53_174 = { ESCAPED NONLOCAL } same as ret_221
C_outputFromGpu.63_176 = { ESCAPED NONLOCAL } same as C_outputFromGpu.63_150
C.57_177 = { ESCAPED NONLOCAL } same as C.57_139
nj.61_178 = { ESCAPED NONLOCAL } same as nj.61_143
ni.62_179 = { ESCAPED NONLOCAL } same as ni.62_144
_183 = { ESCAPED NONLOCAL }
_184 = { ESCAPED NONLOCAL }
C_outputFromGpu.63_185 = { ESCAPED NONLOCAL } same as C_outputFromGpu.63_150
nj.61_186 = { ESCAPED NONLOCAL } same as nj.61_143
ni.62_187 = { ESCAPED NONLOCAL } same as ni.62_144
_ZL11print_arrayiiPA4096_d = { }
A.59_189 = { ESCAPED NONLOCAL } same as A.59_141
B.58_191 = { ESCAPED NONLOCAL } same as B.58_140
C.57_193 = { ESCAPED NONLOCAL } same as C.57_139
C_outputFromGpu.63_196 = { ESCAPED NONLOCAL } same as C_outputFromGpu.63_150


Alias information for int main(int, char**)

Aliased symbols

C_outputFromGpu, UID D.66246, double[4096][4096] *, is addressable
C_inputToGpu, UID D.66245, double[4096][4096] *, is addressable
C, UID D.66243, double[4096][4096] *, is addressable
B, UID D.66242, double[4096][4096] *, is addressable
A, UID D.66241, double[4096][4096] *, is addressable
beta, UID D.66240, double, is addressable
alpha, UID D.66239, double, is addressable
nk, UID D.66238, int, is addressable
nj, UID D.66237, int, is addressable
ni, UID D.66236, int, is addressable

Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.65620 D.65626 D.65630 D.65631 D.66010 D.66236 D.66237 D.66238 D.66239 D.66240 D.66241 D.66242 D.66243 D.66245 D.66246 D.66251 D.67500 D.67501 } (includes global vars)

Flow-insensitive points-to information

ret_9, points-to non-local, points-to escaped, points-to vars: { }
ret_10, points-to non-local, points-to escaped, points-to vars: { }
ret_13, points-to non-local, points-to escaped, points-to vars: { }
ret_14, points-to non-local, points-to escaped, points-to vars: { }
ret_17, points-to non-local, points-to escaped, points-to vars: { }
ret_18, points-to non-local, points-to escaped, points-to vars: { }
C_outputFromOMP_21, points-to non-local, points-to escaped, points-to vars: { }
C_outputFromOMP_22, points-to non-local, points-to escaped, points-to vars: { }
ret_24, points-to non-local, points-to escaped, points-to vars: { }
ret_25, points-to non-local, points-to escaped, points-to vars: { }
ret_28, points-to non-local, points-to escaped, points-to vars: { }
ret_29, points-to non-local, points-to escaped, points-to vars: { }
stderr.53_31, points-to non-local, points-to escaped, points-to vars: { }
ff_0_35, points-to vars: { D.67499 }
_40, points-to vars: { D.67500 } (includes global vars)
_46, points-to vars: { D.67501 } (includes global vars)
_49, points-to vars: { D.67499 }
_53, points-to non-local, points-to NULL, points-to vars: { D.65620 D.67500 D.67501 } (includes global vars)
_55, points-to non-local, points-to NULL, points-to vars: { D.65620 D.67500 D.67501 } (includes global vars)
_58, points-to non-local, points-to NULL, points-to vars: { D.65620 D.67500 D.67501 } (includes global vars)
_61, points-to non-local, points-to NULL, points-to vars: { D.65620 D.67500 D.67501 } (includes global vars)
_64, points-to non-local, points-to NULL, points-to vars: { D.65620 D.67500 D.67501 } (includes global vars)
_67, points-to non-local, points-to NULL, points-to vars: { D.65620 D.67500 D.67501 } (includes global vars)
_70, points-to non-local, points-to NULL, points-to vars: { D.65620 D.67500 D.67501 } (includes global vars)
_73, points-to non-local, points-to NULL, points-to vars: { D.65620 D.67500 D.67501 } (includes global vars)
_76, points-to non-local, points-to NULL, points-to vars: { D.65620 D.67500 D.67501 } (includes global vars)
_79, points-to non-local, points-to NULL, points-to vars: { D.65620 D.67500 D.67501 } (includes global vars)
_82, points-to non-local, points-to NULL, points-to vars: { D.65620 D.67500 D.67501 } (includes global vars)
_85, points-to non-local, points-to NULL, points-to vars: { D.65620 D.67500 D.67501 } (includes global vars)
_87, points-to non-local, points-to NULL, points-to vars: { D.65620 D.67500 D.67501 } (includes global vars)
_90, points-to non-local, points-to NULL, points-to vars: { D.65620 D.67500 D.67501 } (includes global vars)
_93, points-to non-local, points-to NULL, points-to vars: { D.65620 D.67500 D.67501 } (includes global vars)
_96, points-to non-local, points-to NULL, points-to vars: { D.65620 D.67500 D.67501 } (includes global vars)
_99, points-to non-local, points-to NULL, points-to vars: { D.65620 D.67500 D.67501 } (includes global vars)
_102, points-to non-local, points-to NULL, points-to vars: { D.65620 D.67500 D.67501 } (includes global vars)
_105, points-to non-local, points-to NULL, points-to vars: { D.65620 D.67500 D.67501 } (includes global vars)
_108, points-to non-local, points-to NULL, points-to vars: { D.65620 D.67500 D.67501 } (includes global vars)
_111, points-to non-local, points-to NULL, points-to vars: { D.65620 D.67500 D.67501 } (includes global vars)
_114, points-to non-local, points-to NULL, points-to vars: { D.65620 D.67500 D.67501 } (includes global vars)
stderr.53_117, points-to non-local, points-to escaped, points-to vars: { }
table.55_124, points-to non-local, points-to escaped, points-to vars: { }
stderr.53_126, points-to non-local, points-to escaped, points-to vars: { }
table.55_128, points-to non-local, points-to escaped, points-to vars: { }
_129, points-to non-local, points-to escaped, points-to vars: { }
_131, points-to non-local, points-to escaped, points-to vars: { }
table.55_133, points-to non-local, points-to escaped, points-to vars: { }
TablePointerFunctions.56_135, points-to non-local, points-to escaped, points-to vars: { }
stderr.53_137, points-to non-local, points-to escaped, points-to vars: { }
C.57_139, points-to non-local, points-to escaped, points-to vars: { }
B.58_140, points-to non-local, points-to escaped, points-to vars: { }
A.59_141, points-to non-local, points-to escaped, points-to vars: { }
C.57_146, points-to non-local, points-to escaped, points-to vars: { }
C_outputFromGpu.63_150, points-to non-local, points-to escaped, points-to vars: { }
C.57_151, points-to non-local, points-to escaped, points-to vars: { }
stderr.53_155, points-to non-local, points-to escaped, points-to vars: { }
B.58_157, points-to non-local, points-to escaped, points-to vars: { }
A.59_158, points-to non-local, points-to escaped, points-to vars: { }
stdout.66_165, points-to non-local, points-to escaped, points-to vars: { }
stderr.53_168, points-to non-local, points-to escaped, points-to vars: { }
C.57_170, points-to non-local, points-to escaped, points-to vars: { }
stderr.53_174, points-to non-local, points-to escaped, points-to vars: { }
C_outputFromGpu.63_176, points-to non-local, points-to escaped, points-to vars: { }
C.57_177, points-to non-local, points-to escaped, points-to vars: { }
argv_182(D), points-to non-local, points-to vars: { }
_183, points-to non-local, points-to escaped, points-to vars: { }
C_outputFromGpu.63_185, points-to non-local, points-to escaped, points-to vars: { }
A.59_189, points-to non-local, points-to escaped, points-to vars: { }
B.58_191, points-to non-local, points-to escaped, points-to vars: { }
C.57_193, points-to non-local, points-to escaped, points-to vars: { }
C_outputFromGpu.63_196, points-to non-local, points-to escaped, points-to vars: { }
ret_221, points-to non-local, points-to escaped, points-to vars: { }
ret_224, points-to non-local, points-to escaped, points-to vars: { }
ret_227, points-to non-local, points-to escaped, points-to vars: { }
C_outputFromOMP_230, points-to non-local, points-to escaped, points-to vars: { }
ret_233, points-to non-local, points-to escaped, points-to vars: { }
ret_236, points-to non-local, points-to escaped, points-to vars: { }
_240, points-to non-local, points-to escaped, points-to vars: { }
_241, points-to non-local, points-to escaped, points-to vars: { }
_250, points-to non-local, points-to escaped, points-to vars: { }
_251, points-to non-local, points-to escaped, points-to vars: { }
ret_262, points-to non-local, points-to escaped, points-to vars: { }
ret_264, points-to non-local, points-to escaped, points-to vars: { }
ret_266, points-to non-local, points-to escaped, points-to vars: { }
C_outputFromOMP_268, points-to non-local, points-to escaped, points-to vars: { }
ret_270, points-to non-local, points-to escaped, points-to vars: { }
ret_272, points-to non-local, points-to escaped, points-to vars: { }

int main(int, char**) (int argc, char * * argv)
{
  int i;
  int j;
  int i;
  int j;
  size_t val;
  void * ret;
  void * D.67486;
  size_t val;
  void * ret;
  void * D.67481;
  size_t val;
  void * ret;
  void * D.67476;
  size_t val;
  void * ret;
  void * D.67471;
  size_t val;
  void * ret;
  void * D.67466;
  size_t val;
  void * ret;
  void * D.67461;
  static const char __PRETTY_FUNCTION__[22] = "int main(int, char**)";
  int ndevices;
  int nloops;
  struct Func * ff_0;
  int n_params;
  double[4096][4096] * C_outputFromGpu;
  double[4096][4096] * C_inputToGpu;
  double[4096][4096] * C_outputFromOMP;
  double[4096][4096] * C;
  double[4096][4096] * B;
  double[4096][4096] * A;
  double beta;
  double alpha;
  int nk;
  int nj;
  int ni;
  struct _IO_FILE * stdout.66;
  double alpha.65;
  double beta.64;
  double[4096][4096] * C_outputFromGpu.63;
  int ni.62;
  int nj.61;
  int nk.60;
  double[4096][4096] * A.59;
  double[4096][4096] * B.58;
  double[4096][4096] * C.57;
  struct Func * * * TablePointerFunctions.56;
  struct Func * * * table.55;
  bool retval.54;
  struct _IO_FILE * stderr.53;
  void * C_outputFromGpu.52;
  void * C_inputToGpu.51;
  void * C.50;
  void * B.49;
  void * A.48;
  void * _40;
  void * _46;
  void * * _49;
  void * * _53;
  void * * _55;
  void * * _58;
  void * * _61;
  void * * _64;
  void * * _67;
  void * * _70;
  void * * _73;
  void * * _76;
  void * * _79;
  void * * _82;
  struct ffi_type * * _85;
  struct ffi_type * * _87;
  struct ffi_type * * _90;
  struct ffi_type * * _93;
  struct ffi_type * * _96;
  struct ffi_type * * _99;
  struct ffi_type * * _102;
  struct ffi_type * * _105;
  struct ffi_type * * _108;
  struct ffi_type * * _111;
  struct ffi_type * * _114;
  bool _122;
  struct Func * * _129;
  struct Func * _131;
  char * _183;
  unsigned char _184;
  long unsigned int _238;
  long unsigned int _239;
  double[4096] * _240;
  double[4096] * _241;
  double _243;
  long unsigned int _248;
  long unsigned int _249;
  double[4096] * _250;
  double[4096] * _251;
  double _253;

  <bb 2>:
  ni = 4096;
  nj = 4096;
  nk = 4096;
  ret_221 = xmalloc (134217728);

  <bb 3>:
  ret_262 = ret_221;
  ret_9 = ret_262;
  ret_10 = ret_9;
  A = ret_10;
  ret_224 = xmalloc (134217728);

  <bb 4>:
  ret_264 = ret_224;
  ret_13 = ret_264;
  ret_14 = ret_13;
  B = ret_14;
  ret_227 = xmalloc (134217728);

  <bb 5>:
  ret_266 = ret_227;
  ret_17 = ret_266;
  ret_18 = ret_17;
  C = ret_18;
  C_outputFromOMP_230 = xmalloc (134217728);

  <bb 6>:
  C_outputFromOMP_268 = C_outputFromOMP_230;
  C_outputFromOMP_21 = C_outputFromOMP_268;
  C_outputFromOMP_22 = C_outputFromOMP_21;
  ret_233 = xmalloc (134217728);

  <bb 7>:
  ret_270 = ret_233;
  ret_24 = ret_270;
  ret_25 = ret_24;
  C_inputToGpu = ret_25;
  ret_236 = xmalloc (134217728);

  <bb 8>:
  ret_272 = ret_236;
  ret_28 = ret_272;
  ret_29 = ret_28;
  C_outputFromGpu = ret_29;
  stderr.53_31 = stderr;
  __builtin_fwrite ("Preparing alternatives functions.\n", 1, 34, stderr.53_31);

  <bb 9>:
  ff_0_35 = malloc (48);
  _40 = malloc (88);
  ff_0_35->arg_types = _40;
  _46 = malloc (88);
  ff_0_35->arg_values = _46;
  ff_0_35->f = gemm_cuda;
  _49 = &ff_0_35->ret_value;
  memset (_49, 0, 8);
  ff_0_35->ret_type = &ffi_type_void;
  ff_0_35->nargs = 10;
  _53 = ff_0_35->arg_values;
  *_53 = &ni;
  _55 = ff_0_35->arg_values;
  MEM[(void * *)_55 + 8B] = &nj;
  _58 = ff_0_35->arg_values;
  MEM[(void * *)_58 + 16B] = &nk;
  _61 = ff_0_35->arg_values;
  MEM[(void * *)_61 + 24B] = &alpha;
  _64 = ff_0_35->arg_values;
  MEM[(void * *)_64 + 32B] = &beta;
  _67 = ff_0_35->arg_values;
  MEM[(void * *)_67 + 40B] = &A;
  _70 = ff_0_35->arg_values;
  MEM[(void * *)_70 + 48B] = &B;
  _73 = ff_0_35->arg_values;
  MEM[(void * *)_73 + 56B] = &C;
  _76 = ff_0_35->arg_values;
  MEM[(void * *)_76 + 64B] = &C_inputToGpu;
  _79 = ff_0_35->arg_values;
  MEM[(void * *)_79 + 72B] = &C_outputFromGpu;
  _82 = ff_0_35->arg_values;
  MEM[(void * *)_82 + 80B] = 0B;
  _85 = ff_0_35->arg_types;
  *_85 = &ffi_type_sint32;
  _87 = ff_0_35->arg_types;
  MEM[(struct ffi_type * *)_87 + 8B] = &ffi_type_sint32;
  _90 = ff_0_35->arg_types;
  MEM[(struct ffi_type * *)_90 + 16B] = &ffi_type_sint32;
  _93 = ff_0_35->arg_types;
  MEM[(struct ffi_type * *)_93 + 24B] = &ffi_type_double;
  _96 = ff_0_35->arg_types;
  MEM[(struct ffi_type * *)_96 + 32B] = &ffi_type_double;
  _99 = ff_0_35->arg_types;
  MEM[(struct ffi_type * *)_99 + 40B] = &ffi_type_pointer;
  _102 = ff_0_35->arg_types;
  MEM[(struct ffi_type * *)_102 + 48B] = &ffi_type_pointer;
  _105 = ff_0_35->arg_types;
  MEM[(struct ffi_type * *)_105 + 56B] = &ffi_type_pointer;
  _108 = ff_0_35->arg_types;
  MEM[(struct ffi_type * *)_108 + 64B] = &ffi_type_pointer;
  _111 = ff_0_35->arg_types;
  MEM[(struct ffi_type * *)_111 + 72B] = &ffi_type_pointer;
  _114 = ff_0_35->arg_types;
  MEM[(struct ffi_type * *)_114 + 80B] = 0B;
  stderr.53_117 = stderr;
  __builtin_fwrite ("Creating table of target functions.\n", 1, 36, stderr.53_117);

  <bb 10>:
  _122 = create_target_functions_table (&table, 1, 2);

  <bb 11>:
  retval.54_123 = _122;
  if (retval.54_123 != 0)
    goto <bb 12>;
  else
    goto <bb 17>;

  <bb 12>:
  table.55_124 = table;
  if (table.55_124 == 0B)
    goto <bb 13>;
  else
    goto <bb 14>;

  <bb 13>:
  __assert_fail ("table != __null", "gemm.cu", 402, &__PRETTY_FUNCTION__);

  <bb 14>:
  stderr.53_126 = stderr;
  __builtin_fwrite ("Declaring function in 0,1.\n", 1, 27, stderr.53_126);

  <bb 15>:
  table.55_128 = table;
  _129 = *table.55_128;
  _131 = MEM[(struct Func * *)_129 + 8B];
  *_131 = MEM[(const struct Func &)ff_0_35];
  table.55_133 = table;
  TablePointerFunctions = table.55_133;
  TablePointerFunctions.56_135 = TablePointerFunctions;
  if (TablePointerFunctions.56_135 == 0B)
    goto <bb 16>;
  else
    goto <bb 17>;

  <bb 16>:
  __assert_fail ("TablePointerFunctions != __null", "gemm.cu", 408, &__PRETTY_FUNCTION__);

  <bb 17>:
  stderr.53_137 = stderr;
  __builtin_fwrite ("Calling init_array.\n", 1, 20, stderr.53_137);

  <bb 18>:
  C.57_139 = C;
  B.58_140 = B;
  A.59_141 = A;
  nk.60_142 = nk;
  nj.61_143 = nj;
  ni.62_144 = ni;
  init_array (ni.62_144, nj.61_143, nk.60_142, &alpha, &beta, A.59_141, B.58_140, C.57_139);
  C.57_146 = C;
  nj.61_147 = nj;
  ni.62_148 = ni;
  goto <bb 22>;

  <bb 19>:
  _238 = (long unsigned int) i_237;
  _239 = _238 * 32768;
  _240 = C_outputFromOMP_22 + _239;
  _241 = C.57_146 + _239;
  _243 = *_241[j_242];
  *_240[j_242] = _243;
  j_244 = j_242 + 1;

  <bb 20>:
  # j_242 = PHI <j_244(19), 0(22)>
  if (nj.61_147 > j_242)
    goto <bb 19>;
  else
    goto <bb 21>;

  <bb 21>:
  i_245 = i_237 + 1;

  <bb 22>:
  # i_237 = PHI <0(18), i_245(21)>
  if (ni.62_148 > i_237)
    goto <bb 20>;
  else
    goto <bb 23>;

  <bb 23>:
  C_outputFromGpu.63_150 = C_outputFromGpu;
  C.57_151 = C;
  nj.61_152 = nj;
  ni.62_153 = ni;
  goto <bb 27>;

  <bb 24>:
  _248 = (long unsigned int) i_247;
  _249 = _248 * 32768;
  _250 = C_outputFromGpu.63_150 + _249;
  _251 = C.57_151 + _249;
  _253 = *_251[j_252];
  *_250[j_252] = _253;
  j_254 = j_252 + 1;

  <bb 25>:
  # j_252 = PHI <j_254(24), 0(27)>
  if (nj.61_152 > j_252)
    goto <bb 24>;
  else
    goto <bb 26>;

  <bb 26>:
  i_255 = i_247 + 1;

  <bb 27>:
  # i_247 = PHI <0(23), i_255(26)>
  if (ni.62_153 > i_247)
    goto <bb 25>;
  else
    goto <bb 28>;

  <bb 28>:
  stderr.53_155 = stderr;
  __builtin_fwrite ("Calling gemm_omp:\n", 1, 18, stderr.53_155);

  <bb 29>:
  B.58_157 = B;
  A.59_158 = A;
  beta.64_159 = beta;
  alpha.65_160 = alpha;
  nk.60_161 = nk;
  nj.61_162 = nj;
  ni.62_163 = ni;
  gemm_omp (ni.62_163, nj.61_162, nk.60_161, alpha.65_160, beta.64_159, A.59_158, B.58_157, C_outputFromOMP_22);
  stdout.66_165 = stdout;
  fprintf (stdout.66_165, "version = OMP+OFF, num_threads = %d, NI = %d, NJ = %d, NK = %d, ", 8, 4096, 4096, 4096);

  <bb 30>:
  hookomp_print_time_results ();

  <bb 31>:
  stderr.53_168 = stderr;
  __builtin_fwrite ("Calling compareResults(original, omp).\n", 1, 39, stderr.53_168);

  <bb 32>:
  C.57_170 = C;
  nj.61_171 = nj;
  ni.62_172 = ni;
  compareResults (ni.62_172, nj.61_171, C.57_170, C_outputFromOMP_22);

  <bb 33>:
  stderr.53_174 = stderr;
  __builtin_fwrite ("Calling compareResults(original, cuda).\n", 1, 40, stderr.53_174);

  <bb 34>:
  C_outputFromGpu.63_176 = C_outputFromGpu;
  C.57_177 = C;
  nj.61_178 = nj;
  ni.62_179 = ni;
  compareResults (ni.62_179, nj.61_178, C.57_177, C_outputFromGpu.63_176);

  <bb 35>:
  if (argc_181(D) > 42)
    goto <bb 36>;
  else
    goto <bb 38>;

  <bb 36>:
  _183 = *argv_182(D);
  _184 = MEM[(const unsigned char * {ref-all})_183];
  if (_184 == 0)
    goto <bb 37>;
  else
    goto <bb 38>;

  <bb 37>:
  C_outputFromGpu.63_185 = C_outputFromGpu;
  nj.61_186 = nj;
  ni.62_187 = ni;
  print_array (ni.62_187, nj.61_186, C_outputFromGpu.63_185);

  <bb 38>:
  A.59_189 = A;
  free (A.59_189);
  B.58_191 = B;
  free (B.58_191);
  C.57_193 = C;
  free (C.57_193);
  free (C_outputFromOMP_22);
  C_outputFromGpu.63_196 = C_outputFromGpu;
  free (C_outputFromGpu.63_196);
  ni ={v} {CLOBBER};
  nj ={v} {CLOBBER};
  nk ={v} {CLOBBER};
  alpha ={v} {CLOBBER};
  beta ={v} {CLOBBER};
  A ={v} {CLOBBER};
  B ={v} {CLOBBER};
  C ={v} {CLOBBER};
  C_inputToGpu ={v} {CLOBBER};
  C_outputFromGpu ={v} {CLOBBER};
  return 0;

<L14>:
  ni ={v} {CLOBBER};
  nj ={v} {CLOBBER};
  nk ={v} {CLOBBER};
  alpha ={v} {CLOBBER};
  beta ={v} {CLOBBER};
  A ={v} {CLOBBER};
  B ={v} {CLOBBER};
  C ={v} {CLOBBER};
  C_inputToGpu ={v} {CLOBBER};
  C_outputFromGpu ={v} {CLOBBER};
  resx 1

}



;; Function void __device_stub__Z16gemm_cuda_kerneliiiddPdS_S_(int, int, int, double, double, double*, double*, double*) (_Z45__device_stub__Z16gemm_cuda_kerneliiiddPdS_S_iiiddPdS_S_, funcdef_no=3251, decl_uid=66803, cgraph_uid=3072)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
READONLY = &READONLY
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__par0 = &NONLOCAL
__par1 = &NONLOCAL
__par2 = &NONLOCAL
__par3 = &NONLOCAL
__par4 = &NONLOCAL
__par5 = &NONLOCAL
__par6 = &NONLOCAL
__par7 = &NONLOCAL
ESCAPED = &__par0
ESCAPED = &NONLOCAL
ESCAPED = &NULL
_4 = NONLOCAL
_5 = _4
ESCAPED = &__par1
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
_8 = NONLOCAL
_9 = _8
ESCAPED = &__par2
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
_12 = NONLOCAL
_13 = _12
ESCAPED = &__par3
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
_16 = NONLOCAL
_17 = _16
ESCAPED = &__par4
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
_20 = NONLOCAL
_21 = _20
ESCAPED = &__par5
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
_24 = NONLOCAL
_25 = _24
ESCAPED = &__par6
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
_28 = NONLOCAL
_29 = _28
ESCAPED = &__par7
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
_32 = NONLOCAL
_33 = _32
__f = NONLOCAL
__f = &_Z16gemm_cuda_kerneliiiddPdS_S_
ESCAPED = &_Z16gemm_cuda_kerneliiiddPdS_S_
ESCAPED = &_Z16gemm_cuda_kerneliiiddPdS_S_
_37 = NONLOCAL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"READONLY";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"__par0";
"__par1";
"__par2";
"__par3";
"__par4";
"__par5";
"__par6";
"__par7";
"cudaSetupArgument";
"_4";
"__f";
"_Z16gemm_cuda_kerneliiiddPdS_S_";
"cudaLaunch";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "__par0";
"STOREDANYTHING" -> "__par1";
"STOREDANYTHING" -> "__par2";
"STOREDANYTHING" -> "__par3";
"STOREDANYTHING" -> "__par4";
"STOREDANYTHING" -> "__par5";
"STOREDANYTHING" -> "__par6";
"STOREDANYTHING" -> "__par7";
"STOREDANYTHING" -> "_Z16gemm_cuda_kerneliiiddPdS_S_";
"_4" -> "__f";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"READONLY";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = _4\l"];
"STOREDANYTHING";
"INTEGER";
"__par0";
"__par1";
"__par2";
"__par3";
"__par4";
"__par5";
"__par6";
"__par7";
"cudaSetupArgument";
"_4";
"__f";
"_Z16gemm_cuda_kerneliiiddPdS_S_";
"cudaLaunch";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "__par0";
"STOREDANYTHING" -> "__par1";
"STOREDANYTHING" -> "__par2";
"STOREDANYTHING" -> "__par3";
"STOREDANYTHING" -> "__par4";
"STOREDANYTHING" -> "__par5";
"STOREDANYTHING" -> "__par6";
"STOREDANYTHING" -> "__par7";
"STOREDANYTHING" -> "_Z16gemm_cuda_kerneliiiddPdS_S_";
"__par0" -> "ESCAPED";
"__par1" -> "ESCAPED";
"__par2" -> "ESCAPED";
"__par3" -> "ESCAPED";
"__par4" -> "ESCAPED";
"__par5" -> "ESCAPED";
"__par6" -> "ESCAPED";
"__par7" -> "ESCAPED";
"_4" -> "ESCAPED";
"_4" -> "__par0";
"_4" -> "__par1";
"_4" -> "__par2";
"_4" -> "__par3";
"_4" -> "__par4";
"_4" -> "__par5";
"_4" -> "__par6";
"_4" -> "__par7";
"_4" -> "__f";
"_4" -> "_Z16gemm_cuda_kerneliiiddPdS_S_";
"_Z16gemm_cuda_kerneliiiddPdS_S_" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
READONLY = { READONLY }
ESCAPED = { NULL ESCAPED NONLOCAL __par0 __par1 __par2 __par3 __par4 __par5 __par6 __par7 _Z16gemm_cuda_kerneliiiddPdS_S_ }
NONLOCAL = { ESCAPED NONLOCAL } same as _4
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__par0 = { ESCAPED NONLOCAL }
__par1 = { ESCAPED NONLOCAL }
__par2 = { ESCAPED NONLOCAL }
__par3 = { ESCAPED NONLOCAL }
__par4 = { ESCAPED NONLOCAL }
__par5 = { ESCAPED NONLOCAL }
__par6 = { ESCAPED NONLOCAL }
__par7 = { ESCAPED NONLOCAL }
cudaSetupArgument = { }
_4 = { ESCAPED NONLOCAL }
_5 = { ESCAPED NONLOCAL } same as _4
_8 = { ESCAPED NONLOCAL } same as _4
_9 = { ESCAPED NONLOCAL } same as _4
_12 = { ESCAPED NONLOCAL } same as _4
_13 = { ESCAPED NONLOCAL } same as _4
_16 = { ESCAPED NONLOCAL } same as _4
_17 = { ESCAPED NONLOCAL } same as _4
_20 = { ESCAPED NONLOCAL } same as _4
_21 = { ESCAPED NONLOCAL } same as _4
_24 = { ESCAPED NONLOCAL } same as _4
_25 = { ESCAPED NONLOCAL } same as _4
_28 = { ESCAPED NONLOCAL } same as _4
_29 = { ESCAPED NONLOCAL } same as _4
_32 = { ESCAPED NONLOCAL } same as _4
_33 = { ESCAPED NONLOCAL } same as _4
__f = { ESCAPED NONLOCAL _Z16gemm_cuda_kerneliiiddPdS_S_ }
_Z16gemm_cuda_kerneliiiddPdS_S_ = { ESCAPED NONLOCAL }
cudaLaunch = { }
_37 = { ESCAPED NONLOCAL } same as _4


Alias information for void __device_stub__Z16gemm_cuda_kerneliiiddPdS_S_(int, int, int, double, double, double*, double*, double*)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.66807 D.66808 D.66809 D.66810 D.66811 D.66812 D.66813 D.66814 }

Flow-insensitive points-to information


void __device_stub__Z16gemm_cuda_kerneliiiddPdS_S_(int, int, int, double, double, double*, double*, double*) (int __par0, int __par1, int __par2, double __par3, double __par4, double * __par5, double * __par6, double * __par7)
{
  cudaError_t D.67505;
  static volatile char * __f;
  bool retval.81;
  bool retval.80;
  bool retval.79;
  bool retval.78;
  bool retval.77;
  bool retval.76;
  bool retval.75;
  bool retval.74;
  cudaError _4;
  cudaError _5;
  cudaError _8;
  cudaError _9;
  cudaError _12;
  cudaError _13;
  cudaError _16;
  cudaError _17;
  cudaError _20;
  cudaError _21;
  cudaError _24;
  cudaError _25;
  cudaError _28;
  cudaError _29;
  cudaError _32;
  cudaError _33;
  cudaError_t _37;

  <bb 2>:
  _4 = cudaSetupArgument (&__par0, 4, 0);
  _5 = _4;
  if (_5 != 0)
    goto <bb 11>;
  else
    goto <bb 3>;

  <bb 3>:
  _8 = cudaSetupArgument (&__par1, 4, 4);
  _9 = _8;
  if (_9 != 0)
    goto <bb 11>;
  else
    goto <bb 4>;

  <bb 4>:
  _12 = cudaSetupArgument (&__par2, 4, 8);
  _13 = _12;
  if (_13 != 0)
    goto <bb 11>;
  else
    goto <bb 5>;

  <bb 5>:
  _16 = cudaSetupArgument (&__par3, 8, 16);
  _17 = _16;
  if (_17 != 0)
    goto <bb 11>;
  else
    goto <bb 6>;

  <bb 6>:
  _20 = cudaSetupArgument (&__par4, 8, 24);
  _21 = _20;
  if (_21 != 0)
    goto <bb 11>;
  else
    goto <bb 7>;

  <bb 7>:
  _24 = cudaSetupArgument (&__par5, 8, 32);
  _25 = _24;
  if (_25 != 0)
    goto <bb 11>;
  else
    goto <bb 8>;

  <bb 8>:
  _28 = cudaSetupArgument (&__par6, 8, 40);
  _29 = _28;
  if (_29 != 0)
    goto <bb 11>;
  else
    goto <bb 9>;

  <bb 9>:
  _32 = cudaSetupArgument (&__par7, 8, 48);
  _33 = _32;
  if (_33 != 0)
    goto <bb 11>;
  else
    goto <bb 10>;

  <bb 10>:
  __f = gemm_cuda_kernel;
  _37 = cudaLaunch (gemm_cuda_kernel);

  <bb 11>:
  return;

}



;; Function void gemm_cuda_kernel(int, int, int, double, double, double*, double*, double*) (_Z16gemm_cuda_kerneliiiddPdS_S_, funcdef_no=3252, decl_uid=66200, cgraph_uid=3073)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
READONLY = &READONLY
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__cuda_0 = &NONLOCAL
__cuda_1 = &NONLOCAL
__cuda_2 = &NONLOCAL
__cuda_3 = &NONLOCAL
__cuda_4 = &NONLOCAL
__cuda_5 = &NONLOCAL
__cuda_6 = &NONLOCAL
__cuda_7 = &NONLOCAL
ESCAPED = __cuda_0
ESCAPED = __cuda_1
ESCAPED = __cuda_2
ESCAPED = __cuda_3
ESCAPED = __cuda_4
ESCAPED = __cuda_5
ESCAPED = __cuda_6
ESCAPED = __cuda_7

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"READONLY";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"__cuda_0";
"_Z45__device_stub__Z16gemm_cuda_kerneliiiddPdS_S_iiiddPdS_S_";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"__cuda_0" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"READONLY";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"__cuda_0";
"_Z45__device_stub__Z16gemm_cuda_kerneliiiddPdS_S_iiiddPdS_S_";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"STOREDANYTHING" -> "ESCAPED";
"__cuda_0" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
READONLY = { READONLY }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__cuda_0 = { NONLOCAL }
__cuda_1 = { NONLOCAL } same as __cuda_0
__cuda_2 = { NONLOCAL } same as __cuda_0
__cuda_3 = { NONLOCAL } same as __cuda_0
__cuda_4 = { NONLOCAL } same as __cuda_0
__cuda_5 = { NONLOCAL } same as __cuda_0
__cuda_6 = { NONLOCAL } same as __cuda_0
__cuda_7 = { NONLOCAL } same as __cuda_0
_Z45__device_stub__Z16gemm_cuda_kerneliiiddPdS_S_iiiddPdS_S_ = { }


Alias information for void gemm_cuda_kernel(int, int, int, double, double, double*, double*, double*)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

__cuda_5_7(D), points-to non-local, points-to vars: { }
__cuda_6_8(D), points-to non-local, points-to vars: { }
__cuda_7_9(D), points-to non-local, points-to vars: { }

void gemm_cuda_kernel(int, int, int, double, double, double*, double*, double*) (int __cuda_0, int __cuda_1, int __cuda_2, double __cuda_3, double __cuda_4, double * __cuda_5, double * __cuda_6, double * __cuda_7)
{
  <bb 2>:
  __device_stub__Z16gemm_cuda_kerneliiiddPdS_S_ (__cuda_0_2(D), __cuda_1_3(D), __cuda_2_4(D), __cuda_3_5(D), __cuda_4_6(D), __cuda_5_7(D), __cuda_6_8(D), __cuda_7_9(D));
  return;

}



;; Function void gemm_cuda(int, int, int, double, double, double (*)[4096], double (*)[4096], double (*)[4096], double (*)[4096], double (*)[4096]) (_Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_, funcdef_no=3217, decl_uid=66211, cgraph_uid=3039)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
READONLY = &READONLY
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
ni = &NONLOCAL
nj = &NONLOCAL
nk = &NONLOCAL
alpha = &NONLOCAL
beta = &NONLOCAL
A = &NONLOCAL
B = &NONLOCAL
C = &NONLOCAL
C_inputToGpu = &NONLOCAL
C_outputFromGpu = &NONLOCAL
stderr = NONLOCAL
stderr.44_4 = stderr
ESCAPED = &READONLY
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = stderr.44_4
ESCAPED = &A_gpu
ESCAPED = &NONLOCAL
ESCAPED = &B_gpu
ESCAPED = &NONLOCAL
ESCAPED = &C_gpu
ESCAPED = &NONLOCAL
data_transfer_h2d_start = NONLOCAL
ESCAPED = &data_transfer_h2d_start
A_gpu.45_15 = A_gpu
ESCAPED = A_gpu.45_15
ESCAPED = A
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
B_gpu.46_19 = B_gpu
ESCAPED = B_gpu.46_19
ESCAPED = B
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
C_gpu.47_23 = C_gpu
ESCAPED = C_gpu.47_23
ESCAPED = C_inputToGpu
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
data_transfer_h2d_stop = NONLOCAL
ESCAPED = &data_transfer_h2d_stop
block = &NONLOCAL
block = &NONLOCAL
block = &NONLOCAL
_28 = block
_29 = _28
_30 = &NONLOCAL
_30 = _29
_78 = _30
_78 = &NONLOCAL
_83 = _78
_31 = _83
_32 = _31
_33 = _32
_34 = block
_35 = _34
_36 = &NONLOCAL
_36 = _35
_79 = _36
_79 = &NONLOCAL
_84 = _79
_37 = _84
_38 = _37
_39 = _38
grid = _39
grid = _33
grid = &NONLOCAL
dev_kernel1_start = NONLOCAL
ESCAPED = &dev_kernel1_start
ESCAPED = grid
ESCAPED = block
ESCAPED = &NULL
ESCAPED = &NULL
_43 = NONLOCAL
_44 = _43
C_gpu.47_45 = C_gpu
B_gpu.46_46 = B_gpu
A_gpu.45_47 = A_gpu
ESCAPED = ni
ESCAPED = nj
ESCAPED = nk
ESCAPED = alpha
ESCAPED = beta
ESCAPED = A_gpu.45_47
ESCAPED = B_gpu.46_46
ESCAPED = C_gpu.47_45
dev_kernel1_stop = NONLOCAL
ESCAPED = &dev_kernel1_stop
data_transfer_d2h_start = NONLOCAL
ESCAPED = &data_transfer_d2h_start
C_gpu.47_58 = C_gpu
ESCAPED = C_outputFromGpu
ESCAPED = C_gpu.47_58
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
data_transfer_d2h_stop = NONLOCAL
ESCAPED = &data_transfer_d2h_stop
A_gpu.45_62 = A_gpu
ESCAPED = A_gpu.45_62
B_gpu.46_64 = B_gpu
ESCAPED = B_gpu.46_64
C_gpu.47_66 = C_gpu
ESCAPED = C_gpu.47_66

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"READONLY";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"ni";
"stderr";
"fwrite";
"_Z13GPU_argv_initv";
"cudaMalloc";
"_Z20hookomp_timing_startPm";
"data_transfer_h2d_start";
"A_gpu.45_15";
"cudaMemcpy";
"B_gpu.46_19";
"C_gpu.47_23";
"_Z19hookomp_timing_stopPm";
"data_transfer_h2d_stop";
"ceilf";
"dev_kernel1_start";
"cudaConfigureCall";
"_Z45__device_stub__Z16gemm_cuda_kerneliiiddPdS_S_iiiddPdS_S_";
"cudaThreadSynchronize";
"dev_kernel1_stop";
"data_transfer_d2h_start";
"data_transfer_d2h_stop";
"cudaFree";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "A_gpu.45_15";
"STOREDANYTHING" -> "B_gpu.46_19";
"STOREDANYTHING" -> "C_gpu.47_23";
"STOREDANYTHING" -> "data_transfer_h2d_start";
"STOREDANYTHING" -> "data_transfer_h2d_stop";
"STOREDANYTHING" -> "dev_kernel1_start";
"STOREDANYTHING" -> "dev_kernel1_stop";
"STOREDANYTHING" -> "data_transfer_d2h_start";
"STOREDANYTHING" -> "data_transfer_d2h_stop";
"ni" -> "ESCAPED";
"stderr" -> "ESCAPED";
"stderr" -> "data_transfer_h2d_start";
"stderr" -> "data_transfer_h2d_stop";
"stderr" -> "dev_kernel1_start";
"stderr" -> "dev_kernel1_stop";
"stderr" -> "data_transfer_d2h_start";
"stderr" -> "data_transfer_d2h_stop";
"A_gpu.45_15" -> "ESCAPED";
"B_gpu.46_19" -> "ESCAPED";
"C_gpu.47_23" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"READONLY";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = stderr\l"];
"STOREDANYTHING";
"INTEGER";
"ni";
"stderr";
"fwrite";
"_Z13GPU_argv_initv";
"cudaMalloc";
"_Z20hookomp_timing_startPm";
"data_transfer_h2d_start";
"A_gpu.45_15";
"cudaMemcpy";
"B_gpu.46_19";
"C_gpu.47_23";
"_Z19hookomp_timing_stopPm";
"data_transfer_h2d_stop";
"ceilf";
"dev_kernel1_start";
"cudaConfigureCall";
"_Z45__device_stub__Z16gemm_cuda_kerneliiiddPdS_S_iiiddPdS_S_";
"cudaThreadSynchronize";
"dev_kernel1_stop";
"data_transfer_d2h_start";
"data_transfer_d2h_stop";
"cudaFree";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "A_gpu.45_15";
"STOREDANYTHING" -> "B_gpu.46_19";
"STOREDANYTHING" -> "C_gpu.47_23";
"STOREDANYTHING" -> "data_transfer_h2d_start";
"STOREDANYTHING" -> "data_transfer_h2d_stop";
"STOREDANYTHING" -> "dev_kernel1_start";
"STOREDANYTHING" -> "dev_kernel1_stop";
"STOREDANYTHING" -> "data_transfer_d2h_start";
"STOREDANYTHING" -> "data_transfer_d2h_stop";
"ni" -> "ESCAPED";
"stderr" -> "ESCAPED";
"stderr" -> "data_transfer_h2d_start";
"stderr" -> "A_gpu.45_15";
"stderr" -> "B_gpu.46_19";
"stderr" -> "C_gpu.47_23";
"stderr" -> "data_transfer_h2d_stop";
"stderr" -> "dev_kernel1_start";
"stderr" -> "dev_kernel1_stop";
"stderr" -> "data_transfer_d2h_start";
"stderr" -> "data_transfer_d2h_stop";
"data_transfer_h2d_start" -> "ESCAPED";
"A_gpu.45_15" -> "ESCAPED";
"B_gpu.46_19" -> "ESCAPED";
"C_gpu.47_23" -> "ESCAPED";
"data_transfer_h2d_stop" -> "ESCAPED";
"dev_kernel1_start" -> "ESCAPED";
"dev_kernel1_stop" -> "ESCAPED";
"data_transfer_d2h_start" -> "ESCAPED";
"data_transfer_d2h_stop" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
READONLY = { READONLY }
ESCAPED = { NULL READONLY ESCAPED NONLOCAL A_gpu B_gpu C_gpu data_transfer_h2d_start data_transfer_h2d_stop dev_kernel1_start dev_kernel1_stop data_transfer_d2h_start data_transfer_d2h_stop }
NONLOCAL = { ESCAPED NONLOCAL } same as stderr
STOREDANYTHING = { }
INTEGER = { ANYTHING }
ni = { NONLOCAL }
nj = { NONLOCAL } same as ni
nk = { NONLOCAL } same as ni
alpha = { NONLOCAL } same as ni
beta = { NONLOCAL } same as ni
A = { NONLOCAL } same as ni
B = { NONLOCAL } same as ni
C = { NONLOCAL } same as ni
C_inputToGpu = { NONLOCAL } same as ni
C_outputFromGpu = { NONLOCAL } same as ni
stderr.44_4 = { ESCAPED NONLOCAL } same as stderr
stderr = { ESCAPED NONLOCAL }
fwrite = { }
_Z13GPU_argv_initv = { }
cudaMalloc = { }
A_gpu = { ESCAPED NONLOCAL } same as A_gpu.45_15
B_gpu = { ESCAPED NONLOCAL } same as B_gpu.46_19
C_gpu = { ESCAPED NONLOCAL } same as C_gpu.47_23
_Z20hookomp_timing_startPm = { }
data_transfer_h2d_start = { ESCAPED NONLOCAL }
A_gpu.45_15 = { ESCAPED NONLOCAL }
cudaMemcpy = { }
B_gpu.46_19 = { ESCAPED NONLOCAL }
C_gpu.47_23 = { ESCAPED NONLOCAL }
_Z19hookomp_timing_stopPm = { }
data_transfer_h2d_stop = { ESCAPED NONLOCAL }
block = { NONLOCAL } same as ni
_28 = { NONLOCAL } same as ni
_29 = { NONLOCAL } same as ni
_30 = { NONLOCAL } same as ni
ceilf = { }
_78 = { NONLOCAL } same as ni
_83 = { NONLOCAL } same as ni
_31 = { NONLOCAL } same as ni
_32 = { NONLOCAL } same as ni
_33 = { NONLOCAL } same as ni
_34 = { NONLOCAL } same as ni
_35 = { NONLOCAL } same as ni
_36 = { NONLOCAL } same as ni
_79 = { NONLOCAL } same as ni
_84 = { NONLOCAL } same as ni
_37 = { NONLOCAL } same as ni
_38 = { NONLOCAL } same as ni
_39 = { NONLOCAL } same as ni
grid = { NONLOCAL } same as ni
dev_kernel1_start = { ESCAPED NONLOCAL }
cudaConfigureCall = { }
_43 = { ESCAPED NONLOCAL } same as stderr
_44 = { ESCAPED NONLOCAL } same as stderr
C_gpu.47_45 = { ESCAPED NONLOCAL } same as C_gpu.47_23
B_gpu.46_46 = { ESCAPED NONLOCAL } same as B_gpu.46_19
A_gpu.45_47 = { ESCAPED NONLOCAL } same as A_gpu.45_15
_Z45__device_stub__Z16gemm_cuda_kerneliiiddPdS_S_iiiddPdS_S_ = { }
cudaThreadSynchronize = { }
dev_kernel1_stop = { ESCAPED NONLOCAL }
data_transfer_d2h_start = { ESCAPED NONLOCAL }
C_gpu.47_58 = { ESCAPED NONLOCAL } same as C_gpu.47_23
data_transfer_d2h_stop = { ESCAPED NONLOCAL }
A_gpu.45_62 = { ESCAPED NONLOCAL } same as A_gpu.45_15
cudaFree = { }
B_gpu.46_64 = { ESCAPED NONLOCAL } same as B_gpu.46_19
C_gpu.47_66 = { ESCAPED NONLOCAL } same as C_gpu.47_23


Alias information for void gemm_cuda(int, int, int, double, double, double (*)[4096], double (*)[4096], double (*)[4096], double (*)[4096], double (*)[4096])

Aliased symbols

C_gpu, UID D.66215, double *, is addressable
B_gpu, UID D.66214, double *, is addressable
A_gpu, UID D.66213, double *, is addressable

Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.65503 D.65504 D.65509 D.65510 D.65511 D.65512 D.66213 D.66214 D.66215 } (includes global vars)

Flow-insensitive points-to information

stderr.44_4, points-to non-local, points-to escaped, points-to vars: { }
A_gpu.45_15, points-to non-local, points-to escaped, points-to vars: { }
A_16(D), points-to non-local, points-to vars: { }
B_gpu.46_19, points-to non-local, points-to escaped, points-to vars: { }
B_20(D), points-to non-local, points-to vars: { }
C_gpu.47_23, points-to non-local, points-to escaped, points-to vars: { }
C_inputToGpu_24(D), points-to non-local, points-to vars: { }
C_gpu.47_45, points-to non-local, points-to escaped, points-to vars: { }
B_gpu.46_46, points-to non-local, points-to escaped, points-to vars: { }
A_gpu.45_47, points-to non-local, points-to escaped, points-to vars: { }
C_gpu.47_58, points-to non-local, points-to escaped, points-to vars: { }
C_outputFromGpu_59(D), points-to non-local, points-to vars: { }
A_gpu.45_62, points-to non-local, points-to escaped, points-to vars: { }
B_gpu.46_64, points-to non-local, points-to escaped, points-to vars: { }
C_gpu.47_66, points-to non-local, points-to escaped, points-to vars: { }

void gemm_cuda(int, int, int, double, double, double (*)[4096], double (*)[4096], double (*)[4096], double (*)[4096], double (*)[4096]) (int ni, int nj, int nk, double alpha, double beta, double[4096] * A, double[4096] * B, double[4096] * C, double[4096] * C_inputToGpu, double[4096] * C_outputFromGpu)
{
  float D.67517;
  float D.67515;
  struct dim3 grid;
  struct dim3 block;
  double * C_gpu;
  double * B_gpu;
  double * A_gpu;
  double * C_gpu.47;
  double * B_gpu.46;
  double * A_gpu.45;
  struct _IO_FILE * stderr.44;
  unsigned int _28;
  float _29;
  float _30;
  float _31;
  long unsigned int _32;
  unsigned int _33;
  unsigned int _34;
  float _35;
  float _36;
  float _37;
  long unsigned int _38;
  unsigned int _39;
  cudaError _43;
  cudaError _44;
  float _78;
  float _79;

  <bb 2>:
  stderr.44_4 = stderr;
  __builtin_fwrite ("Calling function gemm_cuda.\n", 1, 28, stderr.44_4);

  <bb 3>:
  GPU_argv_init ();

  <bb 4>:
  cudaMalloc (&A_gpu, 134217728);

  <bb 5>:
  cudaMalloc (&B_gpu, 134217728);

  <bb 6>:
  cudaMalloc (&C_gpu, 134217728);

  <bb 7>:
  hookomp_timing_start (&data_transfer_h2d_start);
  A_gpu.45_15 = A_gpu;
  cudaMemcpy (A_gpu.45_15, A_16(D), 134217728, 1);

  <bb 8>:
  B_gpu.46_19 = B_gpu;
  cudaMemcpy (B_gpu.46_19, B_20(D), 134217728, 1);

  <bb 9>:
  C_gpu.47_23 = C_gpu;
  cudaMemcpy (C_gpu.47_23, C_inputToGpu_24(D), 134217728, 1);

  <bb 10>:
  hookomp_timing_stop (&data_transfer_h2d_stop);
  block.x = 32;
  block.y = 8;
  block.z = 1;
  _28 = block.y;
  _29 = (float) _28;
  _30 = 4.096e+3 / _29;
  _78 = __builtin_ceilf (_30);
  _83 = _78;
  _31 = _83;
  _32 = (long unsigned int) _31;
  _33 = (unsigned int) _32;
  _34 = block.x;
  _35 = (float) _34;
  _36 = 4.096e+3 / _35;
  _79 = __builtin_ceilf (_36);
  _84 = _79;
  _37 = _84;
  _38 = (long unsigned int) _37;
  _39 = (unsigned int) _38;
  grid.x = _39;
  grid.y = _33;
  grid.z = 1;
  hookomp_timing_start (&dev_kernel1_start);
  _43 = cudaConfigureCall (grid, block, 0, 0B);

  <bb 11>:
  _44 = _43;
  if (_44 == 0)
    goto <bb 12>;
  else
    goto <bb 13>;

  <bb 12>:
  C_gpu.47_45 = C_gpu;
  B_gpu.46_46 = B_gpu;
  A_gpu.45_47 = A_gpu;
  __device_stub__Z16gemm_cuda_kerneliiiddPdS_S_ (ni_48(D), nj_49(D), nk_50(D), alpha_51(D), beta_52(D), A_gpu.45_47, B_gpu.46_46, C_gpu.47_45);

  <bb 13>:
  cudaThreadSynchronize ();

  <bb 14>:
  hookomp_timing_stop (&dev_kernel1_stop);
  hookomp_timing_start (&data_transfer_d2h_start);
  C_gpu.47_58 = C_gpu;
  cudaMemcpy (C_outputFromGpu_59(D), C_gpu.47_58, 134217728, 2);

  <bb 15>:
  hookomp_timing_stop (&data_transfer_d2h_stop);
  A_gpu.45_62 = A_gpu;
  cudaFree (A_gpu.45_62);

  <bb 16>:
  B_gpu.46_64 = B_gpu;
  cudaFree (B_gpu.46_64);

  <bb 17>:
  C_gpu.47_66 = C_gpu;
  cudaFree (C_gpu.47_66);

  <bb 18>:
  A_gpu ={v} {CLOBBER};
  B_gpu ={v} {CLOBBER};
  C_gpu ={v} {CLOBBER};
  block ={v} {CLOBBER};
  grid ={v} {CLOBBER};
  return;

<L3>:
  A_gpu ={v} {CLOBBER};
  B_gpu ={v} {CLOBBER};
  C_gpu ={v} {CLOBBER};
  block ={v} {CLOBBER};
  grid ={v} {CLOBBER};
  resx 1

}



;; Function void __sti____cudaRegisterAll_39_tmpxft_000005b1_00000000_7_gemm_cpp1_ii_132e4611() (_ZL76__sti____cudaRegisterAll_39_tmpxft_000005b1_00000000_7_gemm_cpp1_ii_132e4611v, funcdef_no=3254, decl_uid=66806, cgraph_uid=3075)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
READONLY = &READONLY
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__fatDeviceText.0+64 = NONLOCAL
__fatDeviceText.64+64 = NONLOCAL
__fatDeviceText.128+64 = NONLOCAL
ESCAPED = &__fatDeviceText.0+64
_3 = NONLOCAL
__cudaFatCubinHandle.82_4 = _3
__cudaFatCubinHandle = NONLOCAL
__cudaFatCubinHandle = __cudaFatCubinHandle.82_4
ESCAPED = __cudaFatCubinHandle.82_4
__cudaFatCubinHandle.83_7 = __cudaFatCubinHandle
ESCAPED = __cudaFatCubinHandle.83_7
ESCAPED = &_ZL26__cudaUnregisterBinaryUtilv

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"READONLY";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"__cudaRegisterFatBinary";
"__fatDeviceText.0+64";
"__fatDeviceText.64+64";
"__fatDeviceText.128+64";
"_3";
"_ZL31__nv_cudaEntityRegisterCallbackPPv";
"atexit";
"_ZL26__cudaUnregisterBinaryUtilv";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "__fatDeviceText.0+64";
"STOREDANYTHING" -> "__fatDeviceText.64+64";
"STOREDANYTHING" -> "__fatDeviceText.128+64";
"STOREDANYTHING" -> "_ZL26__cudaUnregisterBinaryUtilv";
"_3" -> "ESCAPED";
"_3" -> "__fatDeviceText.0+64";
"_3" -> "__fatDeviceText.64+64";
"_3" -> "__fatDeviceText.128+64";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"READONLY";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = _3\l"];
"STOREDANYTHING";
"INTEGER";
"__cudaRegisterFatBinary";
"__fatDeviceText.0+64";
"__fatDeviceText.64+64";
"__fatDeviceText.128+64";
"_3";
"_ZL31__nv_cudaEntityRegisterCallbackPPv";
"atexit";
"_ZL26__cudaUnregisterBinaryUtilv";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "__fatDeviceText.0+64";
"STOREDANYTHING" -> "__fatDeviceText.64+64";
"STOREDANYTHING" -> "__fatDeviceText.128+64";
"STOREDANYTHING" -> "_ZL26__cudaUnregisterBinaryUtilv";
"__fatDeviceText.0+64" -> "ESCAPED";
"__fatDeviceText.64+64" -> "ESCAPED";
"__fatDeviceText.128+64" -> "ESCAPED";
"_3" -> "ESCAPED";
"_3" -> "__fatDeviceText.0+64";
"_3" -> "__fatDeviceText.64+64";
"_3" -> "__fatDeviceText.128+64";
"_3" -> "_ZL26__cudaUnregisterBinaryUtilv";
"_ZL26__cudaUnregisterBinaryUtilv" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
READONLY = { READONLY }
ESCAPED = { ESCAPED NONLOCAL __fatDeviceText.0+64 __fatDeviceText.64+64 __fatDeviceText.128+64 _ZL26__cudaUnregisterBinaryUtilv }
NONLOCAL = { ESCAPED NONLOCAL } same as _3
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__cudaRegisterFatBinary = { }
__fatDeviceText.0+64 = { ESCAPED NONLOCAL }
__fatDeviceText.64+64 = { ESCAPED NONLOCAL }
__fatDeviceText.128+64 = { ESCAPED NONLOCAL }
_3 = { ESCAPED NONLOCAL }
__cudaFatCubinHandle.82_4 = { ESCAPED NONLOCAL } same as _3
__cudaFatCubinHandle = { ESCAPED NONLOCAL } same as _3
__cudaFatCubinHandle.83_7 = { ESCAPED NONLOCAL } same as _3
_ZL31__nv_cudaEntityRegisterCallbackPPv = { }
atexit = { }
_ZL26__cudaUnregisterBinaryUtilv = { ESCAPED NONLOCAL }


Alias information for void __sti____cudaRegisterAll_39_tmpxft_000005b1_00000000_7_gemm_cpp1_ii_132e4611()

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { D.66794 } (includes global vars)

Flow-insensitive points-to information

_3, points-to non-local, points-to escaped, points-to vars: { }
__cudaFatCubinHandle.82_4, points-to non-local, points-to escaped, points-to vars: { }
__cudaFatCubinHandle.83_7, points-to non-local, points-to escaped, points-to vars: { }

void __sti____cudaRegisterAll_39_tmpxft_000005b1_00000000_7_gemm_cpp1_ii_132e4611() ()
{
  void (*<T73ba>) (void * *) callback_fp;
  void * * __cudaFatCubinHandle.83;
  void * * __cudaFatCubinHandle.82;
  void * * _3;

  <bb 2>:
  _3 = __cudaRegisterFatBinary (&__fatDeviceText);
  __cudaFatCubinHandle.82_4 = _3;
  __cudaFatCubinHandle = __cudaFatCubinHandle.82_4;
  __cudaFatCubinHandle.83_7 = __cudaFatCubinHandle;
  __nv_cudaEntityRegisterCallback (__cudaFatCubinHandle.83_7);
  atexit (__cudaUnregisterBinaryUtil);
  return;

}



;; Function <built-in> (_Z15gemm_omp_kerneliiiddPA4096_dS0_S0_._omp_fn.0, funcdef_no=3256, decl_uid=67054, cgraph_uid=3087)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
READONLY = &READONLY
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
.omp_data_i = &NONLOCAL
current_loop_index = NONLOCAL
current_loop_index = &NULL
ESCAPED = &NULL
num_threads_defined = NONLOCAL
num_threads_defined = &NONLOCAL
ESCAPED = &NONLOCAL
q_data_transfer_write = NONLOCAL
q_data_transfer_write = &NONLOCAL
ESCAPED = &NONLOCAL
q_data_transfer_read = NONLOCAL
q_data_transfer_read = &NONLOCAL
ESCAPED = &NONLOCAL
type_of_data_allocation = NONLOCAL
type_of_data_allocation = &NONLOCAL
ESCAPED = &NONLOCAL
_22 = *.omp_data_i + 320
_23 = _22
ESCAPED = &NULL
ESCAPED = _23
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &.istart0.110
ESCAPED = &.iend0.111
_25 = NONLOCAL
.istart0.112_26 = .istart0.110
i_27 = .istart0.112_26
.iend0.113_28 = .iend0.111
_29 = .iend0.113_28
i_1 = i_27
i_1 = i_32
j_30 = &NULL
j_2 = &NULL
j_2 = j_49
_31 = *.omp_data_i + 352
i_32 = i_1
i_32 = &NONLOCAL
ESCAPED = &.istart0.110
ESCAPED = &.iend0.111
_34 = NONLOCAL
_39 = i_1
_40 = _39
_40 = &NONLOCAL
_41 = *.omp_data_i + 256
_42 = _41 + UNKNOWN
_43 = *_42 + UNKNOWN
_44 = *.omp_data_i + 64
_45 = _43
_45 = _44
*_42 + UNKNOWN = _45
k_47 = &NULL
k_3 = &NULL
k_3 = k_74
_48 = *.omp_data_i + 384
j_49 = j_2
j_49 = &NONLOCAL
_54 = i_1
_55 = _54
_55 = &NONLOCAL
_56 = *.omp_data_i + 256
_57 = _56 + UNKNOWN
_58 = *_57 + UNKNOWN
_59 = i_1
_60 = _59
_60 = &NONLOCAL
_61 = *.omp_data_i + 128
_62 = _61 + UNKNOWN
_63 = *_62 + UNKNOWN
_64 = *.omp_data_i
_65 = _63
_65 = _64
_66 = k_3
_67 = _66
_67 = &NONLOCAL
_68 = *.omp_data_i + 192
_69 = _68 + UNKNOWN
_70 = *_69 + UNKNOWN
_71 = _65
_71 = _70
_72 = _58
_72 = _71
*_57 + UNKNOWN = _72
k_74 = k_3
k_74 = &NONLOCAL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"READONLY";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
".omp_data_i" [label="\N\n_22 = *.omp_data_i + 320\l_31 = *.omp_data_i + 352\l_41 = *.omp_data_i + 256\l_44 = *.omp_data_i + 64\l_48 = *.omp_data_i + 384\l_56 = *.omp_data_i + 256\l_61 = *.omp_data_i + 128\l_64 = *.omp_data_i\l_68 = *.omp_data_i + 192\l"];
"current_loop_index";
"num_threads_defined";
"_22";
"GOMP_loop_dynamic_start";
".istart0.112_26";
".iend0.113_28";
"i_1";
"j_30";
"j_2";
"_31";
"GOMP_loop_dynamic_next";
"_41" [label="\N\n_42 = _41 + UNKNOWN\l"];
"_42" [label="\N\n_43 = *_42 + UNKNOWN\l*_42 + UNKNOWN = _45\l"];
"_43";
"_44";
"_45";
"_48";
"_56" [label="\N\n_57 = _56 + UNKNOWN\l"];
"_57" [label="\N\n_58 = *_57 + UNKNOWN\l*_57 + UNKNOWN = _72\l"];
"_58";
"_61" [label="\N\n_62 = _61 + UNKNOWN\l"];
"_62" [label="\N\n_63 = *_62 + UNKNOWN\l"];
"_63";
"_64";
"_65";
"_68" [label="\N\n_69 = _68 + UNKNOWN\l"];
"_69" [label="\N\n_70 = *_69 + UNKNOWN\l"];
"_70";
"_71";
"_72";
"GOMP_loop_end_nowait";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_22";
"STOREDANYTHING" -> ".istart0.112_26";
"STOREDANYTHING" -> ".iend0.113_28";
"STOREDANYTHING" -> "_31";
"STOREDANYTHING" -> "_41";
"STOREDANYTHING" -> "_42";
"STOREDANYTHING" -> "_43";
"STOREDANYTHING" -> "_44";
"STOREDANYTHING" -> "_48";
"STOREDANYTHING" -> "_56";
"STOREDANYTHING" -> "_57";
"STOREDANYTHING" -> "_58";
"STOREDANYTHING" -> "_61";
"STOREDANYTHING" -> "_62";
"STOREDANYTHING" -> "_63";
"STOREDANYTHING" -> "_68";
"STOREDANYTHING" -> "_69";
"STOREDANYTHING" -> "_70";
"num_threads_defined" -> "current_loop_index";
"_22" -> "ESCAPED";
".istart0.112_26" -> "i_1";
"_43" -> "_45";
"_44" -> "_45";
"_58" -> "_72";
"_63" -> "_65";
"_64" -> "_65";
"_65" -> "_71";
"_70" -> "_71";
"_71" -> "_72";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"READONLY";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = num_threads_defined\l"];
"STOREDANYTHING";
"INTEGER";
".omp_data_i" [label="\N\n_22 = *.omp_data_i + 320\l_31 = *.omp_data_i + 352\l_41 = *.omp_data_i + 256\l_44 = *.omp_data_i + 64\l_48 = *.omp_data_i + 384\l_56 = *.omp_data_i + 256\l_61 = *.omp_data_i + 128\l_64 = *.omp_data_i\l_68 = *.omp_data_i + 192\l"];
"current_loop_index";
"num_threads_defined";
"_22";
"GOMP_loop_dynamic_start";
".istart0.112_26";
".iend0.113_28";
"i_1";
"j_30";
"j_2";
"_31";
"GOMP_loop_dynamic_next";
"_41" [label="\N\n_42 = _41 + UNKNOWN\l"];
"_42" [label="\N\n_43 = *_42 + UNKNOWN\l*_42 + UNKNOWN = _45\l"];
"_43";
"_44";
"_45";
"_48";
"_56" [label="\N\n_57 = _56 + UNKNOWN\l"];
"_57" [label="\N\n_58 = *_57 + UNKNOWN\l*_57 + UNKNOWN = _72\l"];
"_58";
"_61" [label="\N\n_62 = _61 + UNKNOWN\l"];
"_62" [label="\N\n_63 = *_62 + UNKNOWN\l"];
"_63";
"_64";
"_65";
"_68" [label="\N\n_69 = _68 + UNKNOWN\l"];
"_69" [label="\N\n_70 = *_69 + UNKNOWN\l"];
"_70";
"_71";
"_72";
"GOMP_loop_end_nowait";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_22";
"STOREDANYTHING" -> ".istart0.112_26";
"STOREDANYTHING" -> ".iend0.113_28";
"STOREDANYTHING" -> "_31";
"STOREDANYTHING" -> "_41";
"STOREDANYTHING" -> "_42";
"STOREDANYTHING" -> "_43";
"STOREDANYTHING" -> "_44";
"STOREDANYTHING" -> "_48";
"STOREDANYTHING" -> "_56";
"STOREDANYTHING" -> "_57";
"STOREDANYTHING" -> "_58";
"STOREDANYTHING" -> "_61";
"STOREDANYTHING" -> "_62";
"STOREDANYTHING" -> "_63";
"STOREDANYTHING" -> "_68";
"STOREDANYTHING" -> "_69";
"STOREDANYTHING" -> "_70";
"num_threads_defined" -> "ESCAPED";
"num_threads_defined" -> "current_loop_index";
"num_threads_defined" -> "_22";
"num_threads_defined" -> ".istart0.112_26";
"num_threads_defined" -> ".iend0.113_28";
"num_threads_defined" -> "_31";
"num_threads_defined" -> "_41";
"num_threads_defined" -> "_43";
"num_threads_defined" -> "_44";
"num_threads_defined" -> "_48";
"num_threads_defined" -> "_56";
"num_threads_defined" -> "_58";
"num_threads_defined" -> "_61";
"num_threads_defined" -> "_63";
"num_threads_defined" -> "_64";
"num_threads_defined" -> "_68";
"num_threads_defined" -> "_70";
"_22" -> "ESCAPED";
".istart0.112_26" -> "ESCAPED";
".istart0.112_26" -> "i_1";
".iend0.113_28" -> "ESCAPED";
"_43" -> "_45";
"_44" -> "_45";
"_45" -> "ESCAPED";
"_58" -> "_72";
"_63" -> "_65";
"_64" -> "_65";
"_65" -> "_71";
"_70" -> "_71";
"_71" -> "_72";
"_72" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
READONLY = { READONLY }
ESCAPED = { NULL ESCAPED NONLOCAL .istart0.110 .iend0.111 }
NONLOCAL = { ESCAPED NONLOCAL } same as num_threads_defined
STOREDANYTHING = { }
INTEGER = { ANYTHING }
.omp_data_i = { NONLOCAL }
current_loop_index = { NULL ESCAPED NONLOCAL }
num_threads_defined = { ESCAPED NONLOCAL }
q_data_transfer_write = { ESCAPED NONLOCAL } same as num_threads_defined
q_data_transfer_read = { ESCAPED NONLOCAL } same as num_threads_defined
type_of_data_allocation = { ESCAPED NONLOCAL } same as num_threads_defined
_22 = { ESCAPED NONLOCAL }
_23 = { ESCAPED NONLOCAL } same as _22
GOMP_loop_dynamic_start = { }
.istart0.110 = { ESCAPED NONLOCAL } same as .istart0.112_26
.iend0.111 = { ESCAPED NONLOCAL } same as .iend0.113_28
_25 = { ESCAPED NONLOCAL } same as num_threads_defined
.istart0.112_26 = { ESCAPED NONLOCAL }
i_27 = { ESCAPED NONLOCAL } same as .istart0.112_26
.iend0.113_28 = { ESCAPED NONLOCAL }
_29 = { ESCAPED NONLOCAL } same as .iend0.113_28
i_1 = { ESCAPED NONLOCAL }
i_32 = { ESCAPED NONLOCAL } same as i_1
j_30 = { NULL }
j_2 = { NULL NONLOCAL }
j_49 = { NULL NONLOCAL } same as j_2
_31 = { ESCAPED NONLOCAL }
GOMP_loop_dynamic_next = { }
_34 = { ESCAPED NONLOCAL } same as num_threads_defined
_39 = { ESCAPED NONLOCAL } same as i_1
_40 = { ESCAPED NONLOCAL } same as i_1
_41 = { ESCAPED NONLOCAL }
_42 = { ESCAPED NONLOCAL }
_43 = { ESCAPED NONLOCAL }
_44 = { ESCAPED NONLOCAL }
_45 = { ESCAPED NONLOCAL }
k_47 = { NULL } same as j_30
k_3 = { NULL NONLOCAL } same as j_2
k_74 = { NULL NONLOCAL } same as j_2
_48 = { ESCAPED NONLOCAL }
_54 = { ESCAPED NONLOCAL } same as i_1
_55 = { ESCAPED NONLOCAL } same as i_1
_56 = { ESCAPED NONLOCAL }
_57 = { ESCAPED NONLOCAL }
_58 = { ESCAPED NONLOCAL }
_59 = { ESCAPED NONLOCAL } same as i_1
_60 = { ESCAPED NONLOCAL } same as i_1
_61 = { ESCAPED NONLOCAL }
_62 = { ESCAPED NONLOCAL }
_63 = { ESCAPED NONLOCAL }
_64 = { ESCAPED NONLOCAL }
_65 = { ESCAPED NONLOCAL }
_66 = { NULL NONLOCAL } same as j_2
_67 = { NULL NONLOCAL } same as j_2
_68 = { ESCAPED NONLOCAL }
_69 = { ESCAPED NONLOCAL }
_70 = { ESCAPED NONLOCAL }
_71 = { ESCAPED NONLOCAL }
_72 = { ESCAPED NONLOCAL }
GOMP_loop_end_nowait = { }


Alias information for <built-in>

Aliased symbols

.iend0.111, UID D.67396, long int, is addressable
.istart0.110, UID D.67395, long int, is addressable

Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.67395 D.67396 }

Flow-insensitive points-to information

.omp_data_i_21(D), points-to non-local, points-to vars: { }
_41, points-to non-local, points-to escaped, points-to vars: { }
_42, points-to non-local, points-to escaped, points-to vars: { }
_56, points-to non-local, points-to escaped, points-to vars: { }
_57, points-to non-local, points-to escaped, points-to vars: { }
_61, points-to non-local, points-to escaped, points-to vars: { }
_62, points-to non-local, points-to escaped, points-to vars: { }
_68, points-to non-local, points-to escaped, points-to vars: { }
_69, points-to non-local, points-to escaped, points-to vars: { }

<built-in> (struct .omp_data_s.41 * .omp_data_i)
{
  int k;
  int j;
  long int .iend0.113;
  int i;
  long int .istart0.112;
  long int .iend0.111;
  long int .istart0.110;
  long long int q_data_transfer_read.40;
  long long int q_data_transfer_write.39;
  int _22;
  long int _23;
  bool _25;
  int _29;
  int _31;
  bool _34;
  long unsigned int _39;
  long unsigned int _40;
  double[4096] * _41;
  double[4096] * _42;
  double _43;
  double _44;
  double _45;
  int _48;
  long unsigned int _54;
  long unsigned int _55;
  double[4096] * _56;
  double[4096] * _57;
  double _58;
  long unsigned int _59;
  long unsigned int _60;
  double[4096] * _61;
  double[4096] * _62;
  double _63;
  double _64;
  double _65;
  long unsigned int _66;
  long unsigned int _67;
  double[4096] * _68;
  double[4096] * _69;
  double _70;
  double _71;
  double _72;

  <bb 2>:
  current_loop_index = 0;
  num_threads_defined = 8;
  q_data_transfer_write = 402653184;
  q_data_transfer_read = 134217728;
  type_of_data_allocation = 1;
  _22 = .omp_data_i_21(D)->ni;
  _23 = (long int) _22;
  _25 = __builtin_GOMP_loop_dynamic_start (0, _23, 1, 64, &.istart0.110, &.iend0.111);
  if (_25 != 0)
    goto <bb 3>;
  else
    goto <bb 12>;

  <bb 3>:
  .istart0.112_26 = .istart0.110;
  i_27 = (int) .istart0.112_26;
  .iend0.113_28 = .iend0.111;
  _29 = (int) .iend0.113_28;

  <bb 4>:
  # i_1 = PHI <i_27(3), i_32(6)>
  j_30 = 0;

  <bb 5>:
  # j_2 = PHI <0(4), j_49(10)>
  _31 = .omp_data_i_21(D)->nj;
  if (j_2 < _31)
    goto <bb 8>;
  else
    goto <bb 6>;

  <bb 6>:
  i_32 = i_1 + 1;
  if (i_32 < _29)
    goto <bb 4>;
  else
    goto <bb 7>;

  <bb 7>:
  _34 = __builtin_GOMP_loop_dynamic_next (&.istart0.110, &.iend0.111);
  if (_34 != 0)
    goto <bb 3>;
  else
    goto <bb 12>;

  <bb 8>:
  _39 = (long unsigned int) i_1;
  _40 = _39 * 32768;
  _41 = .omp_data_i_21(D)->C;
  _42 = _41 + _40;
  _43 = *_42[j_2];
  _44 = .omp_data_i_21(D)->beta;
  _45 = _43 * _44;
  *_42[j_2] = _45;
  k_47 = 0;

  <bb 9>:
  # k_3 = PHI <0(8), k_74(11)>
  _48 = .omp_data_i_21(D)->nk;
  if (k_3 < _48)
    goto <bb 11>;
  else
    goto <bb 10>;

  <bb 10>:
  j_49 = j_2 + 1;
  goto <bb 5>;

  <bb 11>:
  _54 = (long unsigned int) i_1;
  _55 = _54 * 32768;
  _56 = .omp_data_i_21(D)->C;
  _57 = _56 + _55;
  _58 = *_57[j_2];
  _59 = (long unsigned int) i_1;
  _60 = _59 * 32768;
  _61 = .omp_data_i_21(D)->A;
  _62 = _61 + _60;
  _63 = *_62[k_3];
  _64 = .omp_data_i_21(D)->alpha;
  _65 = _63 * _64;
  _66 = (long unsigned int) k_3;
  _67 = _66 * 32768;
  _68 = .omp_data_i_21(D)->B;
  _69 = _68 + _67;
  _70 = *_69[j_2];
  _71 = _65 * _70;
  _72 = _58 + _71;
  *_57[j_2] = _72;
  k_74 = k_3 + 1;
  goto <bb 9>;

  <bb 12>:
  __builtin_GOMP_loop_end_nowait ();
  return;

}


