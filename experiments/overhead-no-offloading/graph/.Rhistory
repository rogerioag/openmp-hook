library(plyr)
library(ggplot2)
library(scales) # to access break formatting functions
library(pdf)
# Multiple plot function
#
# ggplot objects can be passed in ..., or to plotlist (as a list of ggplot objects)
# - cols:   Number of columns in layout
# - layout: A matrix specifying the layout. If present, 'cols' is ignored.
#
# If the layout is something like matrix(c(1,2,3,3), nrow=2, byrow=TRUE),
# then plot 1 will go in the upper left, 2 will go in the upper right, and
# 3 will go all the way across the bottom.
#
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
# Insert rows in data frame.
# Usage:
# r <- nrow(existingDF) + 1
# newrow <- c(2,3,4,5)
# insertRow(existingDF, newrow, r)
# insertRow(existingDF, c(9,6,3,1), 1)
insertRow <- function(existingDF, newrow, r) {
existingDF[seq(r+1,nrow(existingDF)+1),] <- existingDF[seq(r,nrow(existingDF)),]
existingDF[r,] <- newrow
existingDF
}
setwd("/dados/rogerio/USP/doutorado/prova-de-conceito/testes-prova-conceito/openmp-hook/experiments/overhead-no-offloading/graph");
# Load data about OMP, CUDA, OMP_OFF.
data = read.csv("/dados/rogerio/USP/doutorado/prova-de-conceito/testes-prova-conceito/openmp-hook/experiments/overhead-no-offloading/graph/gemm-07-07-2016-15-43-26-joined-processed-final.csv");
View(data)
cdata <- ddply(data, c("exp", "version", "schedule", "chunk_size" , "num_threads" , "size_of_data" , "NI" , "NJ" , "NK"), summarise,
N    = length(chunk_size),
mean_orig = mean(ORIG),
mean_omp = mean(OMP),
mean_omp_off = mean(OMP_OFF),
mean_cuda_kernel_1 = mean(CUDA_KERNEL1),
mean_cuda_kernel_2 = mean(CUDA_KERNEL2),
mean_cuda_kernel_3 = mean(CUDA_KERNEL3),
mean_cuda = mean_cuda_kernel_1 + mean_cuda_kernel_2 + mean_cuda_kernel_3,
mean_dt_h2d = mean(DT_H2D),
mean_dt_d2h = mean(DT_D2H),
sd_orig = 2 * sd(ORIG),
sd_omp = 2 * sd(OMP),
sd_omp_off = 2 * sd(OMP_OFF),
sd_cuda_kernel_1 = 2 * sd(CUDA_KERNEL1),
sd_cuda_kernel_2 = 2 * sd(CUDA_KERNEL2),
sd_cuda_kernel_3 = 2 * sd(CUDA_KERNEL3),
sd_cuda = sd_cuda_kernel_1 + sd_cuda_kernel_2 + sd_cuda_kernel_3,
sd_dt_h2d = 2 * sd(DT_H2D),
sd_dt_d2h = 2 * sd(DT_D2H),
se_orig = sd_orig / sqrt(N),
se_omp = sd_omp / sqrt(N),
se_omp_off = sd_omp_off / sqrt(N),
se_cuda_kernel_1 = sd_cuda_kernel_1 / sqrt(N),
se_cuda_kernel_2 = sd_cuda_kernel_2 / sqrt(N),
se_cuda_kernel_3 = sd_cuda_kernel_3 / sqrt(N),
se_cuda = se_cuda_kernel_1 + se_cuda_kernel_2 + se_cuda_kernel_3,
se_dt_h2d = sd_dt_h2d / sqrt(N),
se_dt_d2h = sd_dt_d2h / sqrt(N),
mean_plot_value = 0.0,
se_plot_value = 0.0,
sd_plot_value = 0.0,
sum_work_finish_before_offload_decision = sum(WORK_FINISHED_BEFORE_OFFLOAD_DECISION),
sum_reach_offload_decision_point = sum(REACH_OFFLOAD_DECISION_POINT),
sum_decided_by_offloading = sum(DECIDED_BY_OFFLOADING),
sum_made_the_offloading = sum(MADE_THE_OFFLOADING)
)
View(cdata)
# Prepare column to plot.
cdata$mean_plot_value  <- ifelse(cdata$version == "OMP", cdata$mean_omp, ifelse(cdata$version == "OMP+OFF", cdata$mean_omp_off, cdata$mean_cuda))
cdata$sd_plot_value  <- ifelse(cdata$version == "OMP", cdata$sd_omp, ifelse(cdata$version == "OMP+OFF", cdata$sd_omp_off, cdata$sd_cuda))
cdata$se_plot_value  <- ifelse(cdata$version == "OMP", cdata$se_omp, ifelse(cdata$version == "OMP+OFF", cdata$se_omp_off, cdata$se_cuda))
test <-subset(cdata, version == "OMP+OFF")
write.csv(test, file = "gemm-execucoes-nao-alcancaram-ponto-decisao.csv")
