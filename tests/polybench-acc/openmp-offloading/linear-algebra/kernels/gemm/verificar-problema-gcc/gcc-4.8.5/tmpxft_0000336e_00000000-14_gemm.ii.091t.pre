
;; Function void* xmalloc(size_t) (_ZL7xmallocm, funcdef_no=3275, decl_uid=67134, cgraph_uid=3097)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
READONLY = &READONLY
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
num = &NONLOCAL
newA = &NULL
ESCAPED = &newA
ESCAPED = &NONLOCAL
ESCAPED = num
ret_5 = NONLOCAL
newA.72_6 = newA
stderr = NONLOCAL
stderr.73_8 = stderr
ESCAPED = stderr.73_8
ESCAPED = &NONLOCAL
ESCAPED = &READONLY
ESCAPED = &NONLOCAL
ESCAPED = newA.72_6

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
READONLY = { READONLY }
ESCAPED = { NULL READONLY ESCAPED NONLOCAL newA }
NONLOCAL = { ESCAPED NONLOCAL } same as ret_5
STOREDANYTHING = { }
INTEGER = { ANYTHING }
num = { NONLOCAL }
newA = { NULL ESCAPED NONLOCAL } same as newA.72_6
posix_memalign = { }
ret_5 = { ESCAPED NONLOCAL }
newA.72_6 = { NULL ESCAPED NONLOCAL }
stderr.73_8 = { ESCAPED NONLOCAL } same as ret_5
stderr = { ESCAPED NONLOCAL } same as ret_5
__fprintf_chk = { }
exit = { }


Alias information for void* xmalloc(size_t)

Aliased symbols

newA, UID D.67136, void *, is addressable

Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.67136 }

Flow-insensitive points-to information

newA.72_6, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.73_8, points-to non-local, points-to escaped, points-to vars: { }

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 6 3 7 4 5
;; 2 succs { 6 3 }
;; 6 succs { 4 }
;; 3 succs { 7 5 }
;; 7 succs { 4 }
;; 4 succs { }
;; 5 succs { 1 }
find_duplicates: <bb 6> duplicate of <bb 7>
Removing basic block 7

Symbols to be put in SSA form
{ D.67972 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 8
Number of blocks to update: 6 ( 75%)


void* xmalloc(size_t) (size_t num)
{
  int ret;
  void * newA;
  struct _IO_FILE * stderr.73;
  void * newA.72;

  <bb 2>:
  newA = 0B;
  ret_5 = posix_memalign (&newA, 32, num_3(D));
  newA.72_6 = newA;
  if (newA.72_6 == 0B)
    goto <bb 6>;
  else
    goto <bb 3>;

  <bb 6>:
  goto <bb 4>;

  <bb 3>:
  if (ret_5 != 0)
    goto <bb 6>;
  else
    goto <bb 5>;

  <bb 4>:
  stderr.73_8 = stderr;
  __fprintf_chk (stderr.73_8, 1, "[PolyBench] posix_memalign: cannot allocate memory");
  exit (1);

  <bb 5>:
  newA ={v} {CLOBBER};
  return newA.72_6;

}



;; Function void __cudaUnregisterBinaryUtil() (_ZL26__cudaUnregisterBinaryUtilv, funcdef_no=3279, decl_uid=67214, cgraph_uid=3100)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
READONLY = &READONLY
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__ref = NONLOCAL
__cudaFatCubinHandle = NONLOCAL
__ref = &__cudaFatCubinHandle
ESCAPED = &__cudaFatCubinHandle
__cudaFatCubinHandle.84_3 = __cudaFatCubinHandle
ESCAPED = __cudaFatCubinHandle.84_3

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
READONLY = { READONLY }
ESCAPED = { ESCAPED NONLOCAL __cudaFatCubinHandle }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__ref = { ESCAPED NONLOCAL __cudaFatCubinHandle }
__cudaFatCubinHandle = { ESCAPED NONLOCAL } same as __cudaFatCubinHandle.84_3
__cudaFatCubinHandle.84_3 = { ESCAPED NONLOCAL }
__cudaUnregisterFatBinary = { }


Alias information for void __cudaUnregisterBinaryUtil()

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { D.67213 } (includes global vars)

Flow-insensitive points-to information

__cudaFatCubinHandle.84_3, points-to non-local, points-to escaped, points-to vars: { }

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
void __cudaUnregisterBinaryUtil() ()
{
  static volatile void * * __ref;
  void * * __cudaFatCubinHandle.84;

  <bb 2>:
  __ref = &__cudaFatCubinHandle;
  __cudaFatCubinHandle.84_3 = __cudaFatCubinHandle;
  __cudaUnregisterFatBinary (__cudaFatCubinHandle.84_3);
  return;

}



;; Function <built-in> (_Z15gemm_omp_kerneliiiddPA4096_dS0_S0_._omp_fn.0, funcdef_no=3306, decl_uid=67704, cgraph_uid=3135)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
READONLY = &READONLY
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
.omp_data_i = &PARM_NOALIAS.0+128
PARM_NOALIAS.0+128 = NONLOCAL
PARM_NOALIAS.128+64 = NONLOCAL
PARM_NOALIAS.192+64 = NONLOCAL
PARM_NOALIAS.256+64 = NONLOCAL
PARM_NOALIAS.320+96 = NONLOCAL
current_loop_index = NONLOCAL
current_loop_index = &NULL
ESCAPED = &NULL
num_threads_defined = NONLOCAL
num_threads_defined = &NONLOCAL
ESCAPED = &NONLOCAL
q_data_transfer_write = NONLOCAL
q_data_transfer_write = &NONLOCAL
ESCAPED = &NONLOCAL
q_data_transfer_read = NONLOCAL
q_data_transfer_read = &NONLOCAL
ESCAPED = &NONLOCAL
type_of_data_allocation = NONLOCAL
type_of_data_allocation = &NONLOCAL
ESCAPED = &NONLOCAL
_16 = *.omp_data_i + 320
_17 = _16
ESCAPED = &NULL
ESCAPED = _17
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &.istart0.112
ESCAPED = &.iend0.113
_19 = NONLOCAL
.istart0.114_20 = .istart0.112
i_21 = .istart0.114_20
.iend0.115_22 = .iend0.113
_23 = .iend0.115_22
i_1 = i_21
i_1 = i_25
_55 = *.omp_data_i + 352
i_25 = i_1
i_25 = &NONLOCAL
ESCAPED = &.istart0.112
ESCAPED = &.iend0.113
_27 = NONLOCAL
j_61 = j_37
j_61 = &NULL
_28 = i_1
_29 = _28
_29 = &NONLOCAL
_30 = *.omp_data_i + 256
_31 = _30 + UNKNOWN
_32 = *_31 + UNKNOWN
_33 = *.omp_data_i + 64
_34 = _32
_34 = _33
*_31 + UNKNOWN = _34
_60 = *.omp_data_i + 384
j_37 = j_61
j_37 = &NONLOCAL
_24 = *.omp_data_i + 352
k_62 = k_53
k_62 = &NULL
_39 = *_31 + UNKNOWN
_40 = *.omp_data_i + 128
_41 = _40 + UNKNOWN
_42 = *_41 + UNKNOWN
_43 = *.omp_data_i
_44 = _42
_44 = _43
_45 = k_62
_46 = _45
_46 = &NONLOCAL
_47 = *.omp_data_i + 192
_48 = _47 + UNKNOWN
_49 = *_48 + UNKNOWN
_50 = _44
_50 = _49
_51 = _39
_51 = _50
*_31 + UNKNOWN = _51
k_53 = k_62
k_53 = &NONLOCAL
_36 = *.omp_data_i + 384

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
READONLY = { READONLY }
ESCAPED = { NULL ESCAPED NONLOCAL .istart0.112 .iend0.113 }
NONLOCAL = { ESCAPED NONLOCAL } same as num_threads_defined
STOREDANYTHING = { }
INTEGER = { ANYTHING }
.omp_data_i = { PARM_NOALIAS.0+128 }
PARM_NOALIAS.0+128 = { ESCAPED NONLOCAL }
PARM_NOALIAS.128+64 = { ESCAPED NONLOCAL }
PARM_NOALIAS.192+64 = { ESCAPED NONLOCAL }
PARM_NOALIAS.256+64 = { ESCAPED NONLOCAL }
PARM_NOALIAS.320+96 = { ESCAPED NONLOCAL }
current_loop_index = { NULL ESCAPED NONLOCAL }
num_threads_defined = { ESCAPED NONLOCAL }
q_data_transfer_write = { ESCAPED NONLOCAL } same as num_threads_defined
q_data_transfer_read = { ESCAPED NONLOCAL } same as num_threads_defined
type_of_data_allocation = { ESCAPED NONLOCAL } same as num_threads_defined
_16 = { ESCAPED NONLOCAL }
_17 = { ESCAPED NONLOCAL } same as _16
GOMP_loop_dynamic_start = { }
.istart0.112 = { ESCAPED NONLOCAL } same as .istart0.114_20
.iend0.113 = { ESCAPED NONLOCAL } same as .iend0.115_22
_19 = { ESCAPED NONLOCAL } same as num_threads_defined
.istart0.114_20 = { ESCAPED NONLOCAL }
i_21 = { ESCAPED NONLOCAL } same as .istart0.114_20
.iend0.115_22 = { ESCAPED NONLOCAL }
_23 = { ESCAPED NONLOCAL } same as .iend0.115_22
i_1 = { ESCAPED NONLOCAL }
i_25 = { ESCAPED NONLOCAL } same as i_1
_55 = { ESCAPED NONLOCAL }
GOMP_loop_dynamic_next = { }
_27 = { ESCAPED NONLOCAL } same as num_threads_defined
j_61 = { NULL NONLOCAL }
j_37 = { NULL NONLOCAL } same as j_61
_28 = { ESCAPED NONLOCAL } same as i_1
_29 = { ESCAPED NONLOCAL } same as i_1
_30 = { ESCAPED NONLOCAL }
_31 = { ESCAPED NONLOCAL }
_32 = { ESCAPED NONLOCAL }
_33 = { ESCAPED NONLOCAL }
_34 = { ESCAPED NONLOCAL }
_60 = { ESCAPED NONLOCAL }
_24 = { ESCAPED NONLOCAL }
k_62 = { NULL NONLOCAL } same as j_61
k_53 = { NULL NONLOCAL } same as j_61
_39 = { ESCAPED NONLOCAL }
_40 = { ESCAPED NONLOCAL }
_41 = { ESCAPED NONLOCAL }
_42 = { ESCAPED NONLOCAL }
_43 = { ESCAPED NONLOCAL }
_44 = { ESCAPED NONLOCAL }
_45 = { NULL NONLOCAL } same as j_61
_46 = { NULL NONLOCAL } same as j_61
_47 = { ESCAPED NONLOCAL }
_48 = { ESCAPED NONLOCAL }
_49 = { ESCAPED NONLOCAL }
_50 = { ESCAPED NONLOCAL }
_51 = { ESCAPED NONLOCAL }
_36 = { ESCAPED NONLOCAL }
GOMP_loop_end_nowait = { }


Alias information for <built-in>

Aliased symbols

.iend0.113, UID D.68155, long int, is addressable
.istart0.112, UID D.68154, long int, is addressable

Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.68154 D.68155 }

Flow-insensitive points-to information

.omp_data_i_15(D), points-to vars: { D.68347 } (includes global vars)
_30, points-to non-local, points-to escaped, points-to vars: { }
_31, points-to non-local, points-to escaped, points-to vars: { }
_40, points-to non-local, points-to escaped, points-to vars: { }
_41, points-to non-local, points-to escaped, points-to vars: { }
_47, points-to non-local, points-to escaped, points-to vars: { }
_48, points-to non-local, points-to escaped, points-to vars: { }

;; 5 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 11 3 4 14 5 15 6 17 16 13 7 19 8 21 20 18 9 23 22 12 10
;;
;; Loop 1
;;  header 3, latch 17
;;  depth 1, outer 0
;;  nodes: 3 17 6 5 21 14 4 15 8 23 19 7 20 13 9 22 18
;;
;; Loop 2
;;  header 4, latch 15
;;  depth 2, outer 1
;;  nodes: 4 15 5 21 14 8 23 19 7 20 13 9 22 18
;;
;; Loop 3
;;  header 7, latch 20
;;  depth 3, outer 2
;;  nodes: 7 20 8 23 19 9 22 18
;;
;; Loop 4
;;  header 9, latch 22
;;  depth 4, outer 3
;;  nodes: 9 22
;; 2 succs { 11 12 }
;; 11 succs { 3 }
;; 3 succs { 4 }
;; 4 succs { 13 14 }
;; 14 succs { 5 }
;; 5 succs { 15 6 }
;; 15 succs { 4 }
;; 6 succs { 16 17 }
;; 17 succs { 3 }
;; 16 succs { 10 }
;; 13 succs { 7 }
;; 7 succs { 18 19 }
;; 19 succs { 8 }
;; 8 succs { 20 21 }
;; 21 succs { 5 }
;; 20 succs { 7 }
;; 18 succs { 9 }
;; 9 succs { 22 23 }
;; 23 succs { 8 }
;; 22 succs { 9 }
;; 12 succs { 10 }
;; 10 succs { 1 }
find_duplicates: <bb 12> duplicate of <bb 16>
find_duplicates: <bb 19> duplicate of <bb 23>
find_duplicates: <bb 14> duplicate of <bb 21>
Removing basic block 16
Removing basic block 23
Removing basic block 21

Symbols to be put in SSA form
{ D.68329 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 24
Number of blocks to update: 20 ( 83%)


<built-in> (struct .omp_data_s.41 & restrict .omp_data_i)
{
  int k;
  int j;
  long int .iend0.115;
  int i;
  long int .istart0.114;
  long int .iend0.113;
  long int .istart0.112;
  int _16;
  long int _17;
  bool _19;
  int _23;
  int _24;
  bool _27;
  long unsigned int _28;
  long unsigned int _29;
  double[4096] * _30;
  double[4096] * _31;
  double _32;
  double _33;
  double _34;
  int _36;
  double _39;
  double[4096] * _40;
  double[4096] * _41;
  double _42;
  double _43;
  double _44;
  long unsigned int _45;
  long unsigned int _46;
  double[4096] * _47;
  double[4096] * _48;
  double _49;
  double _50;
  double _51;
  int _55;
  int _60;
  int pretmp_82;
  long unsigned int pretmp_89;
  long unsigned int pretmp_90;
  double[4096] * pretmp_91;
  double[4096] * pretmp_93;
  int pretmp_94;
  double prephitmp_97;
  double[4096] * pretmp_98;
  double[4096] * pretmp_100;
  double[4096] * pretmp_103;

  <bb 2>:
  current_loop_index = 0;
  num_threads_defined = 8;
  q_data_transfer_write = 402653184;
  q_data_transfer_read = 134217728;
  type_of_data_allocation = 1;
  _16 = .omp_data_i_15(D)->ni;
  _17 = (long int) _16;
  _19 = __builtin_GOMP_loop_dynamic_start (0, _17, 1, 64, &.istart0.112, &.iend0.113);
  if (_19 != 0)
    goto <bb 11>;
  else
    goto <bb 12>;

  <bb 11>:

  <bb 3>:
  .istart0.114_20 = .istart0.112;
  i_21 = (int) .istart0.114_20;
  .iend0.115_22 = .iend0.113;
  _23 = (int) .iend0.115_22;
  pretmp_82 = .omp_data_i_15(D)->nj;

  <bb 4>:
  # i_1 = PHI <i_21(3), i_25(15)>
  _55 = pretmp_82;
  if (_55 > 0)
    goto <bb 13>;
  else
    goto <bb 14>;

  <bb 14>:

  <bb 5>:
  i_25 = i_1 + 1;
  if (_23 > i_25)
    goto <bb 15>;
  else
    goto <bb 6>;

  <bb 15>:
  goto <bb 4>;

  <bb 6>:
  _27 = __builtin_GOMP_loop_dynamic_next (&.istart0.112, &.iend0.113);
  if (_27 != 0)
    goto <bb 17>;
  else
    goto <bb 12>;

  <bb 17>:
  goto <bb 3>;

  <bb 13>:
  pretmp_89 = (long unsigned int) i_1;
  pretmp_90 = pretmp_89 * 32768;
  pretmp_91 = .omp_data_i_15(D)->C;
  pretmp_93 = pretmp_91 + pretmp_90;
  pretmp_94 = .omp_data_i_15(D)->nk;

  <bb 7>:
  # j_61 = PHI <j_37(20), 0(13)>
  _28 = pretmp_89;
  _29 = pretmp_90;
  _30 = pretmp_91;
  _31 = pretmp_93;
  _32 = *_31[j_61];
  _33 = .omp_data_i_15(D)->beta;
  _34 = _32 * _33;
  *_31[j_61] = _34;
  _60 = pretmp_94;
  if (_60 > 0)
    goto <bb 18>;
  else
    goto <bb 19>;

  <bb 19>:

  <bb 8>:
  j_37 = j_61 + 1;
  _24 = pretmp_82;
  if (_24 > j_37)
    goto <bb 20>;
  else
    goto <bb 14>;

  <bb 20>:
  goto <bb 7>;

  <bb 18>:
  pretmp_98 = .omp_data_i_15(D)->A;
  pretmp_100 = pretmp_98 + _29;
  pretmp_103 = .omp_data_i_15(D)->B;

  <bb 9>:
  # k_62 = PHI <k_53(22), 0(18)>
  # prephitmp_97 = PHI <_51(22), _34(18)>
  _39 = prephitmp_97;
  _40 = pretmp_98;
  _41 = pretmp_100;
  _42 = *_41[k_62];
  _43 = .omp_data_i_15(D)->alpha;
  _44 = _42 * _43;
  _45 = (long unsigned int) k_62;
  _46 = _45 * 32768;
  _47 = pretmp_103;
  _48 = _47 + _46;
  _49 = *_48[j_61];
  _50 = _44 * _49;
  _51 = _39 + _50;
  *_31[j_61] = _51;
  k_53 = k_62 + 1;
  _36 = pretmp_94;
  if (_36 > k_53)
    goto <bb 22>;
  else
    goto <bb 19>;

  <bb 22>:
  goto <bb 9>;

  <bb 12>:

  <bb 10>:
  __builtin_GOMP_loop_end_nowait ();
  return;

}



;; Function void gemm_cuda_kernel(int, int, int, double, double, double*, double*, double*) (_Z16gemm_cuda_kerneliiiddPdS_S_, funcdef_no=3302, decl_uid=66844, cgraph_uid=3123)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
READONLY = &READONLY
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__cuda_0 = &NONLOCAL
__cuda_1 = &NONLOCAL
__cuda_2 = &NONLOCAL
__cuda_3 = &NONLOCAL
__cuda_4 = &NONLOCAL
__cuda_5 = &NONLOCAL
__cuda_6 = &NONLOCAL
__cuda_7 = &NONLOCAL
__par0 = __cuda_0
__par1 = __cuda_1
__par2 = __cuda_2
__par3 = __cuda_3
__par4 = __cuda_4
__par5 = __cuda_5
__par6 = __cuda_6
__par7 = __cuda_7
ESCAPED = &__par0
ESCAPED = &NONLOCAL
ESCAPED = &NULL
_11 = NONLOCAL
ESCAPED = &__par1
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
_12 = NONLOCAL
ESCAPED = &__par2
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
_13 = NONLOCAL
ESCAPED = &__par3
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
_14 = NONLOCAL
ESCAPED = &__par4
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
_15 = NONLOCAL
ESCAPED = &__par5
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
_16 = NONLOCAL
ESCAPED = &__par6
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
_17 = NONLOCAL
ESCAPED = &__par7
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
_18 = NONLOCAL
__f = NONLOCAL
__f = &_Z16gemm_cuda_kerneliiiddPdS_S_
ESCAPED = &_Z16gemm_cuda_kerneliiiddPdS_S_
ESCAPED = &_Z16gemm_cuda_kerneliiiddPdS_S_

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
READONLY = { READONLY }
ESCAPED = { NULL ESCAPED NONLOCAL __par0 __par1 __par2 __par3 __par4 __par5 __par6 __par7 _Z16gemm_cuda_kerneliiiddPdS_S_ }
NONLOCAL = { ESCAPED NONLOCAL } same as _11
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__cuda_0 = { NONLOCAL }
__cuda_1 = { NONLOCAL } same as __cuda_0
__cuda_2 = { NONLOCAL } same as __cuda_0
__cuda_3 = { NONLOCAL } same as __cuda_0
__cuda_4 = { NONLOCAL } same as __cuda_0
__cuda_5 = { NONLOCAL } same as __cuda_0
__cuda_6 = { NONLOCAL } same as __cuda_0
__cuda_7 = { NONLOCAL } same as __cuda_0
__par0 = { ESCAPED NONLOCAL }
__par1 = { ESCAPED NONLOCAL }
__par2 = { ESCAPED NONLOCAL }
__par3 = { ESCAPED NONLOCAL }
__par4 = { ESCAPED NONLOCAL }
__par5 = { ESCAPED NONLOCAL }
__par6 = { ESCAPED NONLOCAL }
__par7 = { ESCAPED NONLOCAL }
cudaSetupArgument = { }
_11 = { ESCAPED NONLOCAL }
_12 = { ESCAPED NONLOCAL } same as _11
_13 = { ESCAPED NONLOCAL } same as _11
_14 = { ESCAPED NONLOCAL } same as _11
_15 = { ESCAPED NONLOCAL } same as _11
_16 = { ESCAPED NONLOCAL } same as _11
_17 = { ESCAPED NONLOCAL } same as _11
_18 = { ESCAPED NONLOCAL } same as _11
__f = { ESCAPED NONLOCAL _Z16gemm_cuda_kerneliiiddPdS_S_ }
_Z16gemm_cuda_kerneliiiddPdS_S_ = { ESCAPED NONLOCAL }
cudaLaunch = { }


Alias information for void gemm_cuda_kernel(int, int, int, double, double, double*, double*, double*)

Aliased symbols

__par0, UID D.68380, int, is addressable
__par1, UID D.68381, int, is addressable
__par2, UID D.68382, int, is addressable
__par3, UID D.68383, double, is addressable
__par4, UID D.68384, double, is addressable
__par5, UID D.68385, double *, is addressable
__par6, UID D.68386, double *, is addressable
__par7, UID D.68387, double *, is addressable

Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.68380 D.68381 D.68382 D.68383 D.68384 D.68385 D.68386 D.68387 }

Flow-insensitive points-to information

__cuda_5_7(D), points-to non-local, points-to vars: { }
__cuda_6_8(D), points-to non-local, points-to vars: { }
__cuda_7_9(D), points-to non-local, points-to vars: { }

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 12 3 13 4 14 5 15 6 16 7 17 8 18 9 19 10 11
;; 2 succs { 12 3 }
;; 12 succs { 11 }
;; 3 succs { 13 4 }
;; 13 succs { 11 }
;; 4 succs { 14 5 }
;; 14 succs { 11 }
;; 5 succs { 15 6 }
;; 15 succs { 11 }
;; 6 succs { 16 7 }
;; 16 succs { 11 }
;; 7 succs { 17 8 }
;; 17 succs { 11 }
;; 8 succs { 18 9 }
;; 18 succs { 11 }
;; 9 succs { 19 10 }
;; 19 succs { 11 }
;; 10 succs { 11 }
;; 11 succs { 1 }
find_duplicates: <bb 12> duplicate of <bb 13>
find_duplicates: <bb 12> duplicate of <bb 14>
find_duplicates: <bb 12> duplicate of <bb 15>
find_duplicates: <bb 12> duplicate of <bb 16>
find_duplicates: <bb 12> duplicate of <bb 17>
find_duplicates: <bb 12> duplicate of <bb 18>
find_duplicates: <bb 12> duplicate of <bb 19>
Removing basic block 13
Removing basic block 14
Removing basic block 15
Removing basic block 16
Removing basic block 17
Removing basic block 18
Removing basic block 19

Symbols to be put in SSA form
{ D.68298 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 20
Number of blocks to update: 12 ( 60%)


void gemm_cuda_kernel(int, int, int, double, double, double*, double*, double*) (int __cuda_0, int __cuda_1, int __cuda_2, double __cuda_3, double __cuda_4, double * __cuda_5, double * __cuda_6, double * __cuda_7)
{
  static volatile char * __f;
  int __par0;
  int __par1;
  int __par2;
  double __par3;
  double __par4;
  double * __par5;
  double * __par6;
  double * __par7;
  cudaError _11;
  cudaError _12;
  cudaError _13;
  cudaError _14;
  cudaError _15;
  cudaError _16;
  cudaError _17;
  cudaError _18;

  <bb 2>:
  __par0 = __cuda_0_2(D);
  __par1 = __cuda_1_3(D);
  __par2 = __cuda_2_4(D);
  __par3 = __cuda_3_5(D);
  __par4 = __cuda_4_6(D);
  __par5 = __cuda_5_7(D);
  __par6 = __cuda_6_8(D);
  __par7 = __cuda_7_9(D);
  _11 = cudaSetupArgument (&__par0, 4, 0);
  if (_11 != 0)
    goto <bb 12>;
  else
    goto <bb 3>;

  <bb 12>:
  goto <bb 11>;

  <bb 3>:
  _12 = cudaSetupArgument (&__par1, 4, 4);
  if (_12 != 0)
    goto <bb 12>;
  else
    goto <bb 4>;

  <bb 4>:
  _13 = cudaSetupArgument (&__par2, 4, 8);
  if (_13 != 0)
    goto <bb 12>;
  else
    goto <bb 5>;

  <bb 5>:
  _14 = cudaSetupArgument (&__par3, 8, 16);
  if (_14 != 0)
    goto <bb 12>;
  else
    goto <bb 6>;

  <bb 6>:
  _15 = cudaSetupArgument (&__par4, 8, 24);
  if (_15 != 0)
    goto <bb 12>;
  else
    goto <bb 7>;

  <bb 7>:
  _16 = cudaSetupArgument (&__par5, 8, 32);
  if (_16 != 0)
    goto <bb 12>;
  else
    goto <bb 8>;

  <bb 8>:
  _17 = cudaSetupArgument (&__par6, 8, 40);
  if (_17 != 0)
    goto <bb 12>;
  else
    goto <bb 9>;

  <bb 9>:
  _18 = cudaSetupArgument (&__par7, 8, 48);
  if (_18 != 0)
    goto <bb 12>;
  else
    goto <bb 10>;

  <bb 10>:
  __f = gemm_cuda_kernel;
  cudaLaunch (gemm_cuda_kernel);

  <bb 11>:
  return;

}



;; Function float absVal(float) (_Z6absValf, funcdef_no=3240, decl_uid=65923, cgraph_uid=3062)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
READONLY = &READONLY
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
a = &NONLOCAL
_3 = a
_1 = _3
_1 = a
ESCAPED = _1

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
READONLY = { READONLY }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
a = { NONLOCAL }
_3 = { NONLOCAL } same as a
_1 = { NONLOCAL } same as a


Alias information for float absVal(float)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information


;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 5 3 4
;; 2 succs { 3 5 }
;; 5 succs { 4 }
;; 3 succs { 4 }
;; 4 succs { 1 }
float absVal(float) (float a)
{
  float _1;
  float _3;

  <bb 2>:
  if (a_2(D) < 0.0)
    goto <bb 3>;
  else
    goto <bb 5>;

  <bb 5>:
  goto <bb 4>;

  <bb 3>:
  _3 = -a_2(D);

  <bb 4>:
  # _1 = PHI <_3(3), a_2(D)(5)>
  return _1;

}



;; Function float percentDiff(double, double) (_Z11percentDiffdd, funcdef_no=3241, decl_uid=65927, cgraph_uid=3063)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
READONLY = &READONLY
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
val1 = &NONLOCAL
val2 = &NONLOCAL
_4 = val1
_16 = _4
_17 = _4
_17 = _16
_5 = _17
_7 = val2
_18 = _7
_19 = _7
_19 = _18
_8 = _19
_20 = _10
_21 = _10
_21 = _20
_11 = val1
_11 = &NONLOCAL
_12 = _11
_22 = _12
_23 = _12
_23 = _22
_13 = _21
_13 = _23
_24 = _13
_25 = _13
_25 = _24
_14 = _25
_14 = &NONLOCAL
_2 = &NONLOCAL
_2 = _14
ESCAPED = _2
_9 = val1
_9 = val2
_10 = _9

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
READONLY = { READONLY }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
val1 = { NONLOCAL }
val2 = { NONLOCAL } same as val1
_4 = { NONLOCAL } same as val1
_16 = { NONLOCAL } same as val1
_17 = { NONLOCAL } same as val1
_5 = { NONLOCAL } same as val1
_7 = { NONLOCAL } same as val1
_18 = { NONLOCAL } same as val1
_19 = { NONLOCAL } same as val1
_8 = { NONLOCAL } same as val1
_20 = { NONLOCAL } same as val1
_10 = { NONLOCAL } same as val1
_21 = { NONLOCAL } same as val1
_11 = { NONLOCAL } same as val1
_12 = { NONLOCAL } same as val1
_22 = { NONLOCAL } same as val1
_23 = { NONLOCAL } same as val1
_13 = { NONLOCAL } same as val1
_24 = { NONLOCAL } same as val1
_25 = { NONLOCAL } same as val1
_14 = { NONLOCAL } same as val1
_2 = { NONLOCAL } same as val1
_9 = { NONLOCAL } same as val1


Alias information for float percentDiff(double, double)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information


;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 16 3 4 5 18 6 7 20 19 8 9 21 10 11 22 12 13 14 17 15 23
;; 2 succs { 3 16 }
;; 16 succs { 4 }
;; 3 succs { 4 }
;; 4 succs { 5 17 }
;; 5 succs { 6 18 }
;; 18 succs { 7 }
;; 6 succs { 7 }
;; 7 succs { 19 20 }
;; 20 succs { 15 }
;; 19 succs { 14 }
;; 8 succs { 9 }
;; 9 succs { 10 21 }
;; 21 succs { 11 }
;; 10 succs { 11 }
;; 11 succs { 12 22 }
;; 22 succs { 13 }
;; 12 succs { 13 }
;; 13 succs { 14 }
;; 14 succs { 1 }
;; 17 succs { 15 }
;; 15 succs { 8 23 }
;; 23 succs { 9 }
find_duplicates: <bb 17> duplicate of <bb 20>
Removing basic block 20

Symbols to be put in SSA form
{ D.67991 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 24
Number of blocks to update: 22 ( 92%)


float percentDiff(double, double) (double val1, double val2)
{
  bool iftmp.1;
  float _2;
  float _4;
  double _5;
  float _7;
  double _8;
  double _9;
  float _10;
  double _11;
  float _12;
  float _13;
  float _14;
  float _16;
  float _17;
  float _18;
  float _19;
  float _20;
  float _21;
  float _22;
  float _23;
  float _24;
  float _25;

  <bb 2>:
  _4 = (float) val1_3(D);
  if (_4 < 0.0)
    goto <bb 3>;
  else
    goto <bb 16>;

  <bb 16>:
  goto <bb 4>;

  <bb 3>:
  _16 = -_4;

  <bb 4>:
  # _17 = PHI <_4(16), _16(3)>
  _5 = (double) _17;
  if (_5 < 1.00000000000000002081668171172168513294309377670288085938e-2)
    goto <bb 5>;
  else
    goto <bb 17>;

  <bb 5>:
  _7 = (float) val2_6(D);
  if (_7 < 0.0)
    goto <bb 6>;
  else
    goto <bb 18>;

  <bb 18>:
  goto <bb 7>;

  <bb 6>:
  _18 = -_7;

  <bb 7>:
  # _19 = PHI <_7(18), _18(6)>
  _8 = (double) _19;
  if (_8 < 1.00000000000000002081668171172168513294309377670288085938e-2)
    goto <bb 19>;
  else
    goto <bb 17>;

  <bb 19>:
  goto <bb 14>;

  <bb 8>:
  _20 = -_10;

  <bb 9>:
  # _21 = PHI <_10(23), _20(8)>
  _11 = val1_3(D) + 9.99999993922529029077850282192230224609375e-9;
  _12 = (float) _11;
  if (_12 < 0.0)
    goto <bb 10>;
  else
    goto <bb 21>;

  <bb 21>:
  goto <bb 11>;

  <bb 10>:
  _22 = -_12;

  <bb 11>:
  # _23 = PHI <_12(21), _22(10)>
  _13 = _21 / _23;
  if (_13 < 0.0)
    goto <bb 12>;
  else
    goto <bb 22>;

  <bb 22>:
  goto <bb 13>;

  <bb 12>:
  _24 = -_13;

  <bb 13>:
  # _25 = PHI <_13(22), _24(12)>
  _14 = _25 * 1.0e+2;

  <bb 14>:
  # _2 = PHI <0.0(19), _14(13)>
  return _2;

  <bb 17>:

  <bb 15>:
  _9 = val1_3(D) - val2_6(D);
  _10 = (float) _9;
  if (_10 < 0.0)
    goto <bb 8>;
  else
    goto <bb 23>;

  <bb 23>:
  goto <bb 9>;

}



;; Function uint64_t get_time() (_Z8get_timev, funcdef_no=3246, decl_uid=66101, cgraph_uid=3068)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
READONLY = &READONLY
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
ESCAPED = &NONLOCAL
ESCAPED = &spec
_3 = spec
_4 = _3
_5 = _4
_5 = &NONLOCAL
_6 = spec
_7 = _6
_8 = _5
_8 = _7
ESCAPED = _8

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
READONLY = { READONLY }
ESCAPED = { ESCAPED NONLOCAL spec }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
clock_gettime = { }
spec = { ESCAPED NONLOCAL } same as _3
_3 = { ESCAPED NONLOCAL }
_4 = { ESCAPED NONLOCAL } same as _3
_5 = { ESCAPED NONLOCAL }
_6 = { ESCAPED NONLOCAL } same as _3
_7 = { ESCAPED NONLOCAL } same as _3
_8 = { ESCAPED NONLOCAL } same as _5


Alias information for uint64_t get_time()

Aliased symbols

spec, UID D.66103, struct timespec, is addressable

Call clobber information

ESCAPED, points-to non-local, points-to vars: { D.66103 }

Flow-insensitive points-to information


;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
uint64_t get_time() ()
{
  struct timespec spec;
  long int _3;
  long unsigned int _4;
  long unsigned int _5;
  long int _6;
  long unsigned int _7;
  uint64_t _8;

  <bb 2>:
  clock_gettime (1, &spec);
  _3 = spec.tv_sec;
  _4 = (long unsigned int) _3;
  _5 = _4 * 1000000000;
  _6 = spec.tv_nsec;
  _7 = (long unsigned int) _6;
  _8 = _5 + _7;
  spec ={v} {CLOBBER};
  return _8;

}



;; Function void hookomp_timing_start(uint64_t*) (_Z20hookomp_timing_startPm, funcdef_no=3247, decl_uid=66105, cgraph_uid=3069)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
READONLY = &READONLY
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
_start = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &spec
_5 = spec
_6 = _5
_7 = _6
_7 = &NONLOCAL
_8 = spec
_9 = _8
_10 = _7
_10 = _9
*_start = _10

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
READONLY = { READONLY }
ESCAPED = { ESCAPED NONLOCAL spec }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
_start = { NONLOCAL }
clock_gettime = { }
spec = { ESCAPED NONLOCAL } same as _5
_5 = { ESCAPED NONLOCAL }
_6 = { ESCAPED NONLOCAL } same as _5
_7 = { ESCAPED NONLOCAL }
_8 = { ESCAPED NONLOCAL } same as _5
_9 = { ESCAPED NONLOCAL } same as _5
_10 = { ESCAPED NONLOCAL } same as _7


Alias information for void hookomp_timing_start(uint64_t*)

Aliased symbols

spec, UID D.68006, struct timespec, is addressable

Call clobber information

ESCAPED, points-to non-local, points-to vars: { D.68006 }

Flow-insensitive points-to information

_start_3(D), points-to non-local, points-to vars: { }

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
void hookomp_timing_start(uint64_t*) (uint64_t * _start)
{
  struct timespec spec;
  long int _5;
  long unsigned int _6;
  long unsigned int _7;
  long int _8;
  long unsigned int _9;
  uint64_t _10;

  <bb 2>:
  clock_gettime (1, &spec);
  _5 = spec.tv_sec;
  _6 = (long unsigned int) _5;
  _7 = _6 * 1000000000;
  _8 = spec.tv_nsec;
  _9 = (long unsigned int) _8;
  _10 = _7 + _9;
  spec ={v} {CLOBBER};
  *_start_3(D) = _10;
  return;

}



;; Function void hookomp_timing_stop(uint64_t*) (_Z19hookomp_timing_stopPm, funcdef_no=3248, decl_uid=66108, cgraph_uid=3070)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
READONLY = &READONLY
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
_stop = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &spec
_5 = spec
_6 = _5
_7 = _6
_7 = &NONLOCAL
_8 = spec
_9 = _8
_10 = _7
_10 = _9
*_stop = _10

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
READONLY = { READONLY }
ESCAPED = { ESCAPED NONLOCAL spec }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
_stop = { NONLOCAL }
clock_gettime = { }
spec = { ESCAPED NONLOCAL } same as _5
_5 = { ESCAPED NONLOCAL }
_6 = { ESCAPED NONLOCAL } same as _5
_7 = { ESCAPED NONLOCAL }
_8 = { ESCAPED NONLOCAL } same as _5
_9 = { ESCAPED NONLOCAL } same as _5
_10 = { ESCAPED NONLOCAL } same as _7


Alias information for void hookomp_timing_stop(uint64_t*)

Aliased symbols

spec, UID D.68010, struct timespec, is addressable

Call clobber information

ESCAPED, points-to non-local, points-to vars: { D.68010 }

Flow-insensitive points-to information

_stop_3(D), points-to non-local, points-to vars: { }

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
void hookomp_timing_stop(uint64_t*) (uint64_t * _stop)
{
  struct timespec spec;
  long int _5;
  long unsigned int _6;
  long unsigned int _7;
  long int _8;
  long unsigned int _9;
  uint64_t _10;

  <bb 2>:
  clock_gettime (1, &spec);
  _5 = spec.tv_sec;
  _6 = (long unsigned int) _5;
  _7 = _6 * 1000000000;
  _8 = spec.tv_nsec;
  _9 = (long unsigned int) _8;
  _10 = _7 + _9;
  spec ={v} {CLOBBER};
  *_stop_3(D) = _10;
  return;

}



;; Function void hookomp_timing_print(uint64_t, uint64_t) (_Z20hookomp_timing_printmm, funcdef_no=3249, decl_uid=66112, cgraph_uid=3071)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
READONLY = &READONLY
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
tstart = &NONLOCAL
tstop = &NONLOCAL
_3 = tstop
_3 = tstart
ESCAPED = &NONLOCAL
ESCAPED = &READONLY
ESCAPED = _3

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
READONLY = { READONLY }
ESCAPED = { READONLY ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
tstart = { NONLOCAL }
tstop = { NONLOCAL } same as tstart
_3 = { NONLOCAL } same as tstart
__printf_chk = { }


Alias information for void hookomp_timing_print(uint64_t, uint64_t)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information


;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
void hookomp_timing_print(uint64_t, uint64_t) (uint64_t tstart, uint64_t tstop)
{
  long unsigned int _3;

  <bb 2>:
  _3 = tstop_1(D) - tstart_2(D);
  __printf_chk (1, "%llu", _3);
  return;

}



;; Function void hookomp_timing_print_without_dev() (_Z32hookomp_timing_print_without_devv, funcdef_no=3250, decl_uid=66114, cgraph_uid=3072)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
READONLY = &READONLY
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
omp_stop = NONLOCAL
omp_stop.2_3 = omp_stop
omp_start = NONLOCAL
omp_start.3_4 = omp_start
total_time_5 = omp_stop.2_3
total_time_5 = omp_start.3_4
dev_kernel1_stop = NONLOCAL
dev_kernel1_stop.4_6 = dev_kernel1_stop
dev_kernel1_start = NONLOCAL
dev_kernel1_start.5_7 = dev_kernel1_start
dev_kernel2_stop = NONLOCAL
dev_kernel2_stop.6_9 = dev_kernel2_stop
dev_kernel2_start = NONLOCAL
dev_kernel2_start.7_10 = dev_kernel2_start
dev_kernel3_stop = NONLOCAL
dev_kernel3_stop.8_13 = dev_kernel3_stop
dev_kernel3_start = NONLOCAL
dev_kernel3_start.9_14 = dev_kernel3_start
data_transfer_h2d_stop = NONLOCAL
data_transfer_h2d_stop.10_17 = data_transfer_h2d_stop
data_transfer_h2d_start = NONLOCAL
data_transfer_h2d_start.11_18 = data_transfer_h2d_start
data_transfer_d2h_stop = NONLOCAL
data_transfer_d2h_stop.12_20 = data_transfer_d2h_stop
data_transfer_d2h_start = NONLOCAL
data_transfer_d2h_start.13_21 = data_transfer_d2h_start
_8 = total_time_5
_8 = dev_kernel1_stop.4_6
_11 = _8
_11 = dev_kernel2_stop.6_9
_12 = _11
_12 = dev_kernel3_stop.8_13
_15 = _12
_15 = data_transfer_h2d_stop.10_17
dev_time_16 = _15
dev_time_16 = data_transfer_d2h_stop.12_20
_24 = dev_kernel1_start.5_7
_24 = dev_time_16
_22 = dev_kernel2_start.7_10
_22 = _24
dt_time_23 = dev_kernel3_start.9_14
dt_time_23 = _22
_19 = data_transfer_h2d_start.11_18
_19 = dt_time_23
iftmp.14_25 = _19
iftmp.14_25 = data_transfer_d2h_start.13_21
iftmp.14_1 = iftmp.14_25
iftmp.14_1 = &NULL
ESCAPED = &NONLOCAL
ESCAPED = &READONLY
ESCAPED = iftmp.14_1

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
READONLY = { READONLY }
ESCAPED = { NULL READONLY ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as omp_stop
STOREDANYTHING = { }
INTEGER = { ANYTHING }
omp_stop.2_3 = { ESCAPED NONLOCAL } same as omp_stop
omp_stop = { ESCAPED NONLOCAL }
omp_start.3_4 = { ESCAPED NONLOCAL } same as omp_stop
omp_start = { ESCAPED NONLOCAL } same as omp_stop
total_time_5 = { ESCAPED NONLOCAL } same as omp_stop
dev_kernel1_stop.4_6 = { ESCAPED NONLOCAL } same as omp_stop
dev_kernel1_stop = { ESCAPED NONLOCAL } same as omp_stop
dev_kernel1_start.5_7 = { ESCAPED NONLOCAL } same as omp_stop
dev_kernel1_start = { ESCAPED NONLOCAL } same as omp_stop
dev_kernel2_stop.6_9 = { ESCAPED NONLOCAL } same as omp_stop
dev_kernel2_stop = { ESCAPED NONLOCAL } same as omp_stop
dev_kernel2_start.7_10 = { ESCAPED NONLOCAL } same as omp_stop
dev_kernel2_start = { ESCAPED NONLOCAL } same as omp_stop
dev_kernel3_stop.8_13 = { ESCAPED NONLOCAL } same as omp_stop
dev_kernel3_stop = { ESCAPED NONLOCAL } same as omp_stop
dev_kernel3_start.9_14 = { ESCAPED NONLOCAL } same as omp_stop
dev_kernel3_start = { ESCAPED NONLOCAL } same as omp_stop
data_transfer_h2d_stop.10_17 = { ESCAPED NONLOCAL } same as omp_stop
data_transfer_h2d_stop = { ESCAPED NONLOCAL } same as omp_stop
data_transfer_h2d_start.11_18 = { ESCAPED NONLOCAL } same as omp_stop
data_transfer_h2d_start = { ESCAPED NONLOCAL } same as omp_stop
data_transfer_d2h_stop.12_20 = { ESCAPED NONLOCAL } same as omp_stop
data_transfer_d2h_stop = { ESCAPED NONLOCAL } same as omp_stop
data_transfer_d2h_start.13_21 = { ESCAPED NONLOCAL } same as omp_stop
data_transfer_d2h_start = { ESCAPED NONLOCAL } same as omp_stop
_8 = { ESCAPED NONLOCAL } same as omp_stop
_11 = { ESCAPED NONLOCAL } same as omp_stop
_12 = { ESCAPED NONLOCAL } same as omp_stop
_15 = { ESCAPED NONLOCAL } same as omp_stop
dev_time_16 = { ESCAPED NONLOCAL } same as omp_stop
_24 = { ESCAPED NONLOCAL } same as omp_stop
_22 = { ESCAPED NONLOCAL } same as omp_stop
dt_time_23 = { ESCAPED NONLOCAL } same as omp_stop
_19 = { ESCAPED NONLOCAL } same as omp_stop
iftmp.14_25 = { ESCAPED NONLOCAL } same as omp_stop
iftmp.14_1 = { NULL ESCAPED NONLOCAL }
__printf_chk = { }


Alias information for void hookomp_timing_print_without_dev()

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { }

Flow-insensitive points-to information


;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 5 3 4
;; 2 succs { 3 5 }
;; 5 succs { 4 }
;; 3 succs { 4 }
;; 4 succs { 1 }
void hookomp_timing_print_without_dev() ()
{
  uint64_t dt_time;
  uint64_t dev_time;
  uint64_t total_time;
  uint64_t iftmp.14;
  long unsigned int data_transfer_d2h_start.13;
  long unsigned int data_transfer_d2h_stop.12;
  long unsigned int data_transfer_h2d_start.11;
  long unsigned int data_transfer_h2d_stop.10;
  long unsigned int dev_kernel3_start.9;
  long unsigned int dev_kernel3_stop.8;
  long unsigned int dev_kernel2_start.7;
  long unsigned int dev_kernel2_stop.6;
  long unsigned int dev_kernel1_start.5;
  long unsigned int dev_kernel1_stop.4;
  long unsigned int omp_start.3;
  long unsigned int omp_stop.2;
  long unsigned int _8;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int _15;
  long unsigned int _19;
  long unsigned int _22;
  long unsigned int _24;

  <bb 2>:
  omp_stop.2_3 = omp_stop;
  omp_start.3_4 = omp_start;
  total_time_5 = omp_stop.2_3 - omp_start.3_4;
  dev_kernel1_stop.4_6 = dev_kernel1_stop;
  dev_kernel1_start.5_7 = dev_kernel1_start;
  dev_kernel2_stop.6_9 = dev_kernel2_stop;
  dev_kernel2_start.7_10 = dev_kernel2_start;
  dev_kernel3_stop.8_13 = dev_kernel3_stop;
  dev_kernel3_start.9_14 = dev_kernel3_start;
  data_transfer_h2d_stop.10_17 = data_transfer_h2d_stop;
  data_transfer_h2d_start.11_18 = data_transfer_h2d_start;
  data_transfer_d2h_stop.12_20 = data_transfer_d2h_stop;
  data_transfer_d2h_start.13_21 = data_transfer_d2h_start;
  if (total_time_5 != 0)
    goto <bb 3>;
  else
    goto <bb 5>;

  <bb 5>:
  goto <bb 4>;

  <bb 3>:
  _8 = total_time_5 - dev_kernel1_stop.4_6;
  _11 = _8 - dev_kernel2_stop.6_9;
  _12 = _11 - dev_kernel3_stop.8_13;
  _15 = _12 - data_transfer_h2d_stop.10_17;
  dev_time_16 = _15 - data_transfer_d2h_stop.12_20;
  _24 = dev_kernel1_start.5_7 + dev_time_16;
  _22 = dev_kernel2_start.7_10 + _24;
  dt_time_23 = dev_kernel3_start.9_14 + _22;
  _19 = data_transfer_h2d_start.11_18 + dt_time_23;
  iftmp.14_25 = _19 + data_transfer_d2h_start.13_21;

  <bb 4>:
  # iftmp.14_1 = PHI <iftmp.14_25(3), 0(5)>
  __printf_chk (1, "%llu", iftmp.14_1);
  return;

}



;; Function void hookomp_print_time_results() (_Z26hookomp_print_time_resultsv, funcdef_no=3251, decl_uid=66119, cgraph_uid=3073)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
READONLY = &READONLY
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
stdout = NONLOCAL
stdout.15_3 = stdout
ESCAPED = stdout.15_3
ESCAPED = &NONLOCAL
ESCAPED = &READONLY
seq_stop = NONLOCAL
seq_stop.16_5 = seq_stop
seq_start = NONLOCAL
seq_start.17_6 = seq_start
_72 = seq_stop.16_5
_72 = seq_start.17_6
ESCAPED = &NONLOCAL
ESCAPED = &READONLY
ESCAPED = _72
stdout.15_8 = stdout
ESCAPED = stdout.15_8
ESCAPED = &NONLOCAL
ESCAPED = &READONLY
stdout.15_10 = stdout
ESCAPED = stdout.15_10
ESCAPED = &NONLOCAL
ESCAPED = &READONLY
omp_stop = NONLOCAL
omp_stop.18_12 = omp_stop
omp_start = NONLOCAL
omp_start.19_13 = omp_start
_73 = omp_stop.18_12
_73 = omp_start.19_13
ESCAPED = &NONLOCAL
ESCAPED = &READONLY
ESCAPED = _73
stdout.15_15 = stdout
ESCAPED = stdout.15_15
ESCAPED = &NONLOCAL
ESCAPED = &READONLY
stdout.15_17 = stdout
ESCAPED = stdout.15_17
ESCAPED = &NONLOCAL
ESCAPED = &READONLY
omp_stop.2_106 = omp_stop
omp_start.3_107 = omp_start
total_time_108 = omp_stop.2_106
total_time_108 = omp_start.3_107
dev_kernel1_stop = NONLOCAL
dev_kernel1_stop.4_109 = dev_kernel1_stop
dev_kernel1_start = NONLOCAL
dev_kernel1_start.5_110 = dev_kernel1_start
dev_kernel2_stop = NONLOCAL
dev_kernel2_stop.6_112 = dev_kernel2_stop
dev_kernel2_start = NONLOCAL
dev_kernel2_start.7_113 = dev_kernel2_start
dev_kernel3_stop = NONLOCAL
dev_kernel3_stop.8_116 = dev_kernel3_stop
dev_kernel3_start = NONLOCAL
dev_kernel3_start.9_117 = dev_kernel3_start
data_transfer_h2d_stop = NONLOCAL
data_transfer_h2d_stop.10_120 = data_transfer_h2d_stop
data_transfer_h2d_start = NONLOCAL
data_transfer_h2d_start.11_121 = data_transfer_h2d_start
data_transfer_d2h_stop = NONLOCAL
data_transfer_d2h_stop.12_123 = data_transfer_d2h_stop
data_transfer_d2h_start = NONLOCAL
data_transfer_d2h_start.13_124 = data_transfer_d2h_start
_111 = total_time_108
_111 = dev_kernel1_stop.4_109
_114 = _111
_114 = dev_kernel2_stop.6_112
_115 = _114
_115 = dev_kernel3_stop.8_116
_118 = _115
_118 = data_transfer_h2d_stop.10_120
dev_time_119 = _118
dev_time_119 = data_transfer_d2h_stop.12_123
_127 = dev_kernel1_start.5_110
_127 = dev_time_119
_125 = dev_kernel2_start.7_113
_125 = _127
dt_time_126 = dev_kernel3_start.9_117
dt_time_126 = _125
_122 = data_transfer_h2d_start.11_121
_122 = dt_time_126
iftmp.14_128 = _122
iftmp.14_128 = data_transfer_d2h_start.13_124
iftmp.14_129 = &NULL
iftmp.14_129 = iftmp.14_128
ESCAPED = &NONLOCAL
ESCAPED = &READONLY
ESCAPED = iftmp.14_129
stdout.15_20 = stdout
ESCAPED = stdout.15_20
ESCAPED = &NONLOCAL
ESCAPED = &READONLY
stdout.15_22 = stdout
ESCAPED = stdout.15_22
ESCAPED = &NONLOCAL
ESCAPED = &READONLY
dev_kernel1_stop.20_24 = dev_kernel1_stop
dev_kernel1_start.21_25 = dev_kernel1_start
_74 = dev_kernel1_stop.20_24
_74 = dev_kernel1_start.21_25
ESCAPED = &NONLOCAL
ESCAPED = &READONLY
ESCAPED = _74
stdout.15_27 = stdout
ESCAPED = stdout.15_27
ESCAPED = &NONLOCAL
ESCAPED = &READONLY
stdout.15_29 = stdout
ESCAPED = stdout.15_29
ESCAPED = &NONLOCAL
ESCAPED = &READONLY
dev_kernel2_stop.22_31 = dev_kernel2_stop
dev_kernel2_start.23_32 = dev_kernel2_start
_75 = dev_kernel2_stop.22_31
_75 = dev_kernel2_start.23_32
ESCAPED = &NONLOCAL
ESCAPED = &READONLY
ESCAPED = _75
stdout.15_34 = stdout
ESCAPED = stdout.15_34
ESCAPED = &NONLOCAL
ESCAPED = &READONLY
stdout.15_36 = stdout
ESCAPED = stdout.15_36
ESCAPED = &NONLOCAL
ESCAPED = &READONLY
dev_kernel3_stop.24_38 = dev_kernel3_stop
dev_kernel3_start.25_39 = dev_kernel3_start
_76 = dev_kernel3_stop.24_38
_76 = dev_kernel3_start.25_39
ESCAPED = &NONLOCAL
ESCAPED = &READONLY
ESCAPED = _76
stdout.15_41 = stdout
ESCAPED = stdout.15_41
ESCAPED = &NONLOCAL
ESCAPED = &READONLY
stdout.15_43 = stdout
ESCAPED = stdout.15_43
ESCAPED = &NONLOCAL
ESCAPED = &READONLY
data_transfer_h2d_stop.26_45 = data_transfer_h2d_stop
data_transfer_h2d_start.27_46 = data_transfer_h2d_start
_77 = data_transfer_h2d_stop.26_45
_77 = data_transfer_h2d_start.27_46
ESCAPED = &NONLOCAL
ESCAPED = &READONLY
ESCAPED = _77
stdout.15_48 = stdout
ESCAPED = stdout.15_48
ESCAPED = &NONLOCAL
ESCAPED = &READONLY
stdout.15_50 = stdout
ESCAPED = stdout.15_50
ESCAPED = &NONLOCAL
ESCAPED = &READONLY
data_transfer_d2h_stop.28_52 = data_transfer_d2h_stop
data_transfer_d2h_start.29_53 = data_transfer_d2h_start
_78 = data_transfer_d2h_stop.28_52
_78 = data_transfer_d2h_start.29_53
ESCAPED = &NONLOCAL
ESCAPED = &READONLY
ESCAPED = _78
reach_offload_decision_point = NONLOCAL
reach_offload_decision_point.31_55 = reach_offload_decision_point
_131 = reach_offload_decision_point.31_55
_132 = _131
stdout.15_56 = stdout
ESCAPED = stdout.15_56
ESCAPED = &NONLOCAL
ESCAPED = &READONLY
ESCAPED = _132
reach_offload_decision_point.31_58 = reach_offload_decision_point
_59 = reach_offload_decision_point.31_58
stdout.15_60 = stdout
ESCAPED = stdout.15_60
ESCAPED = &NONLOCAL
ESCAPED = &READONLY
ESCAPED = _59
decided_by_offloading = NONLOCAL
decided_by_offloading.32_62 = decided_by_offloading
_63 = decided_by_offloading.32_62
stdout.15_64 = stdout
ESCAPED = stdout.15_64
ESCAPED = &NONLOCAL
ESCAPED = &READONLY
ESCAPED = _63
made_the_offloading = NONLOCAL
made_the_offloading.33_66 = made_the_offloading
_67 = made_the_offloading.33_66
stdout.15_68 = stdout
ESCAPED = stdout.15_68
ESCAPED = &NONLOCAL
ESCAPED = &READONLY
ESCAPED = _67
stdout.15_70 = stdout
ESCAPED = stdout.15_70
ESCAPED = &NONLOCAL
ESCAPED = &READONLY

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
READONLY = { READONLY }
ESCAPED = { NULL READONLY ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as stdout
STOREDANYTHING = { }
INTEGER = { ANYTHING }
stdout.15_3 = { ESCAPED NONLOCAL } same as stdout
stdout = { ESCAPED NONLOCAL }
__fprintf_chk = { }
seq_stop.16_5 = { ESCAPED NONLOCAL } same as stdout
seq_stop = { ESCAPED NONLOCAL } same as stdout
seq_start.17_6 = { ESCAPED NONLOCAL } same as stdout
seq_start = { ESCAPED NONLOCAL } same as stdout
_72 = { ESCAPED NONLOCAL } same as stdout
__printf_chk = { }
stdout.15_8 = { ESCAPED NONLOCAL } same as stdout
stdout.15_10 = { ESCAPED NONLOCAL } same as stdout
omp_stop.18_12 = { ESCAPED NONLOCAL } same as stdout
omp_stop = { ESCAPED NONLOCAL } same as stdout
omp_start.19_13 = { ESCAPED NONLOCAL } same as stdout
omp_start = { ESCAPED NONLOCAL } same as stdout
_73 = { ESCAPED NONLOCAL } same as stdout
stdout.15_15 = { ESCAPED NONLOCAL } same as stdout
stdout.15_17 = { ESCAPED NONLOCAL } same as stdout
omp_stop.2_106 = { ESCAPED NONLOCAL } same as stdout
omp_start.3_107 = { ESCAPED NONLOCAL } same as stdout
total_time_108 = { ESCAPED NONLOCAL } same as stdout
dev_kernel1_stop.4_109 = { ESCAPED NONLOCAL } same as stdout
dev_kernel1_stop = { ESCAPED NONLOCAL } same as stdout
dev_kernel1_start.5_110 = { ESCAPED NONLOCAL } same as stdout
dev_kernel1_start = { ESCAPED NONLOCAL } same as stdout
dev_kernel2_stop.6_112 = { ESCAPED NONLOCAL } same as stdout
dev_kernel2_stop = { ESCAPED NONLOCAL } same as stdout
dev_kernel2_start.7_113 = { ESCAPED NONLOCAL } same as stdout
dev_kernel2_start = { ESCAPED NONLOCAL } same as stdout
dev_kernel3_stop.8_116 = { ESCAPED NONLOCAL } same as stdout
dev_kernel3_stop = { ESCAPED NONLOCAL } same as stdout
dev_kernel3_start.9_117 = { ESCAPED NONLOCAL } same as stdout
dev_kernel3_start = { ESCAPED NONLOCAL } same as stdout
data_transfer_h2d_stop.10_120 = { ESCAPED NONLOCAL } same as stdout
data_transfer_h2d_stop = { ESCAPED NONLOCAL } same as stdout
data_transfer_h2d_start.11_121 = { ESCAPED NONLOCAL } same as stdout
data_transfer_h2d_start = { ESCAPED NONLOCAL } same as stdout
data_transfer_d2h_stop.12_123 = { ESCAPED NONLOCAL } same as stdout
data_transfer_d2h_stop = { ESCAPED NONLOCAL } same as stdout
data_transfer_d2h_start.13_124 = { ESCAPED NONLOCAL } same as stdout
data_transfer_d2h_start = { ESCAPED NONLOCAL } same as stdout
_111 = { ESCAPED NONLOCAL } same as stdout
_114 = { ESCAPED NONLOCAL } same as stdout
_115 = { ESCAPED NONLOCAL } same as stdout
_118 = { ESCAPED NONLOCAL } same as stdout
dev_time_119 = { ESCAPED NONLOCAL } same as stdout
_127 = { ESCAPED NONLOCAL } same as stdout
_125 = { ESCAPED NONLOCAL } same as stdout
dt_time_126 = { ESCAPED NONLOCAL } same as stdout
_122 = { ESCAPED NONLOCAL } same as stdout
iftmp.14_128 = { ESCAPED NONLOCAL } same as stdout
iftmp.14_129 = { NULL ESCAPED NONLOCAL }
stdout.15_20 = { ESCAPED NONLOCAL } same as stdout
stdout.15_22 = { ESCAPED NONLOCAL } same as stdout
dev_kernel1_stop.20_24 = { ESCAPED NONLOCAL } same as stdout
dev_kernel1_start.21_25 = { ESCAPED NONLOCAL } same as stdout
_74 = { ESCAPED NONLOCAL } same as stdout
stdout.15_27 = { ESCAPED NONLOCAL } same as stdout
stdout.15_29 = { ESCAPED NONLOCAL } same as stdout
dev_kernel2_stop.22_31 = { ESCAPED NONLOCAL } same as stdout
dev_kernel2_start.23_32 = { ESCAPED NONLOCAL } same as stdout
_75 = { ESCAPED NONLOCAL } same as stdout
stdout.15_34 = { ESCAPED NONLOCAL } same as stdout
stdout.15_36 = { ESCAPED NONLOCAL } same as stdout
dev_kernel3_stop.24_38 = { ESCAPED NONLOCAL } same as stdout
dev_kernel3_start.25_39 = { ESCAPED NONLOCAL } same as stdout
_76 = { ESCAPED NONLOCAL } same as stdout
stdout.15_41 = { ESCAPED NONLOCAL } same as stdout
stdout.15_43 = { ESCAPED NONLOCAL } same as stdout
data_transfer_h2d_stop.26_45 = { ESCAPED NONLOCAL } same as stdout
data_transfer_h2d_start.27_46 = { ESCAPED NONLOCAL } same as stdout
_77 = { ESCAPED NONLOCAL } same as stdout
stdout.15_48 = { ESCAPED NONLOCAL } same as stdout
stdout.15_50 = { ESCAPED NONLOCAL } same as stdout
data_transfer_d2h_stop.28_52 = { ESCAPED NONLOCAL } same as stdout
data_transfer_d2h_start.29_53 = { ESCAPED NONLOCAL } same as stdout
_78 = { ESCAPED NONLOCAL } same as stdout
reach_offload_decision_point.31_55 = { ESCAPED NONLOCAL } same as stdout
reach_offload_decision_point = { ESCAPED NONLOCAL } same as stdout
_131 = { ESCAPED NONLOCAL } same as stdout
_132 = { ESCAPED NONLOCAL } same as stdout
stdout.15_56 = { ESCAPED NONLOCAL } same as stdout
reach_offload_decision_point.31_58 = { ESCAPED NONLOCAL } same as stdout
_59 = { ESCAPED NONLOCAL } same as stdout
stdout.15_60 = { ESCAPED NONLOCAL } same as stdout
decided_by_offloading.32_62 = { ESCAPED NONLOCAL } same as stdout
decided_by_offloading = { ESCAPED NONLOCAL } same as stdout
_63 = { ESCAPED NONLOCAL } same as stdout
stdout.15_64 = { ESCAPED NONLOCAL } same as stdout
made_the_offloading.33_66 = { ESCAPED NONLOCAL } same as stdout
made_the_offloading = { ESCAPED NONLOCAL } same as stdout
_67 = { ESCAPED NONLOCAL } same as stdout
stdout.15_68 = { ESCAPED NONLOCAL } same as stdout
stdout.15_70 = { ESCAPED NONLOCAL } same as stdout


Alias information for void hookomp_print_time_results()

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { }

Flow-insensitive points-to information

stdout.15_3, points-to non-local, points-to escaped, points-to vars: { }
stdout.15_8, points-to non-local, points-to escaped, points-to vars: { }
stdout.15_10, points-to non-local, points-to escaped, points-to vars: { }
stdout.15_15, points-to non-local, points-to escaped, points-to vars: { }
stdout.15_17, points-to non-local, points-to escaped, points-to vars: { }
stdout.15_20, points-to non-local, points-to escaped, points-to vars: { }
stdout.15_22, points-to non-local, points-to escaped, points-to vars: { }
stdout.15_27, points-to non-local, points-to escaped, points-to vars: { }
stdout.15_29, points-to non-local, points-to escaped, points-to vars: { }
stdout.15_34, points-to non-local, points-to escaped, points-to vars: { }
stdout.15_36, points-to non-local, points-to escaped, points-to vars: { }
stdout.15_41, points-to non-local, points-to escaped, points-to vars: { }
stdout.15_43, points-to non-local, points-to escaped, points-to vars: { }
stdout.15_48, points-to non-local, points-to escaped, points-to vars: { }
stdout.15_50, points-to non-local, points-to escaped, points-to vars: { }
stdout.15_56, points-to non-local, points-to escaped, points-to vars: { }
stdout.15_60, points-to non-local, points-to escaped, points-to vars: { }
stdout.15_64, points-to non-local, points-to escaped, points-to vars: { }
stdout.15_68, points-to non-local, points-to escaped, points-to vars: { }
stdout.15_70, points-to non-local, points-to escaped, points-to vars: { }

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 5 3 4
;; 2 succs { 3 5 }
;; 5 succs { 4 }
;; 3 succs { 4 }
;; 4 succs { 1 }
void hookomp_print_time_results() ()
{
  uint64_t dt_time;
  uint64_t dev_time;
  uint64_t total_time;
  uint64_t iftmp.14;
  long unsigned int data_transfer_d2h_start.13;
  long unsigned int data_transfer_d2h_stop.12;
  long unsigned int data_transfer_h2d_start.11;
  long unsigned int data_transfer_h2d_stop.10;
  long unsigned int dev_kernel3_start.9;
  long unsigned int dev_kernel3_stop.8;
  long unsigned int dev_kernel2_start.7;
  long unsigned int dev_kernel2_stop.6;
  long unsigned int dev_kernel1_start.5;
  long unsigned int dev_kernel1_stop.4;
  long unsigned int omp_start.3;
  long unsigned int omp_stop.2;
  bool made_the_offloading.33;
  bool decided_by_offloading.32;
  bool reach_offload_decision_point.31;
  int iftmp.30;
  long unsigned int data_transfer_d2h_start.29;
  long unsigned int data_transfer_d2h_stop.28;
  long unsigned int data_transfer_h2d_start.27;
  long unsigned int data_transfer_h2d_stop.26;
  long unsigned int dev_kernel3_start.25;
  long unsigned int dev_kernel3_stop.24;
  long unsigned int dev_kernel2_start.23;
  long unsigned int dev_kernel2_stop.22;
  long unsigned int dev_kernel1_start.21;
  long unsigned int dev_kernel1_stop.20;
  long unsigned int omp_start.19;
  long unsigned int omp_stop.18;
  long unsigned int seq_start.17;
  long unsigned int seq_stop.16;
  struct _IO_FILE * stdout.15;
  int _59;
  int _63;
  int _67;
  long unsigned int _72;
  long unsigned int _73;
  long unsigned int _74;
  long unsigned int _75;
  long unsigned int _76;
  long unsigned int _77;
  long unsigned int _78;
  long unsigned int _111;
  long unsigned int _114;
  long unsigned int _115;
  long unsigned int _118;
  long unsigned int _122;
  long unsigned int _125;
  long unsigned int _127;
  bool _131;
  int _132;

  <bb 2>:
  stdout.15_3 = stdout;
  __fprintf_chk (stdout.15_3, 1, "ORIG = ");
  seq_stop.16_5 = seq_stop;
  seq_start.17_6 = seq_start;
  _72 = seq_stop.16_5 - seq_start.17_6;
  __printf_chk (1, "%llu", _72);
  stdout.15_8 = stdout;
  __fprintf_chk (stdout.15_8, 1, ", ");
  stdout.15_10 = stdout;
  __fprintf_chk (stdout.15_10, 1, "OMP_OFF = ");
  omp_stop.18_12 = omp_stop;
  omp_start.19_13 = omp_start;
  _73 = omp_stop.18_12 - omp_start.19_13;
  __printf_chk (1, "%llu", _73);
  stdout.15_15 = stdout;
  __fprintf_chk (stdout.15_15, 1, ", ");
  stdout.15_17 = stdout;
  __fprintf_chk (stdout.15_17, 1, "OMP = ");
  omp_stop.2_106 = omp_stop;
  omp_start.3_107 = omp_start;
  total_time_108 = omp_stop.2_106 - omp_start.3_107;
  dev_kernel1_stop.4_109 = dev_kernel1_stop;
  dev_kernel1_start.5_110 = dev_kernel1_start;
  dev_kernel2_stop.6_112 = dev_kernel2_stop;
  dev_kernel2_start.7_113 = dev_kernel2_start;
  dev_kernel3_stop.8_116 = dev_kernel3_stop;
  dev_kernel3_start.9_117 = dev_kernel3_start;
  data_transfer_h2d_stop.10_120 = data_transfer_h2d_stop;
  data_transfer_h2d_start.11_121 = data_transfer_h2d_start;
  data_transfer_d2h_stop.12_123 = data_transfer_d2h_stop;
  data_transfer_d2h_start.13_124 = data_transfer_d2h_start;
  if (total_time_108 != 0)
    goto <bb 3>;
  else
    goto <bb 5>;

  <bb 5>:
  goto <bb 4>;

  <bb 3>:
  _111 = total_time_108 - dev_kernel1_stop.4_109;
  _114 = _111 - dev_kernel2_stop.6_112;
  _115 = _114 - dev_kernel3_stop.8_116;
  _118 = _115 - data_transfer_h2d_stop.10_120;
  dev_time_119 = _118 - data_transfer_d2h_stop.12_123;
  _127 = dev_kernel1_start.5_110 + dev_time_119;
  _125 = dev_kernel2_start.7_113 + _127;
  dt_time_126 = dev_kernel3_start.9_117 + _125;
  _122 = data_transfer_h2d_start.11_121 + dt_time_126;
  iftmp.14_128 = _122 + data_transfer_d2h_start.13_124;

  <bb 4>:
  # iftmp.14_129 = PHI <0(5), iftmp.14_128(3)>
  __printf_chk (1, "%llu", iftmp.14_129);
  stdout.15_20 = stdout;
  __fprintf_chk (stdout.15_20, 1, ", ");
  stdout.15_22 = stdout;
  __fprintf_chk (stdout.15_22, 1, "CUDA_KERNEL1 = ");
  dev_kernel1_stop.20_24 = dev_kernel1_stop;
  dev_kernel1_start.21_25 = dev_kernel1_start;
  _74 = dev_kernel1_stop.20_24 - dev_kernel1_start.21_25;
  __printf_chk (1, "%llu", _74);
  stdout.15_27 = stdout;
  __fprintf_chk (stdout.15_27, 1, ", ");
  stdout.15_29 = stdout;
  __fprintf_chk (stdout.15_29, 1, "CUDA_KERNEL2 = ");
  dev_kernel2_stop.22_31 = dev_kernel2_stop;
  dev_kernel2_start.23_32 = dev_kernel2_start;
  _75 = dev_kernel2_stop.22_31 - dev_kernel2_start.23_32;
  __printf_chk (1, "%llu", _75);
  stdout.15_34 = stdout;
  __fprintf_chk (stdout.15_34, 1, ", ");
  stdout.15_36 = stdout;
  __fprintf_chk (stdout.15_36, 1, "CUDA_KERNEL3 = ");
  dev_kernel3_stop.24_38 = dev_kernel3_stop;
  dev_kernel3_start.25_39 = dev_kernel3_start;
  _76 = dev_kernel3_stop.24_38 - dev_kernel3_start.25_39;
  __printf_chk (1, "%llu", _76);
  stdout.15_41 = stdout;
  __fprintf_chk (stdout.15_41, 1, ", ");
  stdout.15_43 = stdout;
  __fprintf_chk (stdout.15_43, 1, "DT_H2D = ");
  data_transfer_h2d_stop.26_45 = data_transfer_h2d_stop;
  data_transfer_h2d_start.27_46 = data_transfer_h2d_start;
  _77 = data_transfer_h2d_stop.26_45 - data_transfer_h2d_start.27_46;
  __printf_chk (1, "%llu", _77);
  stdout.15_48 = stdout;
  __fprintf_chk (stdout.15_48, 1, ", ");
  stdout.15_50 = stdout;
  __fprintf_chk (stdout.15_50, 1, "DT_D2H = ");
  data_transfer_d2h_stop.28_52 = data_transfer_d2h_stop;
  data_transfer_d2h_start.29_53 = data_transfer_d2h_start;
  _78 = data_transfer_d2h_stop.28_52 - data_transfer_d2h_start.29_53;
  __printf_chk (1, "%llu", _78);
  reach_offload_decision_point.31_55 = reach_offload_decision_point;
  _131 = ~reach_offload_decision_point.31_55;
  _132 = (int) _131;
  stdout.15_56 = stdout;
  __fprintf_chk (stdout.15_56, 1, ", WORK_FINISHED_BEFORE_OFFLOAD_DECISION = %d", _132);
  reach_offload_decision_point.31_58 = reach_offload_decision_point;
  _59 = (int) reach_offload_decision_point.31_58;
  stdout.15_60 = stdout;
  __fprintf_chk (stdout.15_60, 1, ", REACH_OFFLOAD_DECISION_POINT = %d", _59);
  decided_by_offloading.32_62 = decided_by_offloading;
  _63 = (int) decided_by_offloading.32_62;
  stdout.15_64 = stdout;
  __fprintf_chk (stdout.15_64, 1, ", DECIDED_BY_OFFLOADING = %d", _63);
  made_the_offloading.33_66 = made_the_offloading;
  _67 = (int) made_the_offloading.33_66;
  stdout.15_68 = stdout;
  __fprintf_chk (stdout.15_68, 1, ", MADE_THE_OFFLOADING = %d", _67);
  stdout.15_70 = stdout;
  __fprintf_chk (stdout.15_70, 1, "\n");
  return;

}



;; Function bool create_target_functions_table(Func****, int, int) (_Z29create_target_functions_tablePPPP4Funcii, funcdef_no=3256, decl_uid=66664, cgraph_uid=3078)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
READONLY = &READONLY
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
table_ = &NONLOCAL
nrows = &NONLOCAL
ncolumns = &NONLOCAL
stderr = NONLOCAL
stderr.34_11 = stderr
ESCAPED = stderr.34_11
ESCAPED = &NONLOCAL
ESCAPED = &READONLY
_14 = nrows
_15 = _14
_15 = &NONLOCAL
ESCAPED = _15
table_17 = &HEAP
stderr.34_18 = stderr
ESCAPED = stderr.34_18
ESCAPED = &NONLOCAL
ESCAPED = &READONLY
result_62 = result_1
result_62 = &NONLOCAL
i_63 = i_43
i_63 = &NULL
_20 = i_63
_21 = _20
_21 = &NONLOCAL
_22 = table_17 + UNKNOWN
_24 = ncolumns
_25 = _24
_25 = &NONLOCAL
ESCAPED = _25
_27 = &HEAP
*_22 = _27
j_64 = j_40
j_64 = &NULL
_29 = *_22
_30 = j_64
_31 = _30
_31 = &NONLOCAL
_32 = _29 + UNKNOWN
ESCAPED = &NONLOCAL
_34 = &HEAP
*_32 = _34
_36 = *_22
_37 = _36 + UNKNOWN
_38 = *_37
derefaddrtmp = &NULL
*_38 = derefaddrtmp
j_40 = j_64
j_40 = &NONLOCAL
stderr.34_41 = stderr
ESCAPED = stderr.34_41
ESCAPED = &NONLOCAL
ESCAPED = &READONLY
result_1 = result_62
result_1 = &NULL
result_1 = result_62
i_43 = i_63
i_43 = &NONLOCAL
stderr.34_44 = stderr
ESCAPED = stderr.34_44
ESCAPED = &NONLOCAL
ESCAPED = &READONLY
result_3 = result_1
result_3 = &NULL
result_3 = &NONLOCAL
stderr.34_46 = stderr
ESCAPED = stderr.34_46
ESCAPED = &NONLOCAL
ESCAPED = &READONLY
*table_ = table_17
ESCAPED = result_3

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
READONLY = { READONLY }
ESCAPED = { NULL READONLY ESCAPED NONLOCAL HEAP HEAP HEAP }
NONLOCAL = { ESCAPED NONLOCAL } same as stderr
STOREDANYTHING = { }
INTEGER = { ANYTHING }
table_ = { NONLOCAL }
nrows = { NONLOCAL } same as table_
ncolumns = { NONLOCAL } same as table_
stderr.34_11 = { ESCAPED NONLOCAL } same as stderr
stderr = { ESCAPED NONLOCAL }
__fprintf_chk = { }
_14 = { NONLOCAL } same as table_
_15 = { NONLOCAL } same as table_
malloc = { }
table_17 = { HEAP }
HEAP = { ESCAPED NONLOCAL HEAP }
stderr.34_18 = { ESCAPED NONLOCAL } same as stderr
result_62 = { NULL NONLOCAL }
result_1 = { NULL NONLOCAL } same as result_62
i_63 = { NULL NONLOCAL } same as result_62
i_43 = { NULL NONLOCAL } same as result_62
_20 = { NULL NONLOCAL } same as result_62
_21 = { NULL NONLOCAL } same as result_62
_22 = { HEAP }
_24 = { NONLOCAL } same as table_
_25 = { NONLOCAL } same as table_
_27 = { HEAP }
HEAP = { ESCAPED NONLOCAL HEAP }
j_64 = { NULL NONLOCAL } same as result_62
j_40 = { NULL NONLOCAL } same as result_62
_29 = { ESCAPED NONLOCAL HEAP }
_30 = { NULL NONLOCAL } same as result_62
_31 = { NULL NONLOCAL } same as result_62
_32 = { ESCAPED NONLOCAL HEAP }
_34 = { HEAP }
HEAP = { NULL ESCAPED NONLOCAL }
_36 = { ESCAPED NONLOCAL HEAP } same as _29
_37 = { ESCAPED NONLOCAL HEAP }
_38 = { ESCAPED NONLOCAL HEAP }
derefaddrtmp = { NULL }
stderr.34_41 = { ESCAPED NONLOCAL } same as stderr
stderr.34_44 = { ESCAPED NONLOCAL } same as stderr
result_3 = { NULL NONLOCAL } same as result_62
stderr.34_46 = { ESCAPED NONLOCAL } same as stderr


Alias information for bool create_target_functions_table(Func****, int, int)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.68493 D.68494 D.68495 }

Flow-insensitive points-to information

stderr.34_11, points-to non-local, points-to escaped, points-to vars: { }
table_17, points-to vars: { D.68493 } (includes global vars)
stderr.34_18, points-to non-local, points-to escaped, points-to vars: { }
_22, points-to vars: { D.68493 } (includes global vars)
_27, points-to vars: { D.68494 } (includes global vars)
_29, points-to non-local, points-to escaped, points-to vars: { D.68494 } (includes global vars)
_32, points-to non-local, points-to escaped, points-to vars: { D.68494 } (includes global vars)
_34, points-to vars: { D.68495 } (includes global vars)
_36, points-to non-local, points-to escaped, points-to vars: { D.68494 } (includes global vars)
_37, points-to non-local, points-to escaped, points-to vars: { D.68494 } (includes global vars)
_38, points-to non-local, points-to escaped, points-to vars: { D.68495 } (includes global vars)
stderr.34_41, points-to non-local, points-to escaped, points-to vars: { }
stderr.34_44, points-to non-local, points-to escaped, points-to vars: { }
stderr.34_46, points-to non-local, points-to escaped, points-to vars: { }
table__48(D), points-to non-local, points-to vars: { }

;; 3 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 12 11 4 5 14 13 6 16 15 7 8 18 17 9 10
;;
;; Loop 1
;;  header 4, latch 17
;;  depth 1, outer 0
;;  nodes: 4 17 8 16 7 14 5 6 15 13
;;
;; Loop 2
;;  header 6, latch 15
;;  depth 2, outer 1
;;  nodes: 6 15
;; 2 succs { 3 9 }
;; 3 succs { 11 12 }
;; 12 succs { 10 }
;; 11 succs { 4 }
;; 4 succs { 5 7 }
;; 5 succs { 13 14 }
;; 14 succs { 8 }
;; 13 succs { 6 }
;; 6 succs { 15 16 }
;; 16 succs { 8 }
;; 15 succs { 6 }
;; 7 succs { 8 }
;; 8 succs { 17 18 }
;; 18 succs { 10 }
;; 17 succs { 4 }
;; 9 succs { 10 }
;; 10 succs { 1 }

Symbols to be put in SSA form
{ D.68097 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 19
Number of blocks to update: 18 ( 95%)


bool create_target_functions_table(Func****, int, int) (struct Func * * * * table_, int nrows, int ncolumns)
{
  int j;
  int i;
  bool result;
  struct Func * * * table;
  struct _IO_FILE * stderr.34;
  long unsigned int pretmp_5;
  long unsigned int pretmp_6;
  long unsigned int _14;
  long unsigned int _15;
  long unsigned int _20;
  long unsigned int _21;
  struct Func * * * _22;
  long unsigned int _24;
  long unsigned int _25;
  void * _27;
  struct Func * * _29;
  long unsigned int _30;
  long unsigned int _31;
  struct Func * * _32;
  void * _34;
  struct Func * * _36;
  struct Func * * _37;
  struct Func * _38;
  struct Func * * pretmp_58;
  struct Func * * prephitmp_60;

  <bb 2>:
  stderr.34_11 = stderr;
  __fprintf_chk (stderr.34_11, 1, "Allocating the rows.\n");
  _14 = (long unsigned int) nrows_13(D);
  _15 = _14 * 8;
  table_17 = malloc (_15);
  if (table_17 != 0B)
    goto <bb 3>;
  else
    goto <bb 9>;

  <bb 3>:
  stderr.34_18 = stderr;
  __fprintf_chk (stderr.34_18, 1, "Allocating the columns.\n");
  if (nrows_13(D) > 0)
    goto <bb 11>;
  else
    goto <bb 12>;

  <bb 12>:
  goto <bb 10>;

  <bb 11>:
  pretmp_6 = (long unsigned int) ncolumns_23(D);
  pretmp_5 = pretmp_6 * 8;

  <bb 4>:
  # result_62 = PHI <result_1(17), 1(11)>
  # i_63 = PHI <i_43(17), 0(11)>
  _20 = (long unsigned int) i_63;
  _21 = _20 * 8;
  _22 = table_17 + _21;
  _24 = pretmp_6;
  _25 = pretmp_5;
  _27 = malloc (_25);
  *_22 = _27;
  if (_27 != 0B)
    goto <bb 5>;
  else
    goto <bb 7>;

  <bb 5>:
  if (ncolumns_23(D) > 0)
    goto <bb 13>;
  else
    goto <bb 14>;

  <bb 14>:
  goto <bb 8>;

  <bb 13>:

  <bb 6>:
  # j_64 = PHI <j_40(15), 0(13)>
  # prephitmp_60 = PHI <pretmp_58(15), _27(13)>
  _29 = prephitmp_60;
  _30 = (long unsigned int) j_64;
  _31 = _30 * 8;
  _32 = _29 + _31;
  _34 = malloc (48);
  *_32 = _34;
  _36 = *_22;
  _37 = _36 + _31;
  _38 = *_37;
  _38->f = 0B;
  j_40 = j_64 + 1;
  if (ncolumns_23(D) > j_40)
    goto <bb 15>;
  else
    goto <bb 16>;

  <bb 16>:
  goto <bb 8>;

  <bb 15>:
  pretmp_58 = *_22;
  goto <bb 6>;

  <bb 7>:
  stderr.34_41 = stderr;
  __fprintf_chk (stderr.34_41, 1, "Error in table of target functions allocation (columns).\n");

  <bb 8>:
  # result_1 = PHI <result_62(16), 0(7), result_62(14)>
  i_43 = i_63 + 1;
  if (nrows_13(D) > i_43)
    goto <bb 17>;
  else
    goto <bb 18>;

  <bb 18>:
  goto <bb 10>;

  <bb 17>:
  goto <bb 4>;

  <bb 9>:
  stderr.34_44 = stderr;
  __fprintf_chk (stderr.34_44, 1, "Error in table of target functions allocation (rows).\n");

  <bb 10>:
  # result_3 = PHI <result_1(18), 0(9), 1(12)>
  stderr.34_46 = stderr;
  __fprintf_chk (stderr.34_46, 1, "Allocating the columns is OK.\n");
  *table__48(D) = table_17;
  return result_3;

}



;; Function void call_function_ffi_call(Func*) (_Z22call_function_ffi_callP4Func, funcdef_no=3257, decl_uid=66679, cgraph_uid=3079)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
READONLY = &READONLY
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
ff = &NONLOCAL
stderr = NONLOCAL
stderr.35_2 = stderr
ESCAPED = stderr.35_2
ESCAPED = &NONLOCAL
ESCAPED = &READONLY
_5 = *ff + 128
_6 = *ff + 256
_7 = *ff + 64
_8 = _7
ESCAPED = &cif.0+64
ESCAPED = &NONLOCAL
ESCAPED = _8
ESCAPED = _6
ESCAPED = _5
_10 = NONLOCAL
stderr.35_11 = stderr
ESCAPED = stderr.35_11
ESCAPED = &NONLOCAL
ESCAPED = &READONLY
ESCAPED = &NONLOCAL
_14 = *ff + 192
_15 = *ff + 320
_16 = *ff
_17 = _16
ESCAPED = &cif.0+64
ESCAPED = _17
ESCAPED = _15
ESCAPED = _14

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
READONLY = { READONLY }
ESCAPED = { READONLY ESCAPED NONLOCAL cif.0+64 cif.64+64 cif.128+64 cif.192+64 }
NONLOCAL = { ESCAPED NONLOCAL } same as stderr
STOREDANYTHING = { }
INTEGER = { ANYTHING }
ff = { NONLOCAL }
stderr.35_2 = { ESCAPED NONLOCAL } same as stderr
stderr = { ESCAPED NONLOCAL }
__fprintf_chk = { }
_5 = { ESCAPED NONLOCAL }
_6 = { ESCAPED NONLOCAL }
_7 = { ESCAPED NONLOCAL }
_8 = { ESCAPED NONLOCAL } same as _7
ffi_prep_cif = { }
cif.0+64 = { ESCAPED NONLOCAL }
cif.64+64 = { ESCAPED NONLOCAL }
cif.128+64 = { ESCAPED NONLOCAL }
cif.192+64 = { ESCAPED NONLOCAL }
_10 = { ESCAPED NONLOCAL } same as stderr
stderr.35_11 = { ESCAPED NONLOCAL } same as stderr
exit = { }
_14 = { ESCAPED NONLOCAL }
_15 = { ESCAPED NONLOCAL }
_16 = { ESCAPED NONLOCAL }
_17 = { ESCAPED NONLOCAL } same as _16
ffi_call = { }


Alias information for void call_function_ffi_call(Func*)

Aliased symbols

cif, UID D.66681, struct ffi_cif, is addressable

Call clobber information

ESCAPED, points-to non-local, points-to vars: { D.66681 }

Flow-insensitive points-to information

stderr.35_2, points-to non-local, points-to escaped, points-to vars: { }
ff_4(D), points-to non-local, points-to vars: { }
_5, points-to non-local, points-to escaped, points-to vars: { }
_6, points-to non-local, points-to escaped, points-to vars: { }
stderr.35_11, points-to non-local, points-to escaped, points-to vars: { }
_14, points-to non-local, points-to escaped, points-to vars: { }
_15, points-to non-local, points-to escaped, points-to vars: { }
_16, points-to non-local, points-to escaped, points-to vars: { }
_17, points-to non-local, points-to escaped, points-to vars: { }

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4
;; 2 succs { 3 4 }
;; 3 succs { }
;; 4 succs { 1 }
void call_function_ffi_call(Func*) (struct Func * ff)
{
  struct ffi_cif cif;
  struct _IO_FILE * stderr.35;
  struct ffi_type * * _5;
  struct ffi_type * _6;
  int _7;
  unsigned int _8;
  ffi_status _10;
  void * * _14;
  void * _15;
  void * _16;
  void (*<T19f3>) (void) _17;

  <bb 2>:
  stderr.35_2 = stderr;
  __fprintf_chk (stderr.35_2, 1, " In call_function_ffi_call.\n");
  _5 = ff_4(D)->arg_types;
  _6 = ff_4(D)->ret_type;
  _7 = ff_4(D)->nargs;
  _8 = (unsigned int) _7;
  _10 = ffi_prep_cif (&cif, 2, _8, _6, _5);
  if (_10 != 0)
    goto <bb 3>;
  else
    goto <bb 4>;

  <bb 3>:
  stderr.35_11 = stderr;
  __fprintf_chk (stderr.35_11, 1, "Error ffi_prep_cif.\n");
  exit (1);

  <bb 4>:
  _14 = ff_4(D)->arg_values;
  _15 = ff_4(D)->ret_value;
  _16 = ff_4(D)->f;
  _17 = (void (*<T19f3>) (void)) _16;
  ffi_call (&cif, _17, _15, _14);
  cif ={v} {CLOBBER};
  return;

}



;; Function void init_array(int, int, int, double*, double*, double (*)[4096], double (*)[4096], double (*)[4096]) (_Z10init_arrayiiiPdS_PA4096_dS1_S1_, funcdef_no=3258, decl_uid=66690, cgraph_uid=3080)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
READONLY = &READONLY
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
ni = &NONLOCAL
nj = &NONLOCAL
nk = &NONLOCAL
alpha = &NONLOCAL
beta = &NONLOCAL
A = &NONLOCAL
B = &NONLOCAL
C = &NONLOCAL
derefaddrtmp = &NONLOCAL
*alpha = derefaddrtmp
derefaddrtmp = &NONLOCAL
*beta = derefaddrtmp
j_79 = j_30
j_79 = &NULL
_21 = i_76
_22 = _21
_22 = &NONLOCAL
_24 = A + UNKNOWN
_25 = i_76
_26 = j_79
_27 = _25
_27 = _26
_28 = _27
_28 = &NONLOCAL
*_24 + UNKNOWN = _28
j_30 = j_79
j_30 = &NONLOCAL
i_31 = i_76
i_31 = &NONLOCAL
i_76 = i_31
i_76 = &NULL
j_80 = j_43
j_80 = &NULL
_34 = i_77
_35 = _34
_35 = &NONLOCAL
_37 = B + UNKNOWN
_38 = i_77
_39 = j_80
_40 = _38
_40 = _39
_41 = _40
_41 = &NONLOCAL
*_37 + UNKNOWN = _41
j_43 = j_80
j_43 = &NONLOCAL
i_44 = i_77
i_44 = &NONLOCAL
i_77 = i_44
i_77 = &NULL
j_81 = j_55
j_81 = &NULL
_46 = i_78
_47 = _46
_47 = &NONLOCAL
_49 = C + UNKNOWN
_50 = i_78
_51 = j_81
_52 = _50
_52 = _51
_53 = _52
_53 = &NONLOCAL
*_49 + UNKNOWN = _53
j_55 = j_81
j_55 = &NONLOCAL
i_56 = i_78
i_56 = &NONLOCAL
i_78 = i_56
i_78 = &NULL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
READONLY = { READONLY }
ESCAPED = { NULL ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
ni = { NONLOCAL }
nj = { NONLOCAL } same as ni
nk = { NONLOCAL } same as ni
alpha = { NONLOCAL } same as ni
beta = { NONLOCAL } same as ni
A = { NONLOCAL } same as ni
B = { NONLOCAL } same as ni
C = { NONLOCAL } same as ni
derefaddrtmp = { NONLOCAL } same as ni
derefaddrtmp = { NONLOCAL } same as ni
j_79 = { NULL NONLOCAL }
j_30 = { NULL NONLOCAL } same as j_79
_21 = { NULL NONLOCAL } same as j_79
i_76 = { NULL NONLOCAL } same as j_79
_22 = { NULL NONLOCAL } same as j_79
_24 = { NONLOCAL }
_25 = { NULL NONLOCAL } same as j_79
_26 = { NULL NONLOCAL } same as j_79
_27 = { NULL NONLOCAL } same as j_79
_28 = { NULL NONLOCAL } same as j_79
i_31 = { NULL NONLOCAL } same as j_79
j_80 = { NULL NONLOCAL } same as j_79
j_43 = { NULL NONLOCAL } same as j_79
_34 = { NULL NONLOCAL } same as j_79
i_77 = { NULL NONLOCAL } same as j_79
_35 = { NULL NONLOCAL } same as j_79
_37 = { NONLOCAL }
_38 = { NULL NONLOCAL } same as j_79
_39 = { NULL NONLOCAL } same as j_79
_40 = { NULL NONLOCAL } same as j_79
_41 = { NULL NONLOCAL } same as j_79
i_44 = { NULL NONLOCAL } same as j_79
j_81 = { NULL NONLOCAL } same as j_79
j_55 = { NULL NONLOCAL } same as j_79
_46 = { NULL NONLOCAL } same as j_79
i_78 = { NULL NONLOCAL } same as j_79
_47 = { NULL NONLOCAL } same as j_79
_49 = { NONLOCAL }
_50 = { NULL NONLOCAL } same as j_79
_51 = { NULL NONLOCAL } same as j_79
_52 = { NULL NONLOCAL } same as j_79
_53 = { NULL NONLOCAL } same as j_79
i_56 = { NULL NONLOCAL } same as j_79


Alias information for void init_array(int, int, int, double*, double*, double (*)[4096], double (*)[4096], double (*)[4096])

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { }

Flow-insensitive points-to information

alpha_14(D), points-to non-local, points-to vars: { }
beta_16(D), points-to non-local, points-to vars: { }
A_23(D), points-to non-local, points-to vars: { }
_24, points-to non-local, points-to vars: { }
B_36(D), points-to non-local, points-to vars: { }
_37, points-to non-local, points-to vars: { }
C_48(D), points-to non-local, points-to vars: { }
_49, points-to non-local, points-to vars: { }

;; 7 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 15 17 3 18 4 20 19 5 22 21 16 6 23 25 7 26 8 28 27 9 30 29 24 10 31 33 11 34 12 36 35 13 38 37 32 14
;;
;; Loop 5
;;  header 13, latch 35
;;  depth 1, outer 0
;;  nodes: 13 35 12 34 38 11 33 37
;;
;; Loop 6
;;  header 11, latch 33
;;  depth 2, outer 5
;;  nodes: 11 33
;;
;; Loop 3
;;  header 9, latch 27
;;  depth 1, outer 0
;;  nodes: 9 27 8 26 30 7 25 29
;;
;; Loop 4
;;  header 7, latch 25
;;  depth 2, outer 3
;;  nodes: 7 25
;;
;; Loop 1
;;  header 5, latch 19
;;  depth 1, outer 0
;;  nodes: 5 19 4 18 22 3 17 21
;;
;; Loop 2
;;  header 3, latch 17
;;  depth 2, outer 1
;;  nodes: 3 17
;; 2 succs { 15 16 }
;; 15 succs { 5 }
;; 17 succs { 3 }
;; 3 succs { 17 18 }
;; 18 succs { 4 }
;; 4 succs { 19 20 }
;; 20 succs { 6 }
;; 19 succs { 5 }
;; 5 succs { 21 22 }
;; 22 succs { 4 }
;; 21 succs { 3 }
;; 16 succs { 6 }
;; 6 succs { 23 24 }
;; 23 succs { 9 }
;; 25 succs { 7 }
;; 7 succs { 25 26 }
;; 26 succs { 8 }
;; 8 succs { 27 28 }
;; 28 succs { 10 }
;; 27 succs { 9 }
;; 9 succs { 29 30 }
;; 30 succs { 8 }
;; 29 succs { 7 }
;; 24 succs { 10 }
;; 10 succs { 31 32 }
;; 31 succs { 13 }
;; 33 succs { 11 }
;; 11 succs { 33 34 }
;; 34 succs { 12 }
;; 12 succs { 35 36 }
;; 36 succs { 14 }
;; 35 succs { 13 }
;; 13 succs { 37 38 }
;; 38 succs { 12 }
;; 37 succs { 11 }
;; 32 succs { 14 }
;; 14 succs { 1 }
find_duplicates: <bb 32> duplicate of <bb 36>
find_duplicates: <bb 34> duplicate of <bb 38>
find_duplicates: <bb 24> duplicate of <bb 28>
find_duplicates: <bb 26> duplicate of <bb 30>
find_duplicates: <bb 16> duplicate of <bb 20>
find_duplicates: <bb 18> duplicate of <bb 22>
Removing basic block 36
Removing basic block 38
Removing basic block 28
Removing basic block 30
Removing basic block 20
Removing basic block 22

Symbols to be put in SSA form
{ D.68125 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 39
Number of blocks to update: 32 ( 82%)


void init_array(int, int, int, double*, double*, double (*)[4096], double (*)[4096], double (*)[4096]) (int ni, int nj, int nk, double * alpha, double * beta, double[4096] * A, double[4096] * B, double[4096] * C)
{
  int j;
  int i;
  double[4096] * pretmp_2;
  long unsigned int pretmp_10;
  long unsigned int _21;
  long unsigned int _22;
  double[4096] * _24;
  double _25;
  double _26;
  double _27;
  double _28;
  long unsigned int _34;
  long unsigned int _35;
  double[4096] * _37;
  double _38;
  double _39;
  double _40;
  double _41;
  long unsigned int _46;
  long unsigned int _47;
  double[4096] * _49;
  double _50;
  double _51;
  double _52;
  double _53;
  long unsigned int pretmp_70;
  double pretmp_71;
  long unsigned int pretmp_72;
  long unsigned int pretmp_73;
  double[4096] * pretmp_89;
  double pretmp_90;
  long unsigned int pretmp_100;
  long unsigned int pretmp_101;
  double[4096] * pretmp_102;
  double pretmp_103;

  <bb 2>:
  *alpha_14(D) = 3.2412e+4;
  *beta_16(D) = 2.123e+3;
  if (ni_18(D) > 0)
    goto <bb 15>;
  else
    goto <bb 16>;

  <bb 15>:
  goto <bb 5>;

  <bb 17>:

  <bb 3>:
  # j_79 = PHI <j_30(17), 0(21)>
  _21 = pretmp_100;
  _22 = pretmp_101;
  _24 = pretmp_102;
  _25 = pretmp_103;
  _26 = (double) j_79;
  _27 = _25 * _26;
  _28 = _27 * 2.44140625e-4;
  *_24[j_79] = _28;
  j_30 = j_79 + 1;
  if (nk_20(D) > j_30)
    goto <bb 17>;
  else
    goto <bb 18>;

  <bb 18>:

  <bb 4>:
  i_31 = i_76 + 1;
  if (ni_18(D) > i_31)
    goto <bb 19>;
  else
    goto <bb 16>;

  <bb 19>:

  <bb 5>:
  # i_76 = PHI <i_31(19), 0(15)>
  if (nk_20(D) > 0)
    goto <bb 21>;
  else
    goto <bb 18>;

  <bb 21>:
  pretmp_100 = (long unsigned int) i_76;
  pretmp_101 = pretmp_100 * 32768;
  pretmp_102 = A_23(D) + pretmp_101;
  pretmp_103 = (double) i_76;
  goto <bb 3>;

  <bb 16>:

  <bb 6>:
  if (nk_20(D) > 0)
    goto <bb 23>;
  else
    goto <bb 24>;

  <bb 23>:
  goto <bb 9>;

  <bb 25>:

  <bb 7>:
  # j_80 = PHI <j_43(25), 0(29)>
  _34 = pretmp_73;
  _35 = pretmp_72;
  _37 = pretmp_89;
  _38 = pretmp_90;
  _39 = (double) j_80;
  _40 = _38 * _39;
  _41 = _40 * 2.44140625e-4;
  *_37[j_80] = _41;
  j_43 = j_80 + 1;
  if (nj_33(D) > j_43)
    goto <bb 25>;
  else
    goto <bb 26>;

  <bb 26>:

  <bb 8>:
  i_44 = i_77 + 1;
  if (nk_20(D) > i_44)
    goto <bb 27>;
  else
    goto <bb 24>;

  <bb 27>:

  <bb 9>:
  # i_77 = PHI <i_44(27), 0(23)>
  if (nj_33(D) > 0)
    goto <bb 29>;
  else
    goto <bb 26>;

  <bb 29>:
  pretmp_73 = (long unsigned int) i_77;
  pretmp_72 = pretmp_73 * 32768;
  pretmp_89 = B_36(D) + pretmp_72;
  pretmp_90 = (double) i_77;
  goto <bb 7>;

  <bb 24>:

  <bb 10>:
  if (ni_18(D) > 0)
    goto <bb 31>;
  else
    goto <bb 32>;

  <bb 31>:
  goto <bb 13>;

  <bb 33>:

  <bb 11>:
  # j_81 = PHI <j_55(33), 0(37)>
  _46 = pretmp_70;
  _47 = pretmp_10;
  _49 = pretmp_2;
  _50 = pretmp_71;
  _51 = (double) j_81;
  _52 = _50 * _51;
  _53 = _52 * 2.44140625e-4;
  *_49[j_81] = _53;
  j_55 = j_81 + 1;
  if (nj_33(D) > j_55)
    goto <bb 33>;
  else
    goto <bb 34>;

  <bb 34>:

  <bb 12>:
  i_56 = i_78 + 1;
  if (ni_18(D) > i_56)
    goto <bb 35>;
  else
    goto <bb 32>;

  <bb 35>:

  <bb 13>:
  # i_78 = PHI <i_56(35), 0(31)>
  if (nj_33(D) > 0)
    goto <bb 37>;
  else
    goto <bb 34>;

  <bb 37>:
  pretmp_70 = (long unsigned int) i_78;
  pretmp_10 = pretmp_70 * 32768;
  pretmp_2 = C_48(D) + pretmp_10;
  pretmp_71 = (double) i_78;
  goto <bb 11>;

  <bb 32>:

  <bb 14>:
  return;

}



;; Function void copy_array(int, int, double (*)[4096], double (*)[4096]) (_Z10copy_arrayiiPA4096_dS0_, funcdef_no=3259, decl_uid=66722, cgraph_uid=3081)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
READONLY = &READONLY
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
ni = &NONLOCAL
nj = &NONLOCAL
C_source = &NONLOCAL
C_dest = &NONLOCAL
j_25 = j_17
j_25 = &NULL
_8 = i_24
_9 = _8
_9 = &NONLOCAL
_11 = C_dest + UNKNOWN
_14 = C_source + UNKNOWN
_15 = *_14 + UNKNOWN
*_11 + UNKNOWN = _15
j_17 = j_25
j_17 = &NONLOCAL
i_18 = i_24
i_18 = &NONLOCAL
i_24 = i_18
i_24 = &NULL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
READONLY = { READONLY }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
ni = { NONLOCAL }
nj = { NONLOCAL } same as ni
C_source = { NONLOCAL } same as ni
C_dest = { NONLOCAL } same as ni
j_25 = { NULL NONLOCAL }
j_17 = { NULL NONLOCAL } same as j_25
_8 = { NULL NONLOCAL } same as j_25
i_24 = { NULL NONLOCAL } same as j_25
_9 = { NULL NONLOCAL } same as j_25
_11 = { NONLOCAL }
_14 = { NONLOCAL }
_15 = { ESCAPED NONLOCAL }
i_18 = { NULL NONLOCAL } same as j_25


Alias information for void copy_array(int, int, double (*)[4096], double (*)[4096])

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

C_dest_10(D), points-to non-local, points-to vars: { }
_11, points-to non-local, points-to vars: { }
C_source_13(D), points-to non-local, points-to vars: { }
_14, points-to non-local, points-to vars: { }

;; 3 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 7 9 3 10 4 12 11 5 14 13 8 6
;;
;; Loop 1
;;  header 5, latch 11
;;  depth 1, outer 0
;;  nodes: 5 11 4 10 14 3 9 13
;;
;; Loop 2
;;  header 3, latch 9
;;  depth 2, outer 1
;;  nodes: 3 9
;; 2 succs { 7 8 }
;; 7 succs { 5 }
;; 9 succs { 3 }
;; 3 succs { 9 10 }
;; 10 succs { 4 }
;; 4 succs { 11 12 }
;; 12 succs { 6 }
;; 11 succs { 5 }
;; 5 succs { 13 14 }
;; 14 succs { 4 }
;; 13 succs { 3 }
;; 8 succs { 6 }
;; 6 succs { 1 }
find_duplicates: <bb 8> duplicate of <bb 12>
find_duplicates: <bb 10> duplicate of <bb 14>
Removing basic block 12
Removing basic block 14

Symbols to be put in SSA form
{ D.68127 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 15
Number of blocks to update: 12 ( 80%)


void copy_array(int, int, double (*)[4096], double (*)[4096]) (int ni, int nj, double[4096] * C_source, double[4096] * C_dest)
{
  int j;
  int i;
  double[4096] * pretmp_2;
  long unsigned int pretmp_3;
  long unsigned int _8;
  long unsigned int _9;
  double[4096] * _11;
  double[4096] * _14;
  double _15;
  double[4096] * pretmp_21;
  long unsigned int pretmp_22;

  <bb 2>:
  if (ni_6(D) > 0)
    goto <bb 7>;
  else
    goto <bb 8>;

  <bb 7>:
  goto <bb 5>;

  <bb 9>:

  <bb 3>:
  # j_25 = PHI <j_17(9), 0(13)>
  _8 = pretmp_22;
  _9 = pretmp_3;
  _11 = pretmp_2;
  _14 = pretmp_21;
  _15 = *_14[j_25];
  *_11[j_25] = _15;
  j_17 = j_25 + 1;
  if (nj_7(D) > j_17)
    goto <bb 9>;
  else
    goto <bb 10>;

  <bb 10>:

  <bb 4>:
  i_18 = i_24 + 1;
  if (ni_6(D) > i_18)
    goto <bb 11>;
  else
    goto <bb 8>;

  <bb 11>:

  <bb 5>:
  # i_24 = PHI <i_18(11), 0(7)>
  if (nj_7(D) > 0)
    goto <bb 13>;
  else
    goto <bb 10>;

  <bb 13>:
  pretmp_22 = (long unsigned int) i_24;
  pretmp_3 = pretmp_22 * 32768;
  pretmp_2 = C_dest_10(D) + pretmp_3;
  pretmp_21 = C_source_13(D) + pretmp_3;
  goto <bb 3>;

  <bb 8>:

  <bb 6>:
  return;

}



;; Function void compareResults(int, int, double (*)[4096], double (*)[4096]) (_Z14compareResultsiiPA4096_dS0_, funcdef_no=3260, decl_uid=66738, cgraph_uid=3082)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
READONLY = &READONLY
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
ni = &NONLOCAL
nj = &NONLOCAL
C = &NONLOCAL
C_output = &NONLOCAL
j_53 = j_22
j_53 = &NULL
fail_54 = fail_3
fail_54 = fail_49
_8 = i_52
_9 = _8
_9 = &NONLOCAL
_11 = C_output + UNKNOWN
_13 = *_11 + UNKNOWN
_17 = C + UNKNOWN
_18 = *_17 + UNKNOWN
_27 = _18
_28 = _27
_29 = _27
_29 = _28
_30 = _29
_31 = _13
_32 = _31
_33 = _31
_33 = _32
_34 = _33
_38 = _37
_42 = _37
_42 = _38
_39 = _18
_39 = &NONLOCAL
_40 = _39
_41 = _40
_43 = _40
_43 = _41
_44 = _42
_44 = _43
_45 = _44
_46 = _44
_46 = _45
_47 = _46
_47 = &NONLOCAL
_20 = _47
fail_21 = fail_54
fail_21 = &NONLOCAL
fail_3 = fail_54
fail_3 = fail_21
fail_3 = fail_54
j_22 = j_53
j_22 = &NONLOCAL
fail_19 = fail_3
fail_19 = fail_49
i_23 = i_52
i_23 = &NONLOCAL
fail_49 = fail_19
fail_49 = &NULL
i_52 = i_23
i_52 = &NULL
fail_14 = fail_19
fail_14 = &NULL
stderr = NONLOCAL
stderr.38_24 = stderr
ESCAPED = stderr.38_24
ESCAPED = &NONLOCAL
ESCAPED = &READONLY
ESCAPED = &NONLOCAL
ESCAPED = fail_14
_36 = _18
_36 = _13
_37 = _36

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
READONLY = { READONLY }
ESCAPED = { NULL READONLY ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as stderr
STOREDANYTHING = { }
INTEGER = { ANYTHING }
ni = { NONLOCAL }
nj = { NONLOCAL } same as ni
C = { NONLOCAL } same as ni
C_output = { NONLOCAL } same as ni
j_53 = { NULL NONLOCAL }
j_22 = { NULL NONLOCAL } same as j_53
fail_54 = { NULL NONLOCAL } same as j_53
fail_3 = { NULL NONLOCAL } same as j_53
fail_49 = { NULL NONLOCAL } same as j_53
_8 = { NULL NONLOCAL } same as j_53
i_52 = { NULL NONLOCAL } same as j_53
_9 = { NULL NONLOCAL } same as j_53
_11 = { NONLOCAL }
_13 = { ESCAPED NONLOCAL }
_17 = { NONLOCAL }
_18 = { ESCAPED NONLOCAL }
_27 = { ESCAPED NONLOCAL } same as _18
_28 = { ESCAPED NONLOCAL } same as _18
_29 = { ESCAPED NONLOCAL } same as _18
_30 = { ESCAPED NONLOCAL } same as _18
_31 = { ESCAPED NONLOCAL } same as _13
_32 = { ESCAPED NONLOCAL } same as _13
_33 = { ESCAPED NONLOCAL } same as _13
_34 = { ESCAPED NONLOCAL } same as _13
_38 = { ESCAPED NONLOCAL }
_37 = { ESCAPED NONLOCAL } same as _38
_42 = { ESCAPED NONLOCAL } same as _38
_39 = { ESCAPED NONLOCAL }
_40 = { ESCAPED NONLOCAL } same as _39
_41 = { ESCAPED NONLOCAL } same as _39
_43 = { ESCAPED NONLOCAL } same as _39
_44 = { ESCAPED NONLOCAL }
_45 = { ESCAPED NONLOCAL } same as _44
_46 = { ESCAPED NONLOCAL } same as _44
_47 = { ESCAPED NONLOCAL } same as _44
_20 = { ESCAPED NONLOCAL } same as _44
fail_21 = { NULL NONLOCAL } same as j_53
fail_19 = { NULL NONLOCAL } same as j_53
i_23 = { NULL NONLOCAL } same as j_53
fail_14 = { NULL NONLOCAL } same as j_53
stderr.38_24 = { ESCAPED NONLOCAL } same as stderr
stderr = { ESCAPED NONLOCAL }
__fprintf_chk = { }
_36 = { ESCAPED NONLOCAL } same as _38


Alias information for void compareResults(int, int, double (*)[4096], double (*)[4096])

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { }

Flow-insensitive points-to information

C_output_10(D), points-to non-local, points-to vars: { }
_11, points-to non-local, points-to vars: { }
C_16(D), points-to non-local, points-to vars: { }
_17, points-to non-local, points-to vars: { }
stderr.38_24, points-to non-local, points-to escaped, points-to vars: { }

;; 3 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 21 31 3 23 4 5 6 25 7 8 27 26 9 10 28 11 12 29 13 14 30 15 16 32 17 34 33 18 36 35 22 19 24 20 37
;;
;; Loop 1
;;  header 18, latch 33
;;  depth 1, outer 0
;;  nodes: 18 33 17 32 36 16 30 15 26 8 25 7 6 5 23 4 3 31 35 14 29 13 12 28 11 10 37 9 20 27 24
;;
;; Loop 2
;;  header 3, latch 31
;;  depth 2, outer 1
;;  nodes: 3 31 16 30 15 26 8 25 7 6 5 23 4 14 29 13 12 28 11 10 37 9 20 27 24
;; 2 succs { 21 22 }
;; 21 succs { 18 }
;; 31 succs { 3 }
;; 3 succs { 4 23 }
;; 23 succs { 5 }
;; 4 succs { 5 }
;; 5 succs { 6 24 }
;; 6 succs { 7 25 }
;; 25 succs { 8 }
;; 7 succs { 8 }
;; 8 succs { 26 27 }
;; 27 succs { 20 }
;; 26 succs { 16 }
;; 9 succs { 10 }
;; 10 succs { 11 28 }
;; 28 succs { 12 }
;; 11 succs { 12 }
;; 12 succs { 13 29 }
;; 29 succs { 14 }
;; 13 succs { 14 }
;; 14 succs { 15 30 }
;; 30 succs { 16 }
;; 15 succs { 16 }
;; 16 succs { 31 32 }
;; 32 succs { 17 }
;; 17 succs { 33 34 }
;; 34 succs { 19 }
;; 33 succs { 18 }
;; 18 succs { 35 36 }
;; 36 succs { 17 }
;; 35 succs { 3 }
;; 22 succs { 19 }
;; 19 succs { 1 }
;; 24 succs { 20 }
;; 20 succs { 9 37 }
;; 37 succs { 10 }
find_duplicates: <bb 24> duplicate of <bb 27>
Removing basic block 27

Symbols to be put in SSA form
{ D.68129 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 38
Number of blocks to update: 36 ( 95%)


void compareResults(int, int, double (*)[4096], double (*)[4096]) (int ni, int nj, double[4096] * C, double[4096] * C_output)
{
  bool iftmp.1;
  float D.68697;
  int fail;
  int j;
  int i;
  struct _IO_FILE * stderr.38;
  long unsigned int _8;
  long unsigned int _9;
  double[4096] * _11;
  double _13;
  double[4096] * _17;
  double _18;
  double _20;
  float _27;
  float _28;
  float _29;
  double _30;
  float _31;
  float _32;
  float _33;
  double _34;
  double _36;
  float _37;
  float _38;
  double _39;
  float _40;
  float _41;
  float _42;
  float _43;
  float _44;
  float _45;
  float _46;
  float _47;
  long unsigned int pretmp_56;
  long unsigned int pretmp_57;
  double[4096] * pretmp_58;
  double[4096] * pretmp_59;

  <bb 2>:
  if (ni_6(D) > 0)
    goto <bb 21>;
  else
    goto <bb 22>;

  <bb 21>:
  goto <bb 18>;

  <bb 31>:

  <bb 3>:
  # j_53 = PHI <j_22(31), 0(35)>
  # fail_54 = PHI <fail_3(31), fail_49(35)>
  _8 = pretmp_56;
  _9 = pretmp_57;
  _11 = pretmp_58;
  _13 = *_11[j_53];
  _17 = pretmp_59;
  _18 = *_17[j_53];
  _27 = (float) _18;
  if (_27 < 0.0)
    goto <bb 4>;
  else
    goto <bb 23>;

  <bb 23>:
  goto <bb 5>;

  <bb 4>:
  _28 = -_27;

  <bb 5>:
  # _29 = PHI <_27(23), _28(4)>
  _30 = (double) _29;
  if (_30 < 1.00000000000000002081668171172168513294309377670288085938e-2)
    goto <bb 6>;
  else
    goto <bb 24>;

  <bb 6>:
  _31 = (float) _13;
  if (_31 < 0.0)
    goto <bb 7>;
  else
    goto <bb 25>;

  <bb 25>:
  goto <bb 8>;

  <bb 7>:
  _32 = -_31;

  <bb 8>:
  # _33 = PHI <_31(25), _32(7)>
  _34 = (double) _33;
  if (_34 < 1.00000000000000002081668171172168513294309377670288085938e-2)
    goto <bb 26>;
  else
    goto <bb 24>;

  <bb 26>:
  goto <bb 16>;

  <bb 9>:
  _38 = -_37;

  <bb 10>:
  # _42 = PHI <_37(37), _38(9)>
  _39 = _18 + 9.99999993922529029077850282192230224609375e-9;
  _40 = (float) _39;
  if (_40 < 0.0)
    goto <bb 11>;
  else
    goto <bb 28>;

  <bb 28>:
  goto <bb 12>;

  <bb 11>:
  _41 = -_40;

  <bb 12>:
  # _43 = PHI <_40(28), _41(11)>
  _44 = _42 / _43;
  if (_44 < 0.0)
    goto <bb 13>;
  else
    goto <bb 29>;

  <bb 29>:
  goto <bb 14>;

  <bb 13>:
  _45 = -_44;

  <bb 14>:
  # _46 = PHI <_44(29), _45(13)>
  _47 = _46 * 1.0e+2;
  _20 = (double) _47;
  if (_20 > 5.000000000000000277555756156289135105907917022705078125e-2)
    goto <bb 15>;
  else
    goto <bb 30>;

  <bb 30>:
  goto <bb 16>;

  <bb 15>:
  fail_21 = fail_54 + 1;

  <bb 16>:
  # fail_3 = PHI <fail_54(30), fail_21(15), fail_54(26)>
  j_22 = j_53 + 1;
  if (nj_7(D) > j_22)
    goto <bb 31>;
  else
    goto <bb 32>;

  <bb 32>:

  <bb 17>:
  # fail_19 = PHI <fail_3(32), fail_49(36)>
  i_23 = i_52 + 1;
  if (ni_6(D) > i_23)
    goto <bb 33>;
  else
    goto <bb 34>;

  <bb 34>:
  goto <bb 19>;

  <bb 33>:

  <bb 18>:
  # fail_49 = PHI <fail_19(33), 0(21)>
  # i_52 = PHI <i_23(33), 0(21)>
  if (nj_7(D) > 0)
    goto <bb 35>;
  else
    goto <bb 36>;

  <bb 36>:
  goto <bb 17>;

  <bb 35>:
  pretmp_56 = (long unsigned int) i_52;
  pretmp_57 = pretmp_56 * 32768;
  pretmp_58 = C_output_10(D) + pretmp_57;
  pretmp_59 = C_16(D) + pretmp_57;
  goto <bb 3>;

  <bb 22>:

  <bb 19>:
  # fail_14 = PHI <fail_19(34), 0(22)>
  stderr.38_24 = stderr;
  __fprintf_chk (stderr.38_24, 1, "Non-Matching CPU-GPU Outputs Beyond Error Threshold of %4.2f Percent: %d\n", 5.000000000000000277555756156289135105907917022705078125e-2, fail_14);
  return;

  <bb 24>:

  <bb 20>:
  _36 = _18 - _13;
  _37 = (float) _36;
  if (_37 < 0.0)
    goto <bb 9>;
  else
    goto <bb 37>;

  <bb 37>:
  goto <bb 10>;

}



;; Function void gemm(int, int, int, double, double, double (*)[4096], double (*)[4096], double (*)[4096]) (_Z4gemmiiiddPA4096_dS0_S0_, funcdef_no=3262, decl_uid=66774, cgraph_uid=3084)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
READONLY = &READONLY
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
ni = &NONLOCAL
nj = &NONLOCAL
nk = &NONLOCAL
alpha = &NONLOCAL
beta = &NONLOCAL
A = &NONLOCAL
B = &NONLOCAL
C = &NONLOCAL
j_45 = j_35
j_45 = &NULL
_11 = i_44
_12 = _11
_12 = &NONLOCAL
_13 = C + UNKNOWN
_14 = *_13 + UNKNOWN
_16 = _14
_16 = beta
*_13 + UNKNOWN = _16
k_46 = k_34
k_46 = &NULL
_20 = *_13 + UNKNOWN
_22 = A + UNKNOWN
_23 = *_22 + UNKNOWN
_25 = _23
_25 = alpha
_26 = k_46
_27 = _26
_27 = &NONLOCAL
_29 = B + UNKNOWN
_30 = *_29 + UNKNOWN
_31 = _25
_31 = _30
_32 = _20
_32 = _31
*_13 + UNKNOWN = _32
k_34 = k_46
k_34 = &NONLOCAL
j_35 = j_45
j_35 = &NONLOCAL
i_36 = i_44
i_36 = &NONLOCAL
i_44 = i_36
i_44 = &NULL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
READONLY = { READONLY }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
ni = { NONLOCAL }
nj = { NONLOCAL } same as ni
nk = { NONLOCAL } same as ni
alpha = { NONLOCAL } same as ni
beta = { NONLOCAL } same as ni
A = { NONLOCAL } same as ni
B = { NONLOCAL } same as ni
C = { NONLOCAL } same as ni
j_45 = { NULL NONLOCAL }
j_35 = { NULL NONLOCAL } same as j_45
_11 = { NULL NONLOCAL } same as j_45
i_44 = { NULL NONLOCAL } same as j_45
_12 = { NULL NONLOCAL } same as j_45
_13 = { NONLOCAL }
_14 = { ESCAPED NONLOCAL }
_16 = { ESCAPED NONLOCAL }
k_46 = { NULL NONLOCAL } same as j_45
k_34 = { NULL NONLOCAL } same as j_45
_20 = { ESCAPED NONLOCAL }
_22 = { NONLOCAL }
_23 = { ESCAPED NONLOCAL }
_25 = { ESCAPED NONLOCAL }
_26 = { NULL NONLOCAL } same as j_45
_27 = { NULL NONLOCAL } same as j_45
_29 = { NONLOCAL }
_30 = { ESCAPED NONLOCAL }
_31 = { ESCAPED NONLOCAL }
_32 = { ESCAPED NONLOCAL }
i_36 = { NULL NONLOCAL } same as j_45


Alias information for void gemm(int, int, int, double, double, double (*)[4096], double (*)[4096], double (*)[4096])

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

C_10(D), points-to non-local, points-to vars: { }
_13, points-to non-local, points-to vars: { }
A_21(D), points-to non-local, points-to vars: { }
_22, points-to non-local, points-to vars: { }
B_28(D), points-to non-local, points-to vars: { }
_29, points-to non-local, points-to vars: { }

;; 4 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 9 15 3 12 11 4 13 14 5 16 6 18 17 7 20 19 10 8
;;
;; Loop 1
;;  header 7, latch 17
;;  depth 1, outer 0
;;  nodes: 7 17 6 16 20 5 14 12 3 15 19 4 13 11
;;
;; Loop 2
;;  header 3, latch 15
;;  depth 2, outer 1
;;  nodes: 3 15 5 14 12 4 13 11
;;
;; Loop 3
;;  header 4, latch 13
;;  depth 3, outer 2
;;  nodes: 4 13
;; 2 succs { 9 10 }
;; 9 succs { 7 }
;; 15 succs { 3 }
;; 3 succs { 11 12 }
;; 12 succs { 5 }
;; 11 succs { 4 }
;; 4 succs { 13 14 }
;; 13 succs { 4 }
;; 14 succs { 5 }
;; 5 succs { 15 16 }
;; 16 succs { 6 }
;; 6 succs { 17 18 }
;; 18 succs { 8 }
;; 17 succs { 7 }
;; 7 succs { 19 20 }
;; 20 succs { 6 }
;; 19 succs { 3 }
;; 10 succs { 8 }
;; 8 succs { 1 }
find_duplicates: <bb 10> duplicate of <bb 18>
find_duplicates: <bb 16> duplicate of <bb 20>
find_duplicates: <bb 12> duplicate of <bb 14>
Removing basic block 18
Removing basic block 20
Removing basic block 14

Symbols to be put in SSA form
{ D.68134 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 21
Number of blocks to update: 17 ( 81%)


void gemm(int, int, int, double, double, double (*)[4096], double (*)[4096], double (*)[4096]) (int ni, int nj, int nk, double alpha, double beta, double[4096] * A, double[4096] * B, double[4096] * C)
{
  int k;
  int j;
  int i;
  long unsigned int _11;
  long unsigned int _12;
  double[4096] * _13;
  double _14;
  double _16;
  double _20;
  double[4096] * _22;
  double _23;
  double _25;
  long unsigned int _26;
  long unsigned int _27;
  double[4096] * _29;
  double _30;
  double _31;
  double _32;
  long unsigned int pretmp_58;
  long unsigned int pretmp_59;
  double[4096] * pretmp_60;
  double prephitmp_63;
  double[4096] * pretmp_64;

  <bb 2>:
  if (ni_8(D) > 0)
    goto <bb 9>;
  else
    goto <bb 10>;

  <bb 9>:
  goto <bb 7>;

  <bb 15>:

  <bb 3>:
  # j_45 = PHI <j_35(15), 0(19)>
  _11 = pretmp_58;
  _12 = pretmp_59;
  _13 = pretmp_60;
  _14 = *_13[j_45];
  _16 = _14 * beta_15(D);
  *_13[j_45] = _16;
  if (nk_18(D) > 0)
    goto <bb 11>;
  else
    goto <bb 12>;

  <bb 12>:
  goto <bb 5>;

  <bb 11>:
  pretmp_64 = A_21(D) + _12;

  <bb 4>:
  # k_46 = PHI <k_34(13), 0(11)>
  # prephitmp_63 = PHI <_32(13), _16(11)>
  _20 = prephitmp_63;
  _22 = pretmp_64;
  _23 = *_22[k_46];
  _25 = _23 * alpha_24(D);
  _26 = (long unsigned int) k_46;
  _27 = _26 * 32768;
  _29 = B_28(D) + _27;
  _30 = *_29[j_45];
  _31 = _25 * _30;
  _32 = _20 + _31;
  *_13[j_45] = _32;
  k_34 = k_46 + 1;
  if (nk_18(D) > k_34)
    goto <bb 13>;
  else
    goto <bb 12>;

  <bb 13>:
  goto <bb 4>;

  <bb 5>:
  j_35 = j_45 + 1;
  if (nj_9(D) > j_35)
    goto <bb 15>;
  else
    goto <bb 16>;

  <bb 16>:

  <bb 6>:
  i_36 = i_44 + 1;
  if (ni_8(D) > i_36)
    goto <bb 17>;
  else
    goto <bb 10>;

  <bb 17>:

  <bb 7>:
  # i_44 = PHI <i_36(17), 0(9)>
  if (nj_9(D) > 0)
    goto <bb 19>;
  else
    goto <bb 16>;

  <bb 19>:
  pretmp_58 = (long unsigned int) i_44;
  pretmp_59 = pretmp_58 * 32768;
  pretmp_60 = C_10(D) + pretmp_59;
  goto <bb 3>;

  <bb 10>:

  <bb 8>:
  return;

}



;; Function void gemm_original(int, int, int, double, double, double (*)[4096], double (*)[4096], double (*)[4096]) (_Z13gemm_originaliiiddPA4096_dS0_S0_, funcdef_no=3263, decl_uid=66799, cgraph_uid=3085)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
READONLY = &READONLY
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
ni = &NONLOCAL
nj = &NONLOCAL
nk = &NONLOCAL
alpha = &NONLOCAL
beta = &NONLOCAL
A = &NONLOCAL
B = &NONLOCAL
C = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &spec
_13 = spec
_14 = _13
_15 = _14
_15 = &NONLOCAL
_16 = spec
_17 = _16
_18 = _15
_18 = _17
seq_start = NONLOCAL
seq_start = _18
ESCAPED = _18
j_66 = j_38
j_66 = &NULL
_20 = i_65
_21 = _20
_21 = &NONLOCAL
_22 = C + UNKNOWN
_24 = *_22 + UNKNOWN
_25 = beta
_25 = _24
*_22 + UNKNOWN = _25
k_67 = k_37
k_67 = &NULL
_26 = *_22 + UNKNOWN
_27 = A + UNKNOWN
_29 = *_27 + UNKNOWN
_30 = alpha
_30 = _29
_31 = k_67
_32 = _31
_32 = &NONLOCAL
_33 = B + UNKNOWN
_34 = *_33 + UNKNOWN
_35 = _30
_35 = _34
_36 = _26
_36 = _35
*_22 + UNKNOWN = _36
k_37 = k_67
k_37 = &NONLOCAL
j_38 = j_66
j_38 = &NONLOCAL
i_39 = i_65
i_39 = &NONLOCAL
i_65 = i_39
i_65 = &NULL
ESCAPED = &NONLOCAL
ESCAPED = &spec
_41 = spec
_42 = _41
_43 = _42
_43 = &NONLOCAL
_44 = spec
_45 = _44
_46 = _43
_46 = _45
seq_stop = NONLOCAL
seq_stop = _46
ESCAPED = _46

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
READONLY = { READONLY }
ESCAPED = { ESCAPED NONLOCAL spec spec }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
ni = { NONLOCAL }
nj = { NONLOCAL } same as ni
nk = { NONLOCAL } same as ni
alpha = { NONLOCAL } same as ni
beta = { NONLOCAL } same as ni
A = { NONLOCAL } same as ni
B = { NONLOCAL } same as ni
C = { NONLOCAL } same as ni
clock_gettime = { }
spec = { ESCAPED NONLOCAL } same as _13
_13 = { ESCAPED NONLOCAL }
_14 = { ESCAPED NONLOCAL } same as _13
_15 = { ESCAPED NONLOCAL }
_16 = { ESCAPED NONLOCAL } same as _13
_17 = { ESCAPED NONLOCAL } same as _13
_18 = { ESCAPED NONLOCAL } same as _15
seq_start = { ESCAPED NONLOCAL }
j_66 = { NULL NONLOCAL }
j_38 = { NULL NONLOCAL } same as j_66
_20 = { NULL NONLOCAL } same as j_66
i_65 = { NULL NONLOCAL } same as j_66
_21 = { NULL NONLOCAL } same as j_66
_22 = { NONLOCAL }
_24 = { ESCAPED NONLOCAL }
_25 = { ESCAPED NONLOCAL }
k_67 = { NULL NONLOCAL } same as j_66
k_37 = { NULL NONLOCAL } same as j_66
_26 = { ESCAPED NONLOCAL }
_27 = { NONLOCAL }
_29 = { ESCAPED NONLOCAL }
_30 = { ESCAPED NONLOCAL }
_31 = { NULL NONLOCAL } same as j_66
_32 = { NULL NONLOCAL } same as j_66
_33 = { NONLOCAL }
_34 = { ESCAPED NONLOCAL }
_35 = { ESCAPED NONLOCAL }
_36 = { ESCAPED NONLOCAL }
i_39 = { NULL NONLOCAL } same as j_66
spec = { ESCAPED NONLOCAL } same as _41
_41 = { ESCAPED NONLOCAL }
_42 = { ESCAPED NONLOCAL } same as _41
_43 = { ESCAPED NONLOCAL }
_44 = { ESCAPED NONLOCAL } same as _41
_45 = { ESCAPED NONLOCAL } same as _41
_46 = { ESCAPED NONLOCAL } same as _43
seq_stop = { ESCAPED NONLOCAL }


Alias information for void gemm_original(int, int, int, double, double, double (*)[4096], double (*)[4096], double (*)[4096])

Aliased symbols

spec, UID D.68781, struct timespec, is addressable
spec, UID D.68768, struct timespec, is addressable

Call clobber information

ESCAPED, points-to non-local, points-to vars: { D.68768 D.68781 }

Flow-insensitive points-to information

A_8(D), points-to non-local, points-to vars: { }
B_9(D), points-to non-local, points-to vars: { }
C_10(D), points-to non-local, points-to vars: { }
_22, points-to non-local, points-to vars: { }
_27, points-to non-local, points-to vars: { }
_33, points-to non-local, points-to vars: { }

;; 4 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 9 15 3 12 11 4 13 14 5 16 6 18 17 7 20 19 10 8
;;
;; Loop 1
;;  header 7, latch 17
;;  depth 1, outer 0
;;  nodes: 7 17 6 16 20 5 14 12 3 15 19 4 13 11
;;
;; Loop 2
;;  header 3, latch 15
;;  depth 2, outer 1
;;  nodes: 3 15 5 14 12 4 13 11
;;
;; Loop 3
;;  header 4, latch 13
;;  depth 3, outer 2
;;  nodes: 4 13
;; 2 succs { 9 10 }
;; 9 succs { 7 }
;; 15 succs { 3 }
;; 3 succs { 11 12 }
;; 12 succs { 5 }
;; 11 succs { 4 }
;; 4 succs { 13 14 }
;; 13 succs { 4 }
;; 14 succs { 5 }
;; 5 succs { 15 16 }
;; 16 succs { 6 }
;; 6 succs { 17 18 }
;; 18 succs { 8 }
;; 17 succs { 7 }
;; 7 succs { 19 20 }
;; 20 succs { 6 }
;; 19 succs { 3 }
;; 10 succs { 8 }
;; 8 succs { 1 }
find_duplicates: <bb 10> duplicate of <bb 18>
find_duplicates: <bb 16> duplicate of <bb 20>
find_duplicates: <bb 12> duplicate of <bb 14>
Removing basic block 18
Removing basic block 20
Removing basic block 14

Symbols to be put in SSA form
{ D.68136 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 21
Number of blocks to update: 17 ( 81%)


void gemm_original(int, int, int, double, double, double (*)[4096], double (*)[4096], double (*)[4096]) (int ni, int nj, int nk, double alpha, double beta, double[4096] * A, double[4096] * B, double[4096] * C)
{
  struct timespec spec;
  int k;
  int j;
  int i;
  struct timespec spec;
  long int _13;
  long unsigned int _14;
  long unsigned int _15;
  long int _16;
  long unsigned int _17;
  uint64_t _18;
  long unsigned int _20;
  long unsigned int _21;
  double[4096] * _22;
  double _24;
  double _25;
  double _26;
  double[4096] * _27;
  double _29;
  double _30;
  long unsigned int _31;
  long unsigned int _32;
  double[4096] * _33;
  double _34;
  double _35;
  double _36;
  long int _41;
  long unsigned int _42;
  long unsigned int _43;
  long int _44;
  long unsigned int _45;
  uint64_t _46;
  long unsigned int pretmp_79;
  long unsigned int pretmp_80;
  double[4096] * pretmp_81;
  double prephitmp_84;
  double[4096] * pretmp_85;

  <bb 2>:
  clock_gettime (1, &spec);
  _13 = spec.tv_sec;
  _14 = (long unsigned int) _13;
  _15 = _14 * 1000000000;
  _16 = spec.tv_nsec;
  _17 = (long unsigned int) _16;
  _18 = _15 + _17;
  spec ={v} {CLOBBER};
  seq_start = _18;
  if (ni_3(D) > 0)
    goto <bb 9>;
  else
    goto <bb 10>;

  <bb 9>:
  goto <bb 7>;

  <bb 15>:

  <bb 3>:
  # j_66 = PHI <j_38(15), 0(19)>
  _20 = pretmp_79;
  _21 = pretmp_80;
  _22 = pretmp_81;
  _24 = *_22[j_66];
  _25 = beta_7(D) * _24;
  *_22[j_66] = _25;
  if (nk_5(D) > 0)
    goto <bb 11>;
  else
    goto <bb 12>;

  <bb 12>:
  goto <bb 5>;

  <bb 11>:
  pretmp_85 = A_8(D) + _21;

  <bb 4>:
  # k_67 = PHI <k_37(13), 0(11)>
  # prephitmp_84 = PHI <_36(13), _25(11)>
  _26 = prephitmp_84;
  _27 = pretmp_85;
  _29 = *_27[k_67];
  _30 = alpha_6(D) * _29;
  _31 = (long unsigned int) k_67;
  _32 = _31 * 32768;
  _33 = B_9(D) + _32;
  _34 = *_33[j_66];
  _35 = _30 * _34;
  _36 = _26 + _35;
  *_22[j_66] = _36;
  k_37 = k_67 + 1;
  if (nk_5(D) > k_37)
    goto <bb 13>;
  else
    goto <bb 12>;

  <bb 13>:
  goto <bb 4>;

  <bb 5>:
  j_38 = j_66 + 1;
  if (nj_4(D) > j_38)
    goto <bb 15>;
  else
    goto <bb 16>;

  <bb 16>:

  <bb 6>:
  i_39 = i_65 + 1;
  if (ni_3(D) > i_39)
    goto <bb 17>;
  else
    goto <bb 10>;

  <bb 17>:

  <bb 7>:
  # i_65 = PHI <i_39(17), 0(9)>
  if (nj_4(D) > 0)
    goto <bb 19>;
  else
    goto <bb 16>;

  <bb 19>:
  pretmp_79 = (long unsigned int) i_65;
  pretmp_80 = pretmp_79 * 32768;
  pretmp_81 = C_10(D) + pretmp_80;
  goto <bb 3>;

  <bb 10>:

  <bb 8>:
  clock_gettime (1, &spec);
  _41 = spec.tv_sec;
  _42 = (long unsigned int) _41;
  _43 = _42 * 1000000000;
  _44 = spec.tv_nsec;
  _45 = (long unsigned int) _44;
  _46 = _43 + _45;
  spec ={v} {CLOBBER};
  seq_stop = _46;
  return;

}



;; Function void gemm_omp_kernel(int, int, int, double, double, double (*)[4096], double (*)[4096], double (*)[4096]) (_Z15gemm_omp_kerneliiiddPA4096_dS0_S0_, funcdef_no=3264, decl_uid=66809, cgraph_uid=3086)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
READONLY = &READONLY
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
ni = &NONLOCAL
nj = &NONLOCAL
nk = &NONLOCAL
alpha = &NONLOCAL
beta = &NONLOCAL
A = &NONLOCAL
B = &NONLOCAL
C = &NONLOCAL
.omp_data_o.42.0+128 = alpha
.omp_data_o.42.0+128 = beta
.omp_data_o.42.128+64 = A
.omp_data_o.42.192+64 = B
.omp_data_o.42.256+64 = C
.omp_data_o.42.320+96 = ni
.omp_data_o.42.320+96 = nj
.omp_data_o.42.320+96 = nk
ESCAPED = &_Z15gemm_omp_kerneliiiddPA4096_dS0_S0_._omp_fn.0
ESCAPED = &.omp_data_o.42.0+128
ESCAPED = &NONLOCAL
ESCAPED = &.omp_data_o.42.0+128

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
READONLY = { READONLY }
ESCAPED = { ESCAPED NONLOCAL .omp_data_o.42.0+128 .omp_data_o.42.128+64 .omp_data_o.42.192+64 .omp_data_o.42.256+64 .omp_data_o.42.320+96 _Z15gemm_omp_kerneliiiddPA4096_dS0_S0_._omp_fn.0 }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
ni = { NONLOCAL }
nj = { NONLOCAL } same as ni
nk = { NONLOCAL } same as ni
alpha = { NONLOCAL } same as ni
beta = { NONLOCAL } same as ni
A = { NONLOCAL } same as ni
B = { NONLOCAL } same as ni
C = { NONLOCAL } same as ni
.omp_data_o.42.0+128 = { ESCAPED NONLOCAL }
.omp_data_o.42.128+64 = { ESCAPED NONLOCAL }
.omp_data_o.42.192+64 = { ESCAPED NONLOCAL }
.omp_data_o.42.256+64 = { ESCAPED NONLOCAL }
.omp_data_o.42.320+96 = { ESCAPED NONLOCAL }
GOMP_parallel_start = { }
_Z15gemm_omp_kerneliiiddPA4096_dS0_S0_._omp_fn.0 = { ESCAPED NONLOCAL }
GOMP_parallel_end = { }


Alias information for void gemm_omp_kernel(int, int, int, double, double, double (*)[4096], double (*)[4096], double (*)[4096])

Aliased symbols

.omp_data_o.42, UID D.67743, struct .omp_data_s.41, is addressable

Call clobber information

ESCAPED, points-to non-local, points-to vars: { D.67743 }

Flow-insensitive points-to information

A_6(D), points-to non-local, points-to vars: { }
B_8(D), points-to non-local, points-to vars: { }
C_10(D), points-to non-local, points-to vars: { }

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
void gemm_omp_kernel(int, int, int, double, double, double (*)[4096], double (*)[4096], double (*)[4096]) (int ni, int nj, int nk, double alpha, double beta, double[4096] * A, double[4096] * B, double[4096] * C)
{
  struct .omp_data_s.41 .omp_data_o.42;

  <bb 2>:
  .omp_data_o.42.alpha = alpha_2(D);
  .omp_data_o.42.beta = beta_4(D);
  .omp_data_o.42.A = A_6(D);
  .omp_data_o.42.B = B_8(D);
  .omp_data_o.42.C = C_10(D);
  .omp_data_o.42.ni = ni_12(D);
  .omp_data_o.42.nj = nj_14(D);
  .omp_data_o.42.nk = nk_16(D);
  __builtin_GOMP_parallel_start (_Z15gemm_omp_kerneliiiddPA4096_dS0_S0_._omp_fn.0, &.omp_data_o.42, 8);
  _Z15gemm_omp_kerneliiiddPA4096_dS0_S0_._omp_fn.0 (&.omp_data_o.42);
  __builtin_GOMP_parallel_end ();
  return;

}



;; Function void gemm_omp(int, int, int, double, double, double (*)[4096], double (*)[4096], double (*)[4096]) (_Z8gemm_ompiiiddPA4096_dS0_S0_, funcdef_no=3265, decl_uid=66831, cgraph_uid=3087)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
READONLY = &READONLY
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
ni = &NONLOCAL
nj = &NONLOCAL
nk = &NONLOCAL
alpha = &NONLOCAL
beta = &NONLOCAL
A = &NONLOCAL
B = &NONLOCAL
C_outputFromOMP = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &spec
_13 = spec
_14 = _13
_15 = _14
_15 = &NONLOCAL
_16 = spec
_17 = _16
_18 = _15
_18 = _17
omp_start = NONLOCAL
omp_start = _18
ESCAPED = _18
.omp_data_o.42.0+128 = alpha
.omp_data_o.42.0+128 = beta
.omp_data_o.42.128+64 = A
.omp_data_o.42.192+64 = B
.omp_data_o.42.256+64 = C_outputFromOMP
.omp_data_o.42.320+96 = ni
.omp_data_o.42.320+96 = nj
.omp_data_o.42.320+96 = nk
ESCAPED = &_Z15gemm_omp_kerneliiiddPA4096_dS0_S0_._omp_fn.0
ESCAPED = &.omp_data_o.42.0+128
ESCAPED = &NONLOCAL
ESCAPED = &.omp_data_o.42.0+128
ESCAPED = &NONLOCAL
ESCAPED = &spec
_19 = spec
_20 = _19
_21 = _20
_21 = &NONLOCAL
_22 = spec
_23 = _22
_24 = _21
_24 = _23
omp_stop = NONLOCAL
omp_stop = _24
ESCAPED = _24

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
READONLY = { READONLY }
ESCAPED = { ESCAPED NONLOCAL spec .omp_data_o.42.0+128 .omp_data_o.42.128+64 .omp_data_o.42.192+64 .omp_data_o.42.256+64 .omp_data_o.42.320+96 _Z15gemm_omp_kerneliiiddPA4096_dS0_S0_._omp_fn.0 spec }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
ni = { NONLOCAL }
nj = { NONLOCAL } same as ni
nk = { NONLOCAL } same as ni
alpha = { NONLOCAL } same as ni
beta = { NONLOCAL } same as ni
A = { NONLOCAL } same as ni
B = { NONLOCAL } same as ni
C_outputFromOMP = { NONLOCAL } same as ni
clock_gettime = { }
spec = { ESCAPED NONLOCAL } same as _13
_13 = { ESCAPED NONLOCAL }
_14 = { ESCAPED NONLOCAL } same as _13
_15 = { ESCAPED NONLOCAL }
_16 = { ESCAPED NONLOCAL } same as _13
_17 = { ESCAPED NONLOCAL } same as _13
_18 = { ESCAPED NONLOCAL } same as _15
omp_start = { ESCAPED NONLOCAL }
.omp_data_o.42.0+128 = { ESCAPED NONLOCAL }
.omp_data_o.42.128+64 = { ESCAPED NONLOCAL }
.omp_data_o.42.192+64 = { ESCAPED NONLOCAL }
.omp_data_o.42.256+64 = { ESCAPED NONLOCAL }
.omp_data_o.42.320+96 = { ESCAPED NONLOCAL }
GOMP_parallel_start = { }
_Z15gemm_omp_kerneliiiddPA4096_dS0_S0_._omp_fn.0 = { ESCAPED NONLOCAL }
GOMP_parallel_end = { }
spec = { ESCAPED NONLOCAL } same as _19
_19 = { ESCAPED NONLOCAL }
_20 = { ESCAPED NONLOCAL } same as _19
_21 = { ESCAPED NONLOCAL }
_22 = { ESCAPED NONLOCAL } same as _19
_23 = { ESCAPED NONLOCAL } same as _19
_24 = { ESCAPED NONLOCAL } same as _21
omp_stop = { ESCAPED NONLOCAL }


Alias information for void gemm_omp(int, int, int, double, double, double (*)[4096], double (*)[4096], double (*)[4096])

Aliased symbols

spec, UID D.68843, struct timespec, is addressable
.omp_data_o.42, UID D.68841, struct .omp_data_s.41, is addressable
spec, UID D.68832, struct timespec, is addressable

Call clobber information

ESCAPED, points-to non-local, points-to vars: { D.68832 D.68841 D.68843 }

Flow-insensitive points-to information

A_8(D), points-to non-local, points-to vars: { }
B_9(D), points-to non-local, points-to vars: { }
C_outputFromOMP_10(D), points-to non-local, points-to vars: { }

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
void gemm_omp(int, int, int, double, double, double (*)[4096], double (*)[4096], double (*)[4096]) (int ni, int nj, int nk, double alpha, double beta, double[4096] * A, double[4096] * B, double[4096] * C_outputFromOMP)
{
  struct timespec spec;
  struct .omp_data_s.41 .omp_data_o.42;
  struct timespec spec;
  long int _13;
  long unsigned int _14;
  long unsigned int _15;
  long int _16;
  long unsigned int _17;
  uint64_t _18;
  long int _19;
  long unsigned int _20;
  long unsigned int _21;
  long int _22;
  long unsigned int _23;
  uint64_t _24;

  <bb 2>:
  clock_gettime (1, &spec);
  _13 = spec.tv_sec;
  _14 = (long unsigned int) _13;
  _15 = _14 * 1000000000;
  _16 = spec.tv_nsec;
  _17 = (long unsigned int) _16;
  _18 = _15 + _17;
  spec ={v} {CLOBBER};
  omp_start = _18;
  .omp_data_o.42.alpha = alpha_6(D);
  .omp_data_o.42.beta = beta_7(D);
  .omp_data_o.42.A = A_8(D);
  .omp_data_o.42.B = B_9(D);
  .omp_data_o.42.C = C_outputFromOMP_10(D);
  .omp_data_o.42.ni = ni_3(D);
  .omp_data_o.42.nj = nj_4(D);
  .omp_data_o.42.nk = nk_5(D);
  __builtin_GOMP_parallel_start (_Z15gemm_omp_kerneliiiddPA4096_dS0_S0_._omp_fn.0, &.omp_data_o.42, 8);
  _Z15gemm_omp_kerneliiiddPA4096_dS0_S0_._omp_fn.0 (&.omp_data_o.42);
  __builtin_GOMP_parallel_end ();
  clock_gettime (1, &spec);
  _19 = spec.tv_sec;
  _20 = (long unsigned int) _19;
  _21 = _20 * 1000000000;
  _22 = spec.tv_nsec;
  _23 = (long unsigned int) _22;
  _24 = _21 + _23;
  spec ={v} {CLOBBER};
  omp_stop = _24;
  return;

}



;; Function void GPU_argv_init() (_Z13GPU_argv_initv, funcdef_no=3266, decl_uid=66833, cgraph_uid=3088)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
READONLY = &READONLY
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
stderr = NONLOCAL
stderr.43_2 = stderr
ESCAPED = stderr.43_2
ESCAPED = &NONLOCAL
ESCAPED = &READONLY
ESCAPED = &deviceProp.0+4832
ESCAPED = &NULL
stderr.43_5 = stderr
ESCAPED = stderr.43_5
ESCAPED = &NONLOCAL
ESCAPED = &READONLY
ESCAPED = &NULL
ESCAPED = &deviceProp.0+4832
ESCAPED = &NULL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
READONLY = { READONLY }
ESCAPED = { NULL READONLY ESCAPED NONLOCAL deviceProp.0+4832 deviceProp.4864+192 }
NONLOCAL = { ESCAPED NONLOCAL } same as stderr
STOREDANYTHING = { }
INTEGER = { ANYTHING }
stderr.43_2 = { ESCAPED NONLOCAL } same as stderr
stderr = { ESCAPED NONLOCAL }
__fprintf_chk = { }
cudaGetDeviceProperties = { }
deviceProp.0+4832 = { ESCAPED NONLOCAL }
deviceProp.4864+192 = { ESCAPED NONLOCAL }
stderr.43_5 = { ESCAPED NONLOCAL } same as stderr
cudaSetDevice = { }


Alias information for void GPU_argv_init()

Aliased symbols

deviceProp, UID D.66835, struct cudaDeviceProp, is addressable

Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.66835 }

Flow-insensitive points-to information

stderr.43_2, points-to non-local, points-to escaped, points-to vars: { }
stderr.43_5, points-to non-local, points-to escaped, points-to vars: { }

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
void GPU_argv_init() ()
{
  struct cudaDeviceProp deviceProp;
  struct _IO_FILE * stderr.43;

  <bb 2>:
  stderr.43_2 = stderr;
  __fprintf_chk (stderr.43_2, 1, "GPU init.\n");
  cudaGetDeviceProperties (&deviceProp, 0);
  stderr.43_5 = stderr;
  __fprintf_chk (stderr.43_5, 1, "setting device %d with name %s\n", 0, &deviceProp.name);
  cudaSetDevice (0);
  deviceProp ={v} {CLOBBER};
  return;

}



;; Function int main(int, char**) (main, funcdef_no=3268, decl_uid=66878, cgraph_uid=3090) (executed once)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
READONLY = &READONLY
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
argc = &NONLOCAL
argv = &NONLOCAL
ni = &NONLOCAL
nj = &NONLOCAL
nk = &NONLOCAL
ESCAPED = &NONLOCAL
ret_141 = NONLOCAL
A = ret_141
ESCAPED = &NONLOCAL
ret_142 = NONLOCAL
B = ret_142
ESCAPED = &NONLOCAL
ret_143 = NONLOCAL
C = ret_143
ESCAPED = &NONLOCAL
C_outputFromOMP_144 = NONLOCAL
ESCAPED = &NONLOCAL
ret_145 = NONLOCAL
C_inputToGpu = ret_145
ESCAPED = &NONLOCAL
ret_146 = NONLOCAL
C_outputFromGpu = ret_146
stderr = NONLOCAL
stderr.53_18 = stderr
ESCAPED = stderr.53_18
ESCAPED = &NONLOCAL
ESCAPED = &READONLY
ESCAPED = &NONLOCAL
ff_0_21 = &HEAP
ESCAPED = &NONLOCAL
_23 = &HEAP
*ff_0_21 + 128 = _23
ESCAPED = &NONLOCAL
_26 = &HEAP
*ff_0_21 + 192 = _26
derefaddrtmp = &_Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_
*ff_0_21 = derefaddrtmp
_29 = ff_0_21 + 320
derefaddrtmp = &NULL
*_29 + UNKNOWN = derefaddrtmp
ffi_type_void.0+96 = NONLOCAL
ffi_type_void.128+64 = NONLOCAL
derefaddrtmp = &ffi_type_void.0+96
*ff_0_21 + 256 = derefaddrtmp
derefaddrtmp = &NONLOCAL
*ff_0_21 + 64 = derefaddrtmp
_33 = *ff_0_21 + 192
derefaddrtmp = &ni
*_33 = derefaddrtmp
derefaddrtmp = &nj
*_33 + 64 = derefaddrtmp
derefaddrtmp = &nk
*_33 + 128 = derefaddrtmp
derefaddrtmp = &alpha
*_33 + 192 = derefaddrtmp
derefaddrtmp = &beta
*_33 + 256 = derefaddrtmp
derefaddrtmp = &A
*_33 + 320 = derefaddrtmp
derefaddrtmp = &B
*_33 + 384 = derefaddrtmp
derefaddrtmp = &C
*_33 + 448 = derefaddrtmp
derefaddrtmp = &C_inputToGpu
*_33 + 512 = derefaddrtmp
derefaddrtmp = &C_outputFromGpu
*_33 + 576 = derefaddrtmp
derefaddrtmp = &NULL
*_33 + 640 = derefaddrtmp
_45 = *ff_0_21 + 128
ffi_type_sint32.0+96 = NONLOCAL
ffi_type_sint32.128+64 = NONLOCAL
derefaddrtmp = &ffi_type_sint32.0+96
*_45 = derefaddrtmp
derefaddrtmp = &ffi_type_sint32.0+96
*_45 + 64 = derefaddrtmp
derefaddrtmp = &ffi_type_sint32.0+96
*_45 + 128 = derefaddrtmp
ffi_type_double.0+96 = NONLOCAL
ffi_type_double.128+64 = NONLOCAL
derefaddrtmp = &ffi_type_double.0+96
*_45 + 192 = derefaddrtmp
derefaddrtmp = &ffi_type_double.0+96
*_45 + 256 = derefaddrtmp
ffi_type_pointer.0+96 = NONLOCAL
ffi_type_pointer.128+64 = NONLOCAL
derefaddrtmp = &ffi_type_pointer.0+96
*_45 + 320 = derefaddrtmp
derefaddrtmp = &ffi_type_pointer.0+96
*_45 + 384 = derefaddrtmp
derefaddrtmp = &ffi_type_pointer.0+96
*_45 + 448 = derefaddrtmp
derefaddrtmp = &ffi_type_pointer.0+96
*_45 + 512 = derefaddrtmp
derefaddrtmp = &ffi_type_pointer.0+96
*_45 + 576 = derefaddrtmp
derefaddrtmp = &NULL
*_45 + 640 = derefaddrtmp
stderr.53_57 = stderr
ESCAPED = stderr.53_57
ESCAPED = &NONLOCAL
ESCAPED = &READONLY
table = NONLOCAL
ESCAPED = &table
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
_60 = NONLOCAL
table.55_62 = table
ESCAPED = &READONLY
ESCAPED = &READONLY
ESCAPED = &NONLOCAL
__PRETTY_FUNCTION__ = NONLOCAL
ESCAPED = &__PRETTY_FUNCTION__
stderr.53_64 = stderr
ESCAPED = stderr.53_64
ESCAPED = &NONLOCAL
ESCAPED = &READONLY
table.55_66 = table
_67 = *table.55_66
_68 = *_67 + 64
doubledereftmp = *ff_0_21 + UNKNOWN
*_68 + UNKNOWN = doubledereftmp
TablePointerFunctions = NONLOCAL
TablePointerFunctions = table.55_66
ESCAPED = table.55_66
stderr.53_73 = stderr
ESCAPED = stderr.53_73
ESCAPED = &NONLOCAL
ESCAPED = &READONLY
C.57_75 = C
B.58_76 = B
A.59_77 = A
nk.60_78 = nk
nj.61_79 = nj
ni.62_80 = ni
ESCAPED = ni.62_80
ESCAPED = nj.61_79
ESCAPED = nk.60_78
ESCAPED = &alpha
ESCAPED = &beta
ESCAPED = A.59_77
ESCAPED = B.58_76
ESCAPED = C.57_75
C.57_82 = C
nj.61_83 = nj
ni.62_84 = ni
j_221 = j_154
j_221 = &NULL
_148 = i_209
_149 = _148
_149 = &NONLOCAL
_150 = C_outputFromOMP_144 + UNKNOWN
_151 = C.57_82 + UNKNOWN
_153 = *_151 + UNKNOWN
*_150 + UNKNOWN = _153
j_154 = j_221
j_154 = &NONLOCAL
i_155 = i_209
i_155 = &NONLOCAL
i_209 = i_155
i_209 = &NULL
j_223 = j_163
j_223 = &NULL
_157 = i_222
_158 = _157
_158 = &NONLOCAL
_159 = C_outputFromGpu.63_214 + UNKNOWN
_160 = C.57_82 + UNKNOWN
_162 = *_160 + UNKNOWN
*_159 + UNKNOWN = _162
j_163 = j_223
j_163 = &NONLOCAL
i_164 = i_222
i_164 = &NONLOCAL
i_222 = i_164
i_222 = &NULL
stderr.53_88 = stderr
ESCAPED = stderr.53_88
ESCAPED = &NONLOCAL
ESCAPED = &READONLY
B.58_90 = B
A.59_91 = A
beta.64_92 = beta
alpha.65_93 = alpha
nk.60_94 = nk
nj.61_95 = nj
ni.62_96 = ni
ESCAPED = ni.62_96
ESCAPED = nj.61_95
ESCAPED = nk.60_94
ESCAPED = alpha.65_93
ESCAPED = beta.64_92
ESCAPED = A.59_91
ESCAPED = B.58_90
ESCAPED = C_outputFromOMP_144
stdout = NONLOCAL
stdout.66_98 = stdout
ESCAPED = stdout.66_98
ESCAPED = &NONLOCAL
ESCAPED = &READONLY
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
stderr.53_101 = stderr
ESCAPED = stderr.53_101
ESCAPED = &NONLOCAL
ESCAPED = &READONLY
C.57_103 = C
nj.61_104 = nj
ni.62_105 = ni
ESCAPED = ni.62_105
ESCAPED = nj.61_104
ESCAPED = C.57_103
ESCAPED = C_outputFromOMP_144
stderr.53_107 = stderr
ESCAPED = stderr.53_107
ESCAPED = &NONLOCAL
ESCAPED = &READONLY
C_outputFromGpu.63_109 = C_outputFromGpu
C.57_110 = C
nj.61_111 = nj
ni.62_112 = ni
ESCAPED = ni.62_112
ESCAPED = nj.61_111
ESCAPED = C.57_110
ESCAPED = C_outputFromGpu.63_109
_116 = *argv
_117 = *_116
C_outputFromGpu.63_118 = C_outputFromGpu
nj.61_119 = nj
ni.62_120 = ni
j_231 = j_196
j_231 = &NULL
_186 = i_230
_187 = _186
_187 = &NONLOCAL
_188 = C_outputFromGpu.63_118 + UNKNOWN
_190 = *_188 + UNKNOWN
stderr.67_191 = stderr
ESCAPED = stderr.67_191
ESCAPED = &NONLOCAL
ESCAPED = &READONLY
ESCAPED = _190
_192 = ni.62_120
_192 = i_230
_193 = j_231
_193 = _192
_194 = _193
_194 = &NONLOCAL
stderr.67_195 = stderr
ESCAPED = &READONLY
ESCAPED = stderr.67_195
j_196 = j_231
j_196 = &NONLOCAL
i_197 = i_230
i_197 = &NONLOCAL
i_230 = i_197
i_230 = &NULL
stderr.67_198 = stderr
ESCAPED = &READONLY
ESCAPED = stderr.67_198
A.59_122 = A
B.58_124 = B
C.57_126 = C
C_outputFromGpu.63_129 = C_outputFromGpu
ESCAPED = &NULL
C_outputFromGpu.63_214 = C_outputFromGpu

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
READONLY = { READONLY }
ESCAPED = { NULL READONLY ESCAPED NONLOCAL ni nj nk A B C C_inputToGpu C_outputFromGpu HEAP HEAP _Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_ ffi_type_void.0+96 ffi_type_void.128+64 alpha beta ffi_type_sint32.0+96 ffi_type_sint32.128+64 ffi_type_double.0+96 ffi_type_double.128+64 ffi_type_pointer.0+96 ffi_type_pointer.128+64 table __PRETTY_FUNCTION__ } same as _67
NONLOCAL = { ESCAPED NONLOCAL } same as ret_141
STOREDANYTHING = { }
INTEGER = { ANYTHING }
argc = { NONLOCAL }
argv = { NONLOCAL } same as argc
ni = { NULL ESCAPED NONLOCAL HEAP HEAP _Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_ ffi_type_void.0+96 } same as ni.62_80
nj = { NULL ESCAPED NONLOCAL HEAP HEAP _Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_ ffi_type_void.0+96 } same as nj.61_79
nk = { NULL ESCAPED NONLOCAL HEAP HEAP _Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_ ffi_type_void.0+96 } same as nk.60_78
_ZL7xmallocm = { }
ret_141 = { ESCAPED NONLOCAL }
A = { NULL ESCAPED NONLOCAL HEAP HEAP _Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_ ffi_type_void.0+96 } same as A.59_77
ret_142 = { ESCAPED NONLOCAL } same as ret_141
B = { NULL ESCAPED NONLOCAL HEAP HEAP _Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_ ffi_type_void.0+96 } same as B.58_76
ret_143 = { ESCAPED NONLOCAL } same as ret_141
C = { NULL ESCAPED NONLOCAL HEAP HEAP _Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_ ffi_type_void.0+96 } same as C.57_75
C_outputFromOMP_144 = { ESCAPED NONLOCAL } same as ret_141
ret_145 = { ESCAPED NONLOCAL } same as ret_141
C_inputToGpu = { NULL ESCAPED NONLOCAL HEAP HEAP _Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_ ffi_type_void.0+96 }
ret_146 = { ESCAPED NONLOCAL } same as ret_141
C_outputFromGpu = { NULL ESCAPED NONLOCAL HEAP HEAP _Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_ ffi_type_void.0+96 } same as C_outputFromGpu.63_214
stderr.53_18 = { ESCAPED NONLOCAL } same as ret_141
stderr = { ESCAPED NONLOCAL } same as ret_141
__fprintf_chk = { }
malloc = { }
ff_0_21 = { HEAP }
HEAP = { NULL NONLOCAL HEAP HEAP _Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_ ffi_type_void.0+96 }
_23 = { HEAP }
HEAP = { NULL ESCAPED NONLOCAL ni nj nk A B C C_inputToGpu C_outputFromGpu HEAP HEAP _Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_ ffi_type_void.0+96 alpha beta ffi_type_sint32.0+96 ffi_type_double.0+96 ffi_type_pointer.0+96 }
_26 = { HEAP }
HEAP = { NULL ESCAPED NONLOCAL ni nj nk A B C C_inputToGpu C_outputFromGpu HEAP HEAP _Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_ ffi_type_void.0+96 alpha beta ffi_type_sint32.0+96 ffi_type_double.0+96 ffi_type_pointer.0+96 }
_Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_ = { NULL ESCAPED NONLOCAL ni nj nk A B C C_inputToGpu C_outputFromGpu HEAP HEAP _Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_ ffi_type_void.0+96 alpha beta ffi_type_sint32.0+96 ffi_type_double.0+96 ffi_type_pointer.0+96 }
derefaddrtmp = { _Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_ }
_29 = { HEAP }
derefaddrtmp = { NULL }
ffi_type_void.0+96 = { NULL ESCAPED NONLOCAL ni nj nk A B C C_inputToGpu C_outputFromGpu HEAP HEAP _Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_ ffi_type_void.0+96 alpha beta ffi_type_sint32.0+96 ffi_type_double.0+96 ffi_type_pointer.0+96 }
ffi_type_void.128+64 = { NULL ESCAPED NONLOCAL ni nj nk A B C C_inputToGpu C_outputFromGpu HEAP HEAP _Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_ ffi_type_void.0+96 alpha beta ffi_type_sint32.0+96 ffi_type_double.0+96 ffi_type_pointer.0+96 }
derefaddrtmp = { ffi_type_void.0+96 }
derefaddrtmp = { NONLOCAL } same as argc
_33 = { NULL NONLOCAL HEAP HEAP _Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_ ffi_type_void.0+96 }
derefaddrtmp = { ni }
derefaddrtmp = { nj }
derefaddrtmp = { nk }
alpha = { NULL ESCAPED NONLOCAL HEAP HEAP _Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_ ffi_type_void.0+96 } same as alpha.65_93
derefaddrtmp = { alpha }
beta = { NULL ESCAPED NONLOCAL HEAP HEAP _Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_ ffi_type_void.0+96 } same as beta.64_92
derefaddrtmp = { beta }
derefaddrtmp = { A }
derefaddrtmp = { B }
derefaddrtmp = { C }
derefaddrtmp = { C_inputToGpu }
derefaddrtmp = { C_outputFromGpu }
derefaddrtmp = { NULL } same as derefaddrtmp
_45 = { NULL NONLOCAL HEAP HEAP _Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_ ffi_type_void.0+96 }
ffi_type_sint32.0+96 = { NULL ESCAPED NONLOCAL HEAP HEAP _Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_ ffi_type_void.0+96 }
ffi_type_sint32.128+64 = { NULL ESCAPED NONLOCAL HEAP HEAP _Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_ ffi_type_void.0+96 }
derefaddrtmp = { ffi_type_sint32.0+96 }
derefaddrtmp = { ffi_type_sint32.0+96 } same as derefaddrtmp
derefaddrtmp = { ffi_type_sint32.0+96 } same as derefaddrtmp
ffi_type_double.0+96 = { NULL ESCAPED NONLOCAL HEAP HEAP _Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_ ffi_type_void.0+96 }
ffi_type_double.128+64 = { NULL ESCAPED NONLOCAL HEAP HEAP _Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_ ffi_type_void.0+96 }
derefaddrtmp = { ffi_type_double.0+96 }
derefaddrtmp = { ffi_type_double.0+96 } same as derefaddrtmp
ffi_type_pointer.0+96 = { NULL ESCAPED NONLOCAL HEAP HEAP _Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_ ffi_type_void.0+96 }
ffi_type_pointer.128+64 = { NULL ESCAPED NONLOCAL HEAP HEAP _Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_ ffi_type_void.0+96 }
derefaddrtmp = { ffi_type_pointer.0+96 }
derefaddrtmp = { ffi_type_pointer.0+96 } same as derefaddrtmp
derefaddrtmp = { ffi_type_pointer.0+96 } same as derefaddrtmp
derefaddrtmp = { ffi_type_pointer.0+96 } same as derefaddrtmp
derefaddrtmp = { ffi_type_pointer.0+96 } same as derefaddrtmp
derefaddrtmp = { NULL } same as derefaddrtmp
stderr.53_57 = { ESCAPED NONLOCAL } same as ret_141
_Z29create_target_functions_tablePPPP4Funcii = { }
table = { ESCAPED NONLOCAL } same as table.55_62
_60 = { ESCAPED NONLOCAL } same as ret_141
table.55_62 = { ESCAPED NONLOCAL }
__assert_fail = { }
__PRETTY_FUNCTION__ = { ESCAPED NONLOCAL }
stderr.53_64 = { ESCAPED NONLOCAL } same as ret_141
table.55_66 = { ESCAPED NONLOCAL } same as table.55_62
_67 = { NULL READONLY ESCAPED NONLOCAL ni nj nk A B C C_inputToGpu C_outputFromGpu HEAP HEAP _Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_ ffi_type_void.0+96 ffi_type_void.128+64 alpha beta ffi_type_sint32.0+96 ffi_type_sint32.128+64 ffi_type_double.0+96 ffi_type_double.128+64 ffi_type_pointer.0+96 ffi_type_pointer.128+64 table __PRETTY_FUNCTION__ }
_68 = { NULL READONLY ESCAPED NONLOCAL ni nj nk A B C C_inputToGpu C_outputFromGpu HEAP HEAP _Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_ ffi_type_void.0+96 alpha beta ffi_type_sint32.0+96 ffi_type_double.0+96 ffi_type_pointer.0+96 }
doubledereftmp = { NULL NONLOCAL HEAP HEAP _Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_ ffi_type_void.0+96 }
TablePointerFunctions = { ESCAPED NONLOCAL } same as table.55_62
stderr.53_73 = { ESCAPED NONLOCAL } same as ret_141
C.57_75 = { NULL ESCAPED NONLOCAL HEAP HEAP _Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_ ffi_type_void.0+96 }
B.58_76 = { NULL ESCAPED NONLOCAL HEAP HEAP _Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_ ffi_type_void.0+96 }
A.59_77 = { NULL ESCAPED NONLOCAL HEAP HEAP _Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_ ffi_type_void.0+96 }
nk.60_78 = { NULL ESCAPED NONLOCAL HEAP HEAP _Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_ ffi_type_void.0+96 }
nj.61_79 = { NULL ESCAPED NONLOCAL HEAP HEAP _Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_ ffi_type_void.0+96 }
ni.62_80 = { NULL ESCAPED NONLOCAL HEAP HEAP _Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_ ffi_type_void.0+96 }
_Z10init_arrayiiiPdS_PA4096_dS1_S1_ = { }
C.57_82 = { NULL ESCAPED NONLOCAL HEAP HEAP _Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_ ffi_type_void.0+96 } same as C.57_75
nj.61_83 = { NULL ESCAPED NONLOCAL HEAP HEAP _Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_ ffi_type_void.0+96 } same as nj.61_79
ni.62_84 = { NULL ESCAPED NONLOCAL HEAP HEAP _Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_ ffi_type_void.0+96 } same as ni.62_80
j_221 = { NULL NONLOCAL }
j_154 = { NULL NONLOCAL } same as j_221
_148 = { NULL NONLOCAL } same as j_221
i_209 = { NULL NONLOCAL } same as j_221
_149 = { NULL NONLOCAL } same as j_221
_150 = { ESCAPED NONLOCAL }
_151 = { NULL ESCAPED NONLOCAL HEAP HEAP _Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_ ffi_type_void.0+96 ffi_type_void.128+64 }
_153 = { NULL ESCAPED NONLOCAL ni nj nk A B C C_inputToGpu C_outputFromGpu HEAP HEAP _Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_ ffi_type_void.0+96 alpha beta ffi_type_sint32.0+96 ffi_type_double.0+96 ffi_type_pointer.0+96 }
i_155 = { NULL NONLOCAL } same as j_221
j_223 = { NULL NONLOCAL } same as j_221
j_163 = { NULL NONLOCAL } same as j_221
_157 = { NULL NONLOCAL } same as j_221
i_222 = { NULL NONLOCAL } same as j_221
_158 = { NULL NONLOCAL } same as j_221
_159 = { NULL ESCAPED NONLOCAL HEAP HEAP _Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_ ffi_type_void.0+96 ffi_type_void.128+64 }
C_outputFromGpu.63_214 = { NULL ESCAPED NONLOCAL HEAP HEAP _Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_ ffi_type_void.0+96 }
_160 = { NULL ESCAPED NONLOCAL HEAP HEAP _Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_ ffi_type_void.0+96 ffi_type_void.128+64 }
_162 = { NULL ESCAPED NONLOCAL ni nj nk A B C C_inputToGpu C_outputFromGpu HEAP HEAP _Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_ ffi_type_void.0+96 alpha beta ffi_type_sint32.0+96 ffi_type_double.0+96 ffi_type_pointer.0+96 }
i_164 = { NULL NONLOCAL } same as j_221
stderr.53_88 = { ESCAPED NONLOCAL } same as ret_141
B.58_90 = { NULL ESCAPED NONLOCAL HEAP HEAP _Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_ ffi_type_void.0+96 } same as B.58_76
A.59_91 = { NULL ESCAPED NONLOCAL HEAP HEAP _Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_ ffi_type_void.0+96 } same as A.59_77
beta.64_92 = { NULL ESCAPED NONLOCAL HEAP HEAP _Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_ ffi_type_void.0+96 }
alpha.65_93 = { NULL ESCAPED NONLOCAL HEAP HEAP _Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_ ffi_type_void.0+96 }
nk.60_94 = { NULL ESCAPED NONLOCAL HEAP HEAP _Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_ ffi_type_void.0+96 } same as nk.60_78
nj.61_95 = { NULL ESCAPED NONLOCAL HEAP HEAP _Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_ ffi_type_void.0+96 } same as nj.61_79
ni.62_96 = { NULL ESCAPED NONLOCAL HEAP HEAP _Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_ ffi_type_void.0+96 } same as ni.62_80
_Z8gemm_ompiiiddPA4096_dS0_S0_ = { }
stdout.66_98 = { ESCAPED NONLOCAL } same as ret_141
stdout = { ESCAPED NONLOCAL } same as ret_141
_Z26hookomp_print_time_resultsv = { }
stderr.53_101 = { ESCAPED NONLOCAL } same as ret_141
C.57_103 = { NULL ESCAPED NONLOCAL HEAP HEAP _Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_ ffi_type_void.0+96 } same as C.57_75
nj.61_104 = { NULL ESCAPED NONLOCAL HEAP HEAP _Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_ ffi_type_void.0+96 } same as nj.61_79
ni.62_105 = { NULL ESCAPED NONLOCAL HEAP HEAP _Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_ ffi_type_void.0+96 } same as ni.62_80
_Z14compareResultsiiPA4096_dS0_ = { }
stderr.53_107 = { ESCAPED NONLOCAL } same as ret_141
C_outputFromGpu.63_109 = { NULL ESCAPED NONLOCAL HEAP HEAP _Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_ ffi_type_void.0+96 } same as C_outputFromGpu.63_214
C.57_110 = { NULL ESCAPED NONLOCAL HEAP HEAP _Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_ ffi_type_void.0+96 } same as C.57_75
nj.61_111 = { NULL ESCAPED NONLOCAL HEAP HEAP _Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_ ffi_type_void.0+96 } same as nj.61_79
ni.62_112 = { NULL ESCAPED NONLOCAL HEAP HEAP _Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_ ffi_type_void.0+96 } same as ni.62_80
_116 = { ESCAPED NONLOCAL }
_117 = { ESCAPED NONLOCAL }
C_outputFromGpu.63_118 = { NULL ESCAPED NONLOCAL HEAP HEAP _Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_ ffi_type_void.0+96 } same as C_outputFromGpu.63_214
nj.61_119 = { NULL ESCAPED NONLOCAL HEAP HEAP _Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_ ffi_type_void.0+96 } same as nj.61_79
ni.62_120 = { NULL ESCAPED NONLOCAL HEAP HEAP _Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_ ffi_type_void.0+96 } same as ni.62_80
j_231 = { NULL NONLOCAL } same as j_221
j_196 = { NULL NONLOCAL } same as j_221
_186 = { NULL NONLOCAL } same as j_221
i_230 = { NULL NONLOCAL } same as j_221
_187 = { NULL NONLOCAL } same as j_221
_188 = { NULL ESCAPED NONLOCAL HEAP HEAP _Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_ ffi_type_void.0+96 ffi_type_void.128+64 }
_190 = { NULL ESCAPED NONLOCAL ni nj nk A B C C_inputToGpu C_outputFromGpu HEAP HEAP _Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_ ffi_type_void.0+96 alpha beta ffi_type_sint32.0+96 ffi_type_double.0+96 ffi_type_pointer.0+96 }
stderr.67_191 = { ESCAPED NONLOCAL } same as ret_141
_192 = { NULL ESCAPED NONLOCAL HEAP HEAP _Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_ ffi_type_void.0+96 }
_193 = { NULL ESCAPED NONLOCAL HEAP HEAP _Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_ ffi_type_void.0+96 } same as _192
_194 = { NULL ESCAPED NONLOCAL HEAP HEAP _Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_ ffi_type_void.0+96 } same as _192
stderr.67_195 = { ESCAPED NONLOCAL } same as ret_141
fputs = { }
i_197 = { NULL NONLOCAL } same as j_221
stderr.67_198 = { ESCAPED NONLOCAL } same as ret_141
A.59_122 = { NULL ESCAPED NONLOCAL HEAP HEAP _Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_ ffi_type_void.0+96 } same as A.59_77
B.58_124 = { NULL ESCAPED NONLOCAL HEAP HEAP _Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_ ffi_type_void.0+96 } same as B.58_76
C.57_126 = { NULL ESCAPED NONLOCAL HEAP HEAP _Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_ ffi_type_void.0+96 } same as C.57_75
C_outputFromGpu.63_129 = { NULL ESCAPED NONLOCAL HEAP HEAP _Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_ ffi_type_void.0+96 } same as C_outputFromGpu.63_214


Alias information for int main(int, char**)

Aliased symbols

C_outputFromGpu, UID D.66890, double[4096][4096] *, is addressable
C_inputToGpu, UID D.66889, double[4096][4096] *, is addressable
C, UID D.66887, double[4096][4096] *, is addressable
B, UID D.66886, double[4096][4096] *, is addressable
A, UID D.66885, double[4096][4096] *, is addressable
beta, UID D.66884, double, is addressable
alpha, UID D.66883, double, is addressable
nk, UID D.66882, int, is addressable
nj, UID D.66881, int, is addressable
ni, UID D.66880, int, is addressable

Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.66207 D.66213 D.66217 D.66218 D.66654 D.66880 D.66881 D.66882 D.66883 D.66884 D.66885 D.66886 D.66887 D.66889 D.66890 D.66895 D.68868 D.68869 } (includes global vars)

Flow-insensitive points-to information

stderr.53_18, points-to non-local, points-to escaped, points-to vars: { }
ff_0_21, points-to vars: { D.68867 }
_23, points-to vars: { D.68868 } (includes global vars)
_26, points-to vars: { D.68869 } (includes global vars)
_29, points-to vars: { D.68867 }
_33, points-to non-local, points-to NULL, points-to vars: { D.66207 D.68868 D.68869 } (includes global vars)
_45, points-to non-local, points-to NULL, points-to vars: { D.66207 D.68868 D.68869 } (includes global vars)
stderr.53_57, points-to non-local, points-to escaped, points-to vars: { }
table.55_62, points-to non-local, points-to escaped, points-to vars: { }
stderr.53_64, points-to non-local, points-to escaped, points-to vars: { }
table.55_66, points-to non-local, points-to escaped, points-to vars: { }
_67, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.66207 D.66213 D.66217 D.66218 D.66654 D.66880 D.66881 D.66882 D.66883 D.66884 D.66885 D.66886 D.66887 D.66889 D.66890 D.66895 D.68868 D.68869 } (includes global vars)
_68, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.66207 D.66213 D.66217 D.66218 D.66880 D.66881 D.66882 D.66883 D.66884 D.66885 D.66886 D.66887 D.66889 D.66890 D.68868 D.68869 } (includes global vars)
stderr.53_73, points-to non-local, points-to escaped, points-to vars: { }
C.57_75, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.66207 D.68868 D.68869 } (includes global vars)
B.58_76, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.66207 D.68868 D.68869 } (includes global vars)
A.59_77, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.66207 D.68868 D.68869 } (includes global vars)
C.57_82, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.66207 D.68868 D.68869 } (includes global vars)
stderr.53_88, points-to non-local, points-to escaped, points-to vars: { }
B.58_90, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.66207 D.68868 D.68869 } (includes global vars)
A.59_91, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.66207 D.68868 D.68869 } (includes global vars)
stdout.66_98, points-to non-local, points-to escaped, points-to vars: { }
stderr.53_101, points-to non-local, points-to escaped, points-to vars: { }
C.57_103, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.66207 D.68868 D.68869 } (includes global vars)
stderr.53_107, points-to non-local, points-to escaped, points-to vars: { }
C_outputFromGpu.63_109, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.66207 D.68868 D.68869 } (includes global vars)
C.57_110, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.66207 D.68868 D.68869 } (includes global vars)
argv_115(D), points-to non-local, points-to vars: { }
_116, points-to non-local, points-to escaped, points-to vars: { }
C_outputFromGpu.63_118, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.66207 D.68868 D.68869 } (includes global vars)
A.59_122, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.66207 D.68868 D.68869 } (includes global vars)
B.58_124, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.66207 D.68868 D.68869 } (includes global vars)
C.57_126, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.66207 D.68868 D.68869 } (includes global vars)
C_outputFromGpu.63_129, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.66207 D.68868 D.68869 } (includes global vars)
ret_141, points-to non-local, points-to escaped, points-to vars: { }
ret_142, points-to non-local, points-to escaped, points-to vars: { }
ret_143, points-to non-local, points-to escaped, points-to vars: { }
C_outputFromOMP_144, points-to non-local, points-to escaped, points-to vars: { }
ret_145, points-to non-local, points-to escaped, points-to vars: { }
ret_146, points-to non-local, points-to escaped, points-to vars: { }
_150, points-to non-local, points-to escaped, points-to vars: { }
_151, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.66207 D.68868 D.68869 } (includes global vars)
_159, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.66207 D.68868 D.68869 } (includes global vars)
_160, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.66207 D.68868 D.68869 } (includes global vars)
_188, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.66207 D.68868 D.68869 } (includes global vars)
stderr.67_191, points-to non-local, points-to escaped, points-to vars: { }
stderr.67_195, points-to non-local, points-to escaped, points-to vars: { }
stderr.67_198, points-to non-local, points-to escaped, points-to vars: { }
C_outputFromGpu.63_214, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.66207 D.68868 D.68869 } (includes global vars)

;; 7 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 24 3 4 5 6 25 27 7 28 8 29 9 31 30 32 10 33 11 35 34 12 37 36 26 13 38 14 39 15 40 43 16 42 17 18 44 19 46 45 20 48 47 41 21 22 23
;;
;; Loop 5
;;  header 20, latch 45
;;  depth 1, outer 0
;;  nodes: 20 45 19 44 48 18 42 17 16 43 47
;;
;; Loop 6
;;  header 16, latch 43
;;  depth 2, outer 5
;;  nodes: 16 43 18 42 17
;;
;; Loop 3
;;  header 12, latch 34
;;  depth 1, outer 0
;;  nodes: 12 34 11 33 37 10 32 36
;;
;; Loop 4
;;  header 10, latch 32
;;  depth 2, outer 3
;;  nodes: 10 32
;;
;; Loop 1
;;  header 9, latch 29
;;  depth 1, outer 0
;;  nodes: 9 29 8 28 31 7 27 30
;;
;; Loop 2
;;  header 7, latch 27
;;  depth 2, outer 1
;;  nodes: 7 27
;; 2 succs { 3 24 }
;; 24 succs { 6 }
;; 3 succs { 4 5 }
;; 4 succs { }
;; 5 succs { 6 }
;; 6 succs { 25 26 }
;; 25 succs { 9 }
;; 27 succs { 7 }
;; 7 succs { 27 28 }
;; 28 succs { 8 }
;; 8 succs { 29 23 }
;; 29 succs { 9 }
;; 9 succs { 30 31 }
;; 31 succs { 8 }
;; 30 succs { 7 }
;; 32 succs { 10 }
;; 10 succs { 32 33 }
;; 33 succs { 11 }
;; 11 succs { 34 35 }
;; 35 succs { 13 }
;; 34 succs { 12 }
;; 12 succs { 36 37 }
;; 37 succs { 11 }
;; 36 succs { 10 }
;; 26 succs { 13 }
;; 13 succs { 14 38 }
;; 38 succs { 22 }
;; 14 succs { 15 39 }
;; 39 succs { 22 }
;; 15 succs { 40 41 }
;; 40 succs { 20 }
;; 43 succs { 16 }
;; 16 succs { 17 42 }
;; 42 succs { 18 }
;; 17 succs { 18 }
;; 18 succs { 43 44 }
;; 44 succs { 19 }
;; 19 succs { 45 46 }
;; 46 succs { 21 }
;; 45 succs { 20 }
;; 20 succs { 47 48 }
;; 48 succs { 19 }
;; 47 succs { 16 }
;; 41 succs { 21 }
;; 21 succs { 22 }
;; 22 succs { 1 }
;; 23 succs { 12 }
find_duplicates: <bb 41> duplicate of <bb 46>
find_duplicates: <bb 44> duplicate of <bb 48>
find_duplicates: <bb 38> duplicate of <bb 39>
find_duplicates: <bb 26> duplicate of <bb 35>
find_duplicates: <bb 33> duplicate of <bb 37>
find_duplicates: <bb 28> duplicate of <bb 31>
Removing basic block 46
Removing basic block 48
Removing basic block 39
Removing basic block 35
Removing basic block 37
Removing basic block 31

Symbols to be put in SSA form
{ D.68223 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 49
Number of blocks to update: 42 ( 86%)


int main(int, char**) (int argc, char * * argv)
{
  struct _IO_FILE * stderr.67;
  int i;
  int j;
  int i;
  int j;
  int i;
  int j;
  void * ret;
  void * ret;
  void * ret;
  void * ret;
  void * ret;
  static const char __PRETTY_FUNCTION__[22] = "int main(int, char**)";
  struct Func * ff_0;
  double[4096][4096] * C_outputFromGpu;
  double[4096][4096] * C_inputToGpu;
  double[4096][4096] * C_outputFromOMP;
  double[4096][4096] * C;
  double[4096][4096] * B;
  double[4096][4096] * A;
  double beta;
  double alpha;
  int nk;
  int nj;
  int ni;
  struct _IO_FILE * stdout.66;
  double alpha.65;
  double beta.64;
  double[4096][4096] * C_outputFromGpu.63;
  int ni.62;
  int nj.61;
  int nk.60;
  double[4096][4096] * A.59;
  double[4096][4096] * B.58;
  double[4096][4096] * C.57;
  struct Func * * * table.55;
  struct _IO_FILE * stderr.53;
  void * _23;
  void * _26;
  void * * _29;
  void * * _33;
  struct ffi_type * * _45;
  bool _60;
  struct Func * * _67;
  struct Func * _68;
  long unsigned int pretmp_86;
  char * _116;
  unsigned char _117;
  long unsigned int _148;
  long unsigned int _149;
  double[4096] * _150;
  double[4096] * _151;
  long unsigned int pretmp_152;
  double _153;
  long unsigned int _157;
  long unsigned int _158;
  double[4096] * _159;
  double[4096] * _160;
  long unsigned int pretmp_161;
  double _162;
  long unsigned int pretmp_167;
  long unsigned int _186;
  long unsigned int _187;
  double[4096] * _188;
  double[4096][4096] * pretmp_189;
  double _190;
  int _192;
  int _193;
  int _194;
  long unsigned int pretmp_201;
  long unsigned int pretmp_212;
  double[4096][4096] * pretmp_216;
  double[4096][4096] * pretmp_217;
  double[4096][4096] * pretmp_218;
  int pretmp_219;
  double[4096][4096] * pretmp_235;

  <bb 2>:
  ni = 4096;
  nj = 4096;
  nk = 4096;
  ret_141 = xmalloc (134217728);
  A = ret_141;
  ret_142 = xmalloc (134217728);
  B = ret_142;
  ret_143 = xmalloc (134217728);
  C = ret_143;
  C_outputFromOMP_144 = xmalloc (134217728);
  ret_145 = xmalloc (134217728);
  C_inputToGpu = ret_145;
  ret_146 = xmalloc (134217728);
  C_outputFromGpu = ret_146;
  stderr.53_18 = stderr;
  __fprintf_chk (stderr.53_18, 1, "Preparing alternatives functions.\n");
  ff_0_21 = malloc (48);
  _23 = malloc (88);
  ff_0_21->arg_types = _23;
  _26 = malloc (88);
  ff_0_21->arg_values = _26;
  ff_0_21->f = gemm_cuda;
  _29 = &ff_0_21->ret_value;
  memset (_29, 0, 8);
  ff_0_21->ret_type = &ffi_type_void;
  ff_0_21->nargs = 10;
  _33 = ff_0_21->arg_values;
  *_33 = &ni;
  MEM[(void * *)_33 + 8B] = &nj;
  MEM[(void * *)_33 + 16B] = &nk;
  MEM[(void * *)_33 + 24B] = &alpha;
  MEM[(void * *)_33 + 32B] = &beta;
  MEM[(void * *)_33 + 40B] = &A;
  MEM[(void * *)_33 + 48B] = &B;
  MEM[(void * *)_33 + 56B] = &C;
  MEM[(void * *)_33 + 64B] = &C_inputToGpu;
  MEM[(void * *)_33 + 72B] = &C_outputFromGpu;
  MEM[(void * *)_33 + 80B] = 0B;
  _45 = ff_0_21->arg_types;
  *_45 = &ffi_type_sint32;
  MEM[(struct ffi_type * *)_45 + 8B] = &ffi_type_sint32;
  MEM[(struct ffi_type * *)_45 + 16B] = &ffi_type_sint32;
  MEM[(struct ffi_type * *)_45 + 24B] = &ffi_type_double;
  MEM[(struct ffi_type * *)_45 + 32B] = &ffi_type_double;
  MEM[(struct ffi_type * *)_45 + 40B] = &ffi_type_pointer;
  MEM[(struct ffi_type * *)_45 + 48B] = &ffi_type_pointer;
  MEM[(struct ffi_type * *)_45 + 56B] = &ffi_type_pointer;
  MEM[(struct ffi_type * *)_45 + 64B] = &ffi_type_pointer;
  MEM[(struct ffi_type * *)_45 + 72B] = &ffi_type_pointer;
  MEM[(struct ffi_type * *)_45 + 80B] = 0B;
  stderr.53_57 = stderr;
  __fprintf_chk (stderr.53_57, 1, "Creating table of target functions.\n");
  _60 = create_target_functions_table (&table, 1, 2);
  if (_60 != 0)
    goto <bb 3>;
  else
    goto <bb 24>;

  <bb 24>:
  goto <bb 6>;

  <bb 3>:
  table.55_62 = table;
  if (table.55_62 == 0B)
    goto <bb 4>;
  else
    goto <bb 5>;

  <bb 4>:
  __assert_fail ("table != NULL", "gemm.cu", 402, &__PRETTY_FUNCTION__);

  <bb 5>:
  stderr.53_64 = stderr;
  __fprintf_chk (stderr.53_64, 1, "Declaring function in 0,1.\n");
  table.55_66 = table;
  _67 = *table.55_66;
  _68 = MEM[(struct Func * *)_67 + 8B];
  *_68 = MEM[(const struct Func &)ff_0_21];
  TablePointerFunctions = table.55_66;

  <bb 6>:
  stderr.53_73 = stderr;
  __fprintf_chk (stderr.53_73, 1, "Calling init_array.\n");
  C.57_75 = C;
  B.58_76 = B;
  A.59_77 = A;
  nk.60_78 = nk;
  nj.61_79 = nj;
  ni.62_80 = ni;
  init_array (ni.62_80, nj.61_79, nk.60_78, &alpha, &beta, A.59_77, B.58_76, C.57_75);
  C.57_82 = C;
  nj.61_83 = nj;
  ni.62_84 = ni;
  if (ni.62_84 > 0)
    goto <bb 25>;
  else
    goto <bb 26>;

  <bb 25>:
  goto <bb 9>;

  <bb 27>:

  <bb 7>:
  # j_221 = PHI <j_154(27), 0(30)>
  _148 = pretmp_167;
  _149 = pretmp_161;
  _150 = pretmp_218;
  _151 = pretmp_217;
  _153 = *_151[j_221];
  *_150[j_221] = _153;
  j_154 = j_221 + 1;
  if (nj.61_83 > j_154)
    goto <bb 27>;
  else
    goto <bb 28>;

  <bb 28>:

  <bb 8>:
  i_155 = i_209 + 1;
  if (ni.62_84 > i_155)
    goto <bb 29>;
  else
    goto <bb 23>;

  <bb 29>:

  <bb 9>:
  # i_209 = PHI <i_155(29), 0(25)>
  if (nj.61_83 > 0)
    goto <bb 30>;
  else
    goto <bb 28>;

  <bb 30>:
  pretmp_167 = (long unsigned int) i_209;
  pretmp_161 = pretmp_167 * 32768;
  pretmp_218 = C_outputFromOMP_144 + pretmp_161;
  pretmp_217 = C.57_82 + pretmp_161;
  goto <bb 7>;

  <bb 32>:

  <bb 10>:
  # j_223 = PHI <j_163(32), 0(36)>
  _157 = pretmp_152;
  _158 = pretmp_212;
  _159 = pretmp_216;
  _160 = pretmp_235;
  _162 = *_160[j_223];
  *_159[j_223] = _162;
  j_163 = j_223 + 1;
  if (nj.61_83 > j_163)
    goto <bb 32>;
  else
    goto <bb 33>;

  <bb 33>:

  <bb 11>:
  i_164 = i_222 + 1;
  if (ni.62_84 > i_164)
    goto <bb 34>;
  else
    goto <bb 26>;

  <bb 34>:

  <bb 12>:
  # i_222 = PHI <i_164(34), 0(23)>
  if (nj.61_83 > 0)
    goto <bb 36>;
  else
    goto <bb 33>;

  <bb 36>:
  pretmp_152 = (long unsigned int) i_222;
  pretmp_212 = pretmp_152 * 32768;
  pretmp_216 = C_outputFromGpu.63_214 + pretmp_212;
  pretmp_235 = C.57_82 + pretmp_212;
  goto <bb 10>;

  <bb 26>:

  <bb 13>:
  stderr.53_88 = stderr;
  __fprintf_chk (stderr.53_88, 1, "Calling gemm_omp:\n");
  B.58_90 = B;
  A.59_91 = A;
  beta.64_92 = beta;
  alpha.65_93 = alpha;
  nk.60_94 = nk;
  nj.61_95 = nj;
  ni.62_96 = ni;
  gemm_omp (ni.62_96, nj.61_95, nk.60_94, alpha.65_93, beta.64_92, A.59_91, B.58_90, C_outputFromOMP_144);
  stdout.66_98 = stdout;
  __fprintf_chk (stdout.66_98, 1, "version = OMP+OFF, num_threads = %d, NI = %d, NJ = %d, NK = %d, ", 8, 4096, 4096, 4096);
  hookomp_print_time_results ();
  stderr.53_101 = stderr;
  __fprintf_chk (stderr.53_101, 1, "Calling compareResults(original, omp).\n");
  C.57_103 = C;
  nj.61_104 = nj;
  ni.62_105 = ni;
  compareResults (ni.62_105, nj.61_104, C.57_103, C_outputFromOMP_144);
  stderr.53_107 = stderr;
  __fprintf_chk (stderr.53_107, 1, "Calling compareResults(original, cuda).\n");
  C_outputFromGpu.63_109 = C_outputFromGpu;
  C.57_110 = C;
  nj.61_111 = nj;
  ni.62_112 = ni;
  compareResults (ni.62_112, nj.61_111, C.57_110, C_outputFromGpu.63_109);
  if (argc_114(D) > 42)
    goto <bb 14>;
  else
    goto <bb 38>;

  <bb 38>:
  goto <bb 22>;

  <bb 14>:
  _116 = *argv_115(D);
  _117 = MEM[(const unsigned char * {ref-all})_116];
  if (_117 == 0)
    goto <bb 15>;
  else
    goto <bb 38>;

  <bb 15>:
  C_outputFromGpu.63_118 = C_outputFromGpu;
  nj.61_119 = nj;
  ni.62_120 = ni;
  if (ni.62_120 > 0)
    goto <bb 40>;
  else
    goto <bb 41>;

  <bb 40>:
  goto <bb 20>;

  <bb 43>:

  <bb 16>:
  # j_231 = PHI <j_196(43), 0(47)>
  _186 = pretmp_86;
  _187 = pretmp_201;
  _188 = pretmp_189;
  _190 = *_188[j_231];
  stderr.67_191 = stderr;
  __fprintf_chk (stderr.67_191, 1, "%0.2lf ", _190);
  _192 = pretmp_219;
  _193 = j_231 + _192;
  _194 = _193 % 20;
  if (_194 == 0)
    goto <bb 17>;
  else
    goto <bb 42>;

  <bb 42>:
  goto <bb 18>;

  <bb 17>:
  stderr.67_195 = stderr;
  __builtin_fputs ("\n", stderr.67_195);

  <bb 18>:
  j_196 = j_231 + 1;
  if (nj.61_119 > j_196)
    goto <bb 43>;
  else
    goto <bb 44>;

  <bb 44>:

  <bb 19>:
  i_197 = i_230 + 1;
  if (ni.62_120 > i_197)
    goto <bb 45>;
  else
    goto <bb 41>;

  <bb 45>:

  <bb 20>:
  # i_230 = PHI <i_197(45), 0(40)>
  if (nj.61_119 > 0)
    goto <bb 47>;
  else
    goto <bb 44>;

  <bb 47>:
  pretmp_86 = (long unsigned int) i_230;
  pretmp_201 = pretmp_86 * 32768;
  pretmp_189 = C_outputFromGpu.63_118 + pretmp_201;
  pretmp_219 = ni.62_120 * i_230;
  goto <bb 16>;

  <bb 41>:

  <bb 21>:
  stderr.67_198 = stderr;
  __builtin_fputs ("\n", stderr.67_198);

  <bb 22>:
  A.59_122 = A;
  free (A.59_122);
  B.58_124 = B;
  free (B.58_124);
  C.57_126 = C;
  free (C.57_126);
  free (C_outputFromOMP_144);
  C_outputFromGpu.63_129 = C_outputFromGpu;
  free (C_outputFromGpu.63_129);
  ni ={v} {CLOBBER};
  nj ={v} {CLOBBER};
  nk ={v} {CLOBBER};
  alpha ={v} {CLOBBER};
  beta ={v} {CLOBBER};
  A ={v} {CLOBBER};
  B ={v} {CLOBBER};
  C ={v} {CLOBBER};
  C_inputToGpu ={v} {CLOBBER};
  C_outputFromGpu ={v} {CLOBBER};
  return 0;

  <bb 23>:
  C_outputFromGpu.63_214 = C_outputFromGpu;
  goto <bb 12>;

}



;; Function void polybench_flush_cache() (_Z21polybench_flush_cachev, funcdef_no=3270, decl_uid=67114, cgraph_uid=3092)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
READONLY = &READONLY
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
flush_5 = &HEAP
i_17 = i_11
i_17 = &NULL
tmp_18 = tmp_10
tmp_18 = &NONLOCAL
_6 = i_17
_7 = _6
_7 = &NONLOCAL
_8 = flush_5 + UNKNOWN
_9 = *_8
tmp_10 = _9
tmp_10 = tmp_18
i_11 = i_17
i_11 = &NONLOCAL
ESCAPED = &READONLY
ESCAPED = &READONLY
ESCAPED = &NONLOCAL
__PRETTY_FUNCTION__ = NONLOCAL
ESCAPED = &__PRETTY_FUNCTION__

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
READONLY = { READONLY }
ESCAPED = { READONLY ESCAPED NONLOCAL __PRETTY_FUNCTION__ }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
calloc = { }
flush_5 = { HEAP }
HEAP = { }
i_17 = { NULL NONLOCAL }
i_11 = { NULL NONLOCAL } same as i_17
tmp_18 = { NONLOCAL }
tmp_10 = { NONLOCAL } same as tmp_18
_6 = { NULL NONLOCAL } same as i_17
_7 = { NULL NONLOCAL } same as i_17
_8 = { HEAP }
_9 = { }
__assert_fail = { }
__PRETTY_FUNCTION__ = { ESCAPED NONLOCAL }


Alias information for void polybench_flush_cache()

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { D.67120 } (includes global vars)

Flow-insensitive points-to information

flush_5, points-to vars: { D.68948 }
_8, points-to vars: { D.68948 }

;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 7 4 5 6
;;
;; Loop 1
;;  header 3, latch 7
;;  depth 1, outer 0
;;  nodes: 3 7
;; 2 succs { 3 }
;; 3 succs { 7 4 }
;; 7 succs { 3 }
;; 4 succs { 6 5 }
;; 5 succs { }
;; 6 succs { 1 }
void polybench_flush_cache() ()
{
  static const char __PRETTY_FUNCTION__[29] = "void polybench_flush_cache()";
  double tmp;
  int i;
  double * flush;
  long unsigned int _6;
  long unsigned int _7;
  double * _8;
  double _9;

  <bb 2>:
  flush_5 = calloc (4194560, 8);

  <bb 3>:
  # i_17 = PHI <i_11(7), 0(2)>
  # tmp_18 = PHI <tmp_10(7), 0.0(2)>
  _6 = (long unsigned int) i_17;
  _7 = _6 * 8;
  _8 = flush_5 + _7;
  _9 = *_8;
  tmp_10 = _9 + tmp_18;
  i_11 = i_17 + 1;
  if (i_11 != 4194560)
    goto <bb 7>;
  else
    goto <bb 4>;

  <bb 7>:
  goto <bb 3>;

  <bb 4>:
  if (tmp_10 <= 1.0e+1)
    goto <bb 6>;
  else
    goto <bb 5>;

  <bb 5>:
  __assert_fail ("tmp <= 10.0", "../../../utilities/polybench.c", 96, &__PRETTY_FUNCTION__);

  <bb 6>:
  free (flush_5);
  return;

}



;; Function void polybench_prepare_instruments() (_Z29polybench_prepare_instrumentsv, funcdef_no=3271, decl_uid=67125, cgraph_uid=3093)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
READONLY = &READONLY
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
flush_3 = &HEAP
i_18 = i_11
i_18 = &NULL
tmp_19 = tmp_10
tmp_19 = &NONLOCAL
_5 = i_18
_6 = _5
_6 = &NONLOCAL
_7 = flush_3 + UNKNOWN
_8 = *_7
tmp_10 = _8
tmp_10 = tmp_19
i_11 = i_18
i_11 = &NONLOCAL
ESCAPED = &READONLY
ESCAPED = &READONLY
ESCAPED = &NONLOCAL
_ZZ21polybench_flush_cachevE19__PRETTY_FUNCTION__ = NONLOCAL
ESCAPED = &_ZZ21polybench_flush_cachevE19__PRETTY_FUNCTION__

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
READONLY = { READONLY }
ESCAPED = { READONLY ESCAPED NONLOCAL _ZZ21polybench_flush_cachevE19__PRETTY_FUNCTION__ }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
calloc = { }
flush_3 = { HEAP }
HEAP = { }
i_18 = { NULL NONLOCAL }
i_11 = { NULL NONLOCAL } same as i_18
tmp_19 = { NONLOCAL }
tmp_10 = { NONLOCAL } same as tmp_19
_5 = { NULL NONLOCAL } same as i_18
_6 = { NULL NONLOCAL } same as i_18
_7 = { HEAP }
_8 = { }
__assert_fail = { }
_ZZ21polybench_flush_cachevE19__PRETTY_FUNCTION__ = { ESCAPED NONLOCAL }


Alias information for void polybench_prepare_instruments()

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { D.67120 } (includes global vars)

Flow-insensitive points-to information

flush_3, points-to vars: { D.68966 }
_7, points-to vars: { D.68966 }

;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 7 4 5 6
;;
;; Loop 1
;;  header 3, latch 7
;;  depth 1, outer 0
;;  nodes: 3 7
;; 2 succs { 3 }
;; 3 succs { 7 4 }
;; 7 succs { 3 }
;; 4 succs { 6 5 }
;; 5 succs { }
;; 6 succs { 1 }
void polybench_prepare_instruments() ()
{
  double tmp;
  int i;
  double * flush;
  long unsigned int _5;
  long unsigned int _6;
  double * _7;
  double _8;

  <bb 2>:
  flush_3 = calloc (4194560, 8);

  <bb 3>:
  # i_18 = PHI <i_11(7), 0(2)>
  # tmp_19 = PHI <tmp_10(7), 0.0(2)>
  _5 = (long unsigned int) i_18;
  _6 = _5 * 8;
  _7 = flush_3 + _6;
  _8 = *_7;
  tmp_10 = _8 + tmp_19;
  i_11 = i_18 + 1;
  if (i_11 != 4194560)
    goto <bb 7>;
  else
    goto <bb 4>;

  <bb 7>:
  goto <bb 3>;

  <bb 4>:
  if (tmp_10 <= 1.0e+1)
    goto <bb 6>;
  else
    goto <bb 5>;

  <bb 5>:
  __assert_fail ("tmp <= 10.0", "../../../utilities/polybench.c", 96, &__PRETTY_FUNCTION__);

  <bb 6>:
  free (flush_3);
  return;

}



;; Function void polybench_timer_start() (_Z21polybench_timer_startv, funcdef_no=3272, decl_uid=65913, cgraph_uid=3094)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
READONLY = &READONLY
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
flush_7 = &HEAP
i_32 = i_15
i_32 = &NULL
tmp_33 = tmp_14
tmp_33 = &NONLOCAL
_9 = i_32
_10 = _9
_10 = &NONLOCAL
_11 = flush_7 + UNKNOWN
_12 = *_11
tmp_14 = _12
tmp_14 = tmp_33
i_15 = i_32
i_15 = &NONLOCAL
ESCAPED = &READONLY
ESCAPED = &READONLY
ESCAPED = &NONLOCAL
_ZZ21polybench_flush_cachevE19__PRETTY_FUNCTION__ = NONLOCAL
ESCAPED = &_ZZ21polybench_flush_cachevE19__PRETTY_FUNCTION__
ESCAPED = &Tp
ESCAPED = &NULL
stat_16 = NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &READONLY
ESCAPED = stat_16
_17 = Tp
_18 = _17
_19 = Tp
_20 = _19
_21 = _20
_21 = &NONLOCAL
_22 = _18
_22 = _21
polybench_t_start = NONLOCAL
polybench_t_start = _22
ESCAPED = _22

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
READONLY = { READONLY }
ESCAPED = { NULL READONLY ESCAPED NONLOCAL _ZZ21polybench_flush_cachevE19__PRETTY_FUNCTION__ Tp }
NONLOCAL = { ESCAPED NONLOCAL } same as stat_16
STOREDANYTHING = { }
INTEGER = { ANYTHING }
calloc = { }
flush_7 = { HEAP }
HEAP = { }
i_32 = { NULL NONLOCAL }
i_15 = { NULL NONLOCAL } same as i_32
tmp_33 = { NONLOCAL }
tmp_14 = { NONLOCAL } same as tmp_33
_9 = { NULL NONLOCAL } same as i_32
_10 = { NULL NONLOCAL } same as i_32
_11 = { HEAP }
_12 = { }
__assert_fail = { }
_ZZ21polybench_flush_cachevE19__PRETTY_FUNCTION__ = { ESCAPED NONLOCAL }
gettimeofday = { }
Tp = { ESCAPED NONLOCAL } same as _17
stat_16 = { ESCAPED NONLOCAL }
__printf_chk = { }
_17 = { ESCAPED NONLOCAL }
_18 = { ESCAPED NONLOCAL } same as _17
_19 = { ESCAPED NONLOCAL } same as _17
_20 = { ESCAPED NONLOCAL } same as _17
_21 = { ESCAPED NONLOCAL }
_22 = { ESCAPED NONLOCAL } same as _21
polybench_t_start = { ESCAPED NONLOCAL }


Alias information for void polybench_timer_start()

Aliased symbols

Tp, UID D.68980, struct timeval, is addressable

Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.67120 D.68980 } (includes global vars)

Flow-insensitive points-to information

flush_7, points-to vars: { D.68985 }
_11, points-to vars: { D.68985 }

;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 9 4 5 6 10 7 8
;;
;; Loop 1
;;  header 3, latch 9
;;  depth 1, outer 0
;;  nodes: 3 9
;; 2 succs { 3 }
;; 3 succs { 9 4 }
;; 9 succs { 3 }
;; 4 succs { 6 5 }
;; 5 succs { }
;; 6 succs { 7 10 }
;; 10 succs { 8 }
;; 7 succs { 8 }
;; 8 succs { 1 }
void polybench_timer_start() ()
{
  struct timeval Tp;
  int stat;
  double D.68982;
  double tmp;
  int i;
  double * flush;
  long unsigned int _9;
  long unsigned int _10;
  double * _11;
  double _12;
  long int _17;
  double _18;
  long int _19;
  double _20;
  double _21;
  double _22;

  <bb 2>:
  flush_7 = calloc (4194560, 8);

  <bb 3>:
  # i_32 = PHI <i_15(9), 0(2)>
  # tmp_33 = PHI <tmp_14(9), 0.0(2)>
  _9 = (long unsigned int) i_32;
  _10 = _9 * 8;
  _11 = flush_7 + _10;
  _12 = *_11;
  tmp_14 = _12 + tmp_33;
  i_15 = i_32 + 1;
  if (i_15 != 4194560)
    goto <bb 9>;
  else
    goto <bb 4>;

  <bb 9>:
  goto <bb 3>;

  <bb 4>:
  if (tmp_14 <= 1.0e+1)
    goto <bb 6>;
  else
    goto <bb 5>;

  <bb 5>:
  __assert_fail ("tmp <= 10.0", "../../../utilities/polybench.c", 96, &__PRETTY_FUNCTION__);

  <bb 6>:
  free (flush_7);
  stat_16 = gettimeofday (&Tp, 0B);
  if (stat_16 != 0)
    goto <bb 7>;
  else
    goto <bb 10>;

  <bb 10>:
  goto <bb 8>;

  <bb 7>:
  __printf_chk (1, "Error return from gettimeofday: %d", stat_16);

  <bb 8>:
  _17 = Tp.tv_sec;
  _18 = (double) _17;
  _19 = Tp.tv_usec;
  _20 = (double) _19;
  _21 = _20 * 9.99999999999999954748111825886258685613938723690807819366e-7;
  _22 = _18 + _21;
  Tp ={v} {CLOBBER};
  polybench_t_start = _22;
  return;

}



;; Function void polybench_timer_stop() (_Z20polybench_timer_stopv, funcdef_no=3273, decl_uid=65914, cgraph_uid=3095)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
READONLY = &READONLY
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
ESCAPED = &Tp
ESCAPED = &NULL
stat_5 = NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &READONLY
ESCAPED = stat_5
_6 = Tp
_7 = _6
_8 = Tp
_9 = _8
_10 = _9
_10 = &NONLOCAL
_11 = _7
_11 = _10
polybench_t_end = NONLOCAL
polybench_t_end = _11
ESCAPED = _11

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
READONLY = { READONLY }
ESCAPED = { NULL READONLY ESCAPED NONLOCAL Tp }
NONLOCAL = { ESCAPED NONLOCAL } same as stat_5
STOREDANYTHING = { }
INTEGER = { ANYTHING }
gettimeofday = { }
Tp = { ESCAPED NONLOCAL } same as _6
stat_5 = { ESCAPED NONLOCAL }
__printf_chk = { }
_6 = { ESCAPED NONLOCAL }
_7 = { ESCAPED NONLOCAL } same as _6
_8 = { ESCAPED NONLOCAL } same as _6
_9 = { ESCAPED NONLOCAL } same as _6
_10 = { ESCAPED NONLOCAL }
_11 = { ESCAPED NONLOCAL } same as _10
polybench_t_end = { ESCAPED NONLOCAL }


Alias information for void polybench_timer_stop()

Aliased symbols

Tp, UID D.68998, struct timeval, is addressable

Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.68998 }

Flow-insensitive points-to information


;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 5 3 4
;; 2 succs { 3 5 }
;; 5 succs { 4 }
;; 3 succs { 4 }
;; 4 succs { 1 }
void polybench_timer_stop() ()
{
  struct timeval Tp;
  int stat;
  double D.69000;
  long int _6;
  double _7;
  long int _8;
  double _9;
  double _10;
  double _11;

  <bb 2>:
  stat_5 = gettimeofday (&Tp, 0B);
  if (stat_5 != 0)
    goto <bb 3>;
  else
    goto <bb 5>;

  <bb 5>:
  goto <bb 4>;

  <bb 3>:
  __printf_chk (1, "Error return from gettimeofday: %d", stat_5);

  <bb 4>:
  _6 = Tp.tv_sec;
  _7 = (double) _6;
  _8 = Tp.tv_usec;
  _9 = (double) _8;
  _10 = _9 * 9.99999999999999954748111825886258685613938723690807819366e-7;
  _11 = _7 + _10;
  Tp ={v} {CLOBBER};
  polybench_t_end = _11;
  return;

}



;; Function void polybench_timer_print() (_Z21polybench_timer_printv, funcdef_no=3274, decl_uid=65915, cgraph_uid=3096)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
READONLY = &READONLY
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
polybench_t_end = NONLOCAL
polybench_t_end.70_2 = polybench_t_end
polybench_t_start = NONLOCAL
polybench_t_start.71_3 = polybench_t_start
_4 = polybench_t_end.70_2
_4 = polybench_t_start.71_3
ESCAPED = &NONLOCAL
ESCAPED = &READONLY
ESCAPED = _4

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
READONLY = { READONLY }
ESCAPED = { READONLY ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as polybench_t_end
STOREDANYTHING = { }
INTEGER = { ANYTHING }
polybench_t_end.70_2 = { ESCAPED NONLOCAL } same as polybench_t_end
polybench_t_end = { ESCAPED NONLOCAL }
polybench_t_start.71_3 = { ESCAPED NONLOCAL } same as polybench_t_end
polybench_t_start = { ESCAPED NONLOCAL } same as polybench_t_end
_4 = { ESCAPED NONLOCAL } same as polybench_t_end
__printf_chk = { }


Alias information for void polybench_timer_print()

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information


;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
void polybench_timer_print() ()
{
  double polybench_t_start.71;
  double polybench_t_end.70;
  double _4;

  <bb 2>:
  polybench_t_end.70_2 = polybench_t_end;
  polybench_t_start.71_3 = polybench_t_start;
  _4 = polybench_t_end.70_2 - polybench_t_start.71_3;
  __printf_chk (1, "%0.6f\n", _4);
  return;

}



;; Function void* polybench_alloc_data(long long unsigned int, int) (_Z20polybench_alloc_datayi, funcdef_no=3276, decl_uid=65921, cgraph_uid=3098)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
READONLY = &READONLY
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
n = &NONLOCAL
elt_size = &NONLOCAL
_3 = elt_size
val_4 = _3
val_4 = n
newA = &NULL
ESCAPED = &newA
ESCAPED = &NONLOCAL
ESCAPED = val_4
ret_8 = NONLOCAL
newA.72_9 = newA
stderr = NONLOCAL
stderr.73_10 = stderr
ESCAPED = &READONLY
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = stderr.73_10
ESCAPED = &NONLOCAL
ESCAPED = newA.72_9

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
READONLY = { READONLY }
ESCAPED = { NULL READONLY ESCAPED NONLOCAL newA }
NONLOCAL = { ESCAPED NONLOCAL } same as ret_8
STOREDANYTHING = { }
INTEGER = { ANYTHING }
n = { NONLOCAL }
elt_size = { NONLOCAL } same as n
_3 = { NONLOCAL } same as n
val_4 = { NONLOCAL } same as n
newA = { NULL ESCAPED NONLOCAL } same as newA.72_9
posix_memalign = { }
ret_8 = { ESCAPED NONLOCAL }
newA.72_9 = { NULL ESCAPED NONLOCAL }
stderr.73_10 = { ESCAPED NONLOCAL } same as ret_8
stderr = { ESCAPED NONLOCAL } same as ret_8
fwrite = { }
exit = { }


Alias information for void* polybench_alloc_data(long long unsigned int, int)

Aliased symbols

newA, UID D.69010, void *, is addressable

Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.69010 }

Flow-insensitive points-to information

newA.72_9, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
stderr.73_10, points-to non-local, points-to escaped, points-to vars: { }

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 6 3 7 4 5
;; 2 succs { 6 3 }
;; 6 succs { 4 }
;; 3 succs { 7 5 }
;; 7 succs { 4 }
;; 4 succs { }
;; 5 succs { 1 }
find_duplicates: <bb 6> duplicate of <bb 7>
Removing basic block 7

Symbols to be put in SSA form
{ D.68221 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 8
Number of blocks to update: 6 ( 75%)


void* polybench_alloc_data(long long unsigned int, int) (long long unsigned int n, int elt_size)
{
  int ret;
  void * newA;
  struct _IO_FILE * stderr.73;
  void * newA.72;
  void * D.69012;
  void * ret;
  size_t val;
  long unsigned int _3;

  <bb 2>:
  _3 = (long unsigned int) elt_size_2(D);
  val_4 = _3 * n_1(D);
  newA = 0B;
  ret_8 = posix_memalign (&newA, 32, val_4);
  newA.72_9 = newA;
  if (newA.72_9 == 0B)
    goto <bb 6>;
  else
    goto <bb 3>;

  <bb 6>:
  goto <bb 4>;

  <bb 3>:
  if (ret_8 != 0)
    goto <bb 6>;
  else
    goto <bb 5>;

  <bb 4>:
  stderr.73_10 = stderr;
  __builtin_fwrite ("[PolyBench] posix_memalign: cannot allocate memory", 1, 50, stderr.73_10);
  exit (1);

  <bb 5>:
  newA ={v} {CLOBBER};
  return newA.72_9;

}



;; Function void __device_stub__Z16gemm_cuda_kerneliiiddPdS_S_(int, int, int, double, double, double*, double*, double*) (_Z45__device_stub__Z16gemm_cuda_kerneliiiddPdS_S_iiiddPdS_S_, funcdef_no=3301, decl_uid=67447, cgraph_uid=3122)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
READONLY = &READONLY
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__par0 = &NONLOCAL
__par1 = &NONLOCAL
__par2 = &NONLOCAL
__par3 = &NONLOCAL
__par4 = &NONLOCAL
__par5 = &NONLOCAL
__par6 = &NONLOCAL
__par7 = &NONLOCAL
ESCAPED = &__par0
ESCAPED = &NONLOCAL
ESCAPED = &NULL
_4 = NONLOCAL
ESCAPED = &__par1
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
_6 = NONLOCAL
ESCAPED = &__par2
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
_8 = NONLOCAL
ESCAPED = &__par3
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
_10 = NONLOCAL
ESCAPED = &__par4
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
_12 = NONLOCAL
ESCAPED = &__par5
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
_14 = NONLOCAL
ESCAPED = &__par6
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
_16 = NONLOCAL
ESCAPED = &__par7
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
_18 = NONLOCAL
_ZZ45__device_stub__Z16gemm_cuda_kerneliiiddPdS_S_iiiddPdS_S_E3__f = NONLOCAL
_ZZ45__device_stub__Z16gemm_cuda_kerneliiiddPdS_S_iiiddPdS_S_E3__f = &_Z16gemm_cuda_kerneliiiddPdS_S_
ESCAPED = &_Z16gemm_cuda_kerneliiiddPdS_S_
ESCAPED = &_Z16gemm_cuda_kerneliiiddPdS_S_

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
READONLY = { READONLY }
ESCAPED = { NULL ESCAPED NONLOCAL __par0 __par1 __par2 __par3 __par4 __par5 __par6 __par7 _Z16gemm_cuda_kerneliiiddPdS_S_ }
NONLOCAL = { ESCAPED NONLOCAL } same as _4
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__par0 = { ESCAPED NONLOCAL }
__par1 = { ESCAPED NONLOCAL }
__par2 = { ESCAPED NONLOCAL }
__par3 = { ESCAPED NONLOCAL }
__par4 = { ESCAPED NONLOCAL }
__par5 = { ESCAPED NONLOCAL }
__par6 = { ESCAPED NONLOCAL }
__par7 = { ESCAPED NONLOCAL }
cudaSetupArgument = { }
_4 = { ESCAPED NONLOCAL }
_6 = { ESCAPED NONLOCAL } same as _4
_8 = { ESCAPED NONLOCAL } same as _4
_10 = { ESCAPED NONLOCAL } same as _4
_12 = { ESCAPED NONLOCAL } same as _4
_14 = { ESCAPED NONLOCAL } same as _4
_16 = { ESCAPED NONLOCAL } same as _4
_18 = { ESCAPED NONLOCAL } same as _4
_ZZ45__device_stub__Z16gemm_cuda_kerneliiiddPdS_S_iiiddPdS_S_E3__f = { ESCAPED NONLOCAL _Z16gemm_cuda_kerneliiiddPdS_S_ }
_Z16gemm_cuda_kerneliiiddPdS_S_ = { ESCAPED NONLOCAL }
cudaLaunch = { }


Alias information for void __device_stub__Z16gemm_cuda_kerneliiiddPdS_S_(int, int, int, double, double, double*, double*, double*)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.67451 D.67452 D.67453 D.67454 D.67455 D.67456 D.67457 D.67458 }

Flow-insensitive points-to information


;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 12 3 13 4 14 5 15 6 16 7 17 8 18 9 19 10 11
;; 2 succs { 12 3 }
;; 12 succs { 11 }
;; 3 succs { 13 4 }
;; 13 succs { 11 }
;; 4 succs { 14 5 }
;; 14 succs { 11 }
;; 5 succs { 15 6 }
;; 15 succs { 11 }
;; 6 succs { 16 7 }
;; 16 succs { 11 }
;; 7 succs { 17 8 }
;; 17 succs { 11 }
;; 8 succs { 18 9 }
;; 18 succs { 11 }
;; 9 succs { 19 10 }
;; 19 succs { 11 }
;; 10 succs { 11 }
;; 11 succs { 1 }
find_duplicates: <bb 12> duplicate of <bb 13>
find_duplicates: <bb 12> duplicate of <bb 14>
find_duplicates: <bb 12> duplicate of <bb 15>
find_duplicates: <bb 12> duplicate of <bb 16>
find_duplicates: <bb 12> duplicate of <bb 17>
find_duplicates: <bb 12> duplicate of <bb 18>
find_duplicates: <bb 12> duplicate of <bb 19>
Removing basic block 13
Removing basic block 14
Removing basic block 15
Removing basic block 16
Removing basic block 17
Removing basic block 18
Removing basic block 19

Symbols to be put in SSA form
{ D.68294 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 20
Number of blocks to update: 12 ( 60%)


void __device_stub__Z16gemm_cuda_kerneliiiddPdS_S_(int, int, int, double, double, double*, double*, double*) (int __par0, int __par1, int __par2, double __par3, double __par4, double * __par5, double * __par6, double * __par7)
{
  static volatile char * __f;
  cudaError _4;
  cudaError _6;
  cudaError _8;
  cudaError _10;
  cudaError _12;
  cudaError _14;
  cudaError _16;
  cudaError _18;

  <bb 2>:
  _4 = cudaSetupArgument (&__par0, 4, 0);
  if (_4 != 0)
    goto <bb 12>;
  else
    goto <bb 3>;

  <bb 12>:
  goto <bb 11>;

  <bb 3>:
  _6 = cudaSetupArgument (&__par1, 4, 4);
  if (_6 != 0)
    goto <bb 12>;
  else
    goto <bb 4>;

  <bb 4>:
  _8 = cudaSetupArgument (&__par2, 4, 8);
  if (_8 != 0)
    goto <bb 12>;
  else
    goto <bb 5>;

  <bb 5>:
  _10 = cudaSetupArgument (&__par3, 8, 16);
  if (_10 != 0)
    goto <bb 12>;
  else
    goto <bb 6>;

  <bb 6>:
  _12 = cudaSetupArgument (&__par4, 8, 24);
  if (_12 != 0)
    goto <bb 12>;
  else
    goto <bb 7>;

  <bb 7>:
  _14 = cudaSetupArgument (&__par5, 8, 32);
  if (_14 != 0)
    goto <bb 12>;
  else
    goto <bb 8>;

  <bb 8>:
  _16 = cudaSetupArgument (&__par6, 8, 40);
  if (_16 != 0)
    goto <bb 12>;
  else
    goto <bb 9>;

  <bb 9>:
  _18 = cudaSetupArgument (&__par7, 8, 48);
  if (_18 != 0)
    goto <bb 12>;
  else
    goto <bb 10>;

  <bb 10>:
  __f = gemm_cuda_kernel;
  cudaLaunch (gemm_cuda_kernel);

  <bb 11>:
  return;

}



;; Function void gemm_cuda(int, int, int, double, double, double (*)[4096], double (*)[4096], double (*)[4096], double (*)[4096], double (*)[4096]) (_Z9gemm_cudaiiiddPA4096_dS0_S0_S0_S0_, funcdef_no=3267, decl_uid=66855, cgraph_uid=3089)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
READONLY = &READONLY
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
ni = &NONLOCAL
nj = &NONLOCAL
nk = &NONLOCAL
alpha = &NONLOCAL
beta = &NONLOCAL
A = &NONLOCAL
B = &NONLOCAL
C = &NONLOCAL
C_inputToGpu = &NONLOCAL
C_outputFromGpu = &NONLOCAL
stderr = NONLOCAL
stderr.44_3 = stderr
ESCAPED = stderr.44_3
ESCAPED = &NONLOCAL
ESCAPED = &READONLY
ESCAPED = &A_gpu
ESCAPED = &NONLOCAL
ESCAPED = &B_gpu
ESCAPED = &NONLOCAL
ESCAPED = &C_gpu
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &spec
_66 = spec
_67 = _66
_68 = _67
_68 = &NONLOCAL
_69 = spec
_70 = _69
_71 = _68
_71 = _70
data_transfer_h2d_start = NONLOCAL
data_transfer_h2d_start = _71
ESCAPED = _71
A_gpu.45_10 = A_gpu
ESCAPED = A_gpu.45_10
ESCAPED = A
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
B_gpu.46_13 = B_gpu
ESCAPED = B_gpu.46_13
ESCAPED = B
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
C_gpu.47_17 = C_gpu
ESCAPED = C_gpu.47_17
ESCAPED = C_inputToGpu
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &spec
_72 = spec
_73 = _72
_74 = _73
_74 = &NONLOCAL
_75 = spec
_76 = _75
_77 = _74
_77 = _76
data_transfer_h2d_stop = NONLOCAL
data_transfer_h2d_stop = _77
ESCAPED = _77
block = &NONLOCAL
grid = &NONLOCAL
grid = &NONLOCAL
grid = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &spec
_78 = spec
_79 = _78
_80 = _79
_80 = &NONLOCAL
_81 = spec
_82 = _81
_83 = _80
_83 = _82
dev_kernel1_start = NONLOCAL
dev_kernel1_start = _83
ESCAPED = _83
block = &NONLOCAL
block = &NONLOCAL
ESCAPED = grid
ESCAPED = block
ESCAPED = &NULL
ESCAPED = &NULL
_29 = NONLOCAL
C_gpu.47_30 = C_gpu
B_gpu.46_31 = B_gpu
A_gpu.45_32 = A_gpu
ESCAPED = ni
ESCAPED = nj
ESCAPED = nk
ESCAPED = alpha
ESCAPED = beta
ESCAPED = A_gpu.45_32
ESCAPED = B_gpu.46_31
ESCAPED = C_gpu.47_30
ESCAPED = &NONLOCAL
ESCAPED = &spec
_84 = spec
_85 = _84
_86 = _85
_86 = &NONLOCAL
_87 = spec
_88 = _87
_89 = _86
_89 = _88
dev_kernel1_stop = NONLOCAL
dev_kernel1_stop = _89
ESCAPED = _89
ESCAPED = &NONLOCAL
ESCAPED = &spec
_90 = spec
_91 = _90
_92 = _91
_92 = &NONLOCAL
_93 = spec
_94 = _93
_95 = _92
_95 = _94
data_transfer_d2h_start = NONLOCAL
data_transfer_d2h_start = _95
ESCAPED = _95
C_gpu.47_43 = C_gpu
ESCAPED = C_outputFromGpu
ESCAPED = C_gpu.47_43
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &spec
_96 = spec
_97 = _96
_98 = _97
_98 = &NONLOCAL
_99 = spec
_100 = _99
_101 = _98
_101 = _100
data_transfer_d2h_stop = NONLOCAL
data_transfer_d2h_stop = _101
ESCAPED = _101
A_gpu.45_47 = A_gpu
ESCAPED = A_gpu.45_47
B_gpu.46_49 = B_gpu
ESCAPED = B_gpu.46_49
C_gpu.47_51 = C_gpu
ESCAPED = C_gpu.47_51

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
READONLY = { READONLY }
ESCAPED = { NULL READONLY ESCAPED NONLOCAL A_gpu B_gpu C_gpu spec spec spec spec spec spec }
NONLOCAL = { ESCAPED NONLOCAL } same as stderr
STOREDANYTHING = { }
INTEGER = { ANYTHING }
ni = { NONLOCAL }
nj = { NONLOCAL } same as ni
nk = { NONLOCAL } same as ni
alpha = { NONLOCAL } same as ni
beta = { NONLOCAL } same as ni
A = { NONLOCAL } same as ni
B = { NONLOCAL } same as ni
C = { NONLOCAL } same as ni
C_inputToGpu = { NONLOCAL } same as ni
C_outputFromGpu = { NONLOCAL } same as ni
stderr.44_3 = { ESCAPED NONLOCAL } same as stderr
stderr = { ESCAPED NONLOCAL }
__fprintf_chk = { }
_Z13GPU_argv_initv = { }
cudaMalloc = { }
A_gpu = { ESCAPED NONLOCAL } same as A_gpu.45_10
B_gpu = { ESCAPED NONLOCAL } same as B_gpu.46_13
C_gpu = { ESCAPED NONLOCAL } same as C_gpu.47_17
clock_gettime = { }
spec = { ESCAPED NONLOCAL } same as _66
_66 = { ESCAPED NONLOCAL }
_67 = { ESCAPED NONLOCAL } same as _66
_68 = { ESCAPED NONLOCAL }
_69 = { ESCAPED NONLOCAL } same as _66
_70 = { ESCAPED NONLOCAL } same as _66
_71 = { ESCAPED NONLOCAL } same as _68
data_transfer_h2d_start = { ESCAPED NONLOCAL }
A_gpu.45_10 = { ESCAPED NONLOCAL }
cudaMemcpy = { }
B_gpu.46_13 = { ESCAPED NONLOCAL }
C_gpu.47_17 = { ESCAPED NONLOCAL }
spec = { ESCAPED NONLOCAL } same as _72
_72 = { ESCAPED NONLOCAL }
_73 = { ESCAPED NONLOCAL } same as _72
_74 = { ESCAPED NONLOCAL }
_75 = { ESCAPED NONLOCAL } same as _72
_76 = { ESCAPED NONLOCAL } same as _72
_77 = { ESCAPED NONLOCAL } same as _74
data_transfer_h2d_stop = { ESCAPED NONLOCAL }
block = { NONLOCAL } same as ni
grid = { NONLOCAL } same as ni
spec = { ESCAPED NONLOCAL } same as _78
_78 = { ESCAPED NONLOCAL }
_79 = { ESCAPED NONLOCAL } same as _78
_80 = { ESCAPED NONLOCAL }
_81 = { ESCAPED NONLOCAL } same as _78
_82 = { ESCAPED NONLOCAL } same as _78
_83 = { ESCAPED NONLOCAL } same as _80
dev_kernel1_start = { ESCAPED NONLOCAL }
cudaConfigureCall = { }
_29 = { ESCAPED NONLOCAL } same as stderr
C_gpu.47_30 = { ESCAPED NONLOCAL } same as C_gpu.47_17
B_gpu.46_31 = { ESCAPED NONLOCAL } same as B_gpu.46_13
A_gpu.45_32 = { ESCAPED NONLOCAL } same as A_gpu.45_10
_Z45__device_stub__Z16gemm_cuda_kerneliiiddPdS_S_iiiddPdS_S_ = { }
cudaThreadSynchronize = { }
spec = { ESCAPED NONLOCAL } same as _84
_84 = { ESCAPED NONLOCAL }
_85 = { ESCAPED NONLOCAL } same as _84
_86 = { ESCAPED NONLOCAL }
_87 = { ESCAPED NONLOCAL } same as _84
_88 = { ESCAPED NONLOCAL } same as _84
_89 = { ESCAPED NONLOCAL } same as _86
dev_kernel1_stop = { ESCAPED NONLOCAL }
spec = { ESCAPED NONLOCAL } same as _90
_90 = { ESCAPED NONLOCAL }
_91 = { ESCAPED NONLOCAL } same as _90
_92 = { ESCAPED NONLOCAL }
_93 = { ESCAPED NONLOCAL } same as _90
_94 = { ESCAPED NONLOCAL } same as _90
_95 = { ESCAPED NONLOCAL } same as _92
data_transfer_d2h_start = { ESCAPED NONLOCAL }
C_gpu.47_43 = { ESCAPED NONLOCAL } same as C_gpu.47_17
spec = { ESCAPED NONLOCAL } same as _96
_96 = { ESCAPED NONLOCAL }
_97 = { ESCAPED NONLOCAL } same as _96
_98 = { ESCAPED NONLOCAL }
_99 = { ESCAPED NONLOCAL } same as _96
_100 = { ESCAPED NONLOCAL } same as _96
_101 = { ESCAPED NONLOCAL } same as _98
data_transfer_d2h_stop = { ESCAPED NONLOCAL }
A_gpu.45_47 = { ESCAPED NONLOCAL } same as A_gpu.45_10
cudaFree = { }
B_gpu.46_49 = { ESCAPED NONLOCAL } same as B_gpu.46_13
C_gpu.47_51 = { ESCAPED NONLOCAL } same as C_gpu.47_17


Alias information for void gemm_cuda(int, int, int, double, double, double (*)[4096], double (*)[4096], double (*)[4096], double (*)[4096], double (*)[4096])

Aliased symbols

spec, UID D.69032, struct timespec, is addressable
spec, UID D.69030, struct timespec, is addressable
spec, UID D.69028, struct timespec, is addressable
spec, UID D.69026, struct timespec, is addressable
spec, UID D.69024, struct timespec, is addressable
spec, UID D.69022, struct timespec, is addressable
C_gpu, UID D.66859, double *, is addressable
B_gpu, UID D.66858, double *, is addressable
A_gpu, UID D.66857, double *, is addressable

Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.66857 D.66858 D.66859 D.69022 D.69024 D.69026 D.69028 D.69030 D.69032 }

Flow-insensitive points-to information

stderr.44_3, points-to non-local, points-to escaped, points-to vars: { }
A_gpu.45_10, points-to non-local, points-to escaped, points-to vars: { }
A_11(D), points-to non-local, points-to vars: { }
B_gpu.46_13, points-to non-local, points-to escaped, points-to vars: { }
B_14(D), points-to non-local, points-to vars: { }
C_gpu.47_17, points-to non-local, points-to escaped, points-to vars: { }
C_inputToGpu_18(D), points-to non-local, points-to vars: { }
C_gpu.47_30, points-to non-local, points-to escaped, points-to vars: { }
B_gpu.46_31, points-to non-local, points-to escaped, points-to vars: { }
A_gpu.45_32, points-to non-local, points-to escaped, points-to vars: { }
C_gpu.47_43, points-to non-local, points-to escaped, points-to vars: { }
C_outputFromGpu_44(D), points-to non-local, points-to vars: { }
A_gpu.45_47, points-to non-local, points-to escaped, points-to vars: { }
B_gpu.46_49, points-to non-local, points-to escaped, points-to vars: { }
C_gpu.47_51, points-to non-local, points-to escaped, points-to vars: { }

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 5 3 4
;; 2 succs { 3 5 }
;; 5 succs { 4 }
;; 3 succs { 4 }
;; 4 succs { 1 }
void gemm_cuda(int, int, int, double, double, double (*)[4096], double (*)[4096], double (*)[4096], double (*)[4096], double (*)[4096]) (int ni, int nj, int nk, double alpha, double beta, double[4096] * A, double[4096] * B, double[4096] * C, double[4096] * C_inputToGpu, double[4096] * C_outputFromGpu)
{
  struct timespec spec;
  struct timespec spec;
  struct timespec spec;
  struct timespec spec;
  struct timespec spec;
  struct timespec spec;
  struct dim3 grid;
  struct dim3 block;
  double * C_gpu;
  double * B_gpu;
  double * A_gpu;
  double * C_gpu.47;
  double * B_gpu.46;
  double * A_gpu.45;
  struct _IO_FILE * stderr.44;
  cudaError _29;
  long int _66;
  long unsigned int _67;
  long unsigned int _68;
  long int _69;
  long unsigned int _70;
  uint64_t _71;
  long int _72;
  long unsigned int _73;
  long unsigned int _74;
  long int _75;
  long unsigned int _76;
  uint64_t _77;
  long int _78;
  long unsigned int _79;
  long unsigned int _80;
  long int _81;
  long unsigned int _82;
  uint64_t _83;
  long int _84;
  long unsigned int _85;
  long unsigned int _86;
  long int _87;
  long unsigned int _88;
  uint64_t _89;
  long int _90;
  long unsigned int _91;
  long unsigned int _92;
  long int _93;
  long unsigned int _94;
  uint64_t _95;
  long int _96;
  long unsigned int _97;
  long unsigned int _98;
  long int _99;
  long unsigned int _100;
  uint64_t _101;

  <bb 2>:
  stderr.44_3 = stderr;
  __fprintf_chk (stderr.44_3, 1, "Calling function gemm_cuda.\n");
  GPU_argv_init ();
  cudaMalloc (&A_gpu, 134217728);
  cudaMalloc (&B_gpu, 134217728);
  cudaMalloc (&C_gpu, 134217728);
  clock_gettime (1, &spec);
  _66 = spec.tv_sec;
  _67 = (long unsigned int) _66;
  _68 = _67 * 1000000000;
  _69 = spec.tv_nsec;
  _70 = (long unsigned int) _69;
  _71 = _68 + _70;
  spec ={v} {CLOBBER};
  data_transfer_h2d_start = _71;
  A_gpu.45_10 = A_gpu;
  cudaMemcpy (A_gpu.45_10, A_11(D), 134217728, 1);
  B_gpu.46_13 = B_gpu;
  cudaMemcpy (B_gpu.46_13, B_14(D), 134217728, 1);
  C_gpu.47_17 = C_gpu;
  cudaMemcpy (C_gpu.47_17, C_inputToGpu_18(D), 134217728, 1);
  clock_gettime (1, &spec);
  _72 = spec.tv_sec;
  _73 = (long unsigned int) _72;
  _74 = _73 * 1000000000;
  _75 = spec.tv_nsec;
  _76 = (long unsigned int) _75;
  _77 = _74 + _76;
  spec ={v} {CLOBBER};
  data_transfer_h2d_stop = _77;
  block.z = 1;
  grid.x = 128;
  grid.y = 512;
  grid.z = 1;
  clock_gettime (1, &spec);
  _78 = spec.tv_sec;
  _79 = (long unsigned int) _78;
  _80 = _79 * 1000000000;
  _81 = spec.tv_nsec;
  _82 = (long unsigned int) _81;
  _83 = _80 + _82;
  spec ={v} {CLOBBER};
  dev_kernel1_start = _83;
  MEM[(struct dim3 *)&block] = 32;
  MEM[(struct dim3 *)&block + 4B] = 8;
  _29 = cudaConfigureCall (grid, block, 0, 0B);
  if (_29 == 0)
    goto <bb 3>;
  else
    goto <bb 5>;

  <bb 5>:
  goto <bb 4>;

  <bb 3>:
  C_gpu.47_30 = C_gpu;
  B_gpu.46_31 = B_gpu;
  A_gpu.45_32 = A_gpu;
  __device_stub__Z16gemm_cuda_kerneliiiddPdS_S_ (ni_33(D), nj_34(D), nk_35(D), alpha_36(D), beta_37(D), A_gpu.45_32, B_gpu.46_31, C_gpu.47_30);

  <bb 4>:
  cudaThreadSynchronize ();
  clock_gettime (1, &spec);
  _84 = spec.tv_sec;
  _85 = (long unsigned int) _84;
  _86 = _85 * 1000000000;
  _87 = spec.tv_nsec;
  _88 = (long unsigned int) _87;
  _89 = _86 + _88;
  spec ={v} {CLOBBER};
  dev_kernel1_stop = _89;
  clock_gettime (1, &spec);
  _90 = spec.tv_sec;
  _91 = (long unsigned int) _90;
  _92 = _91 * 1000000000;
  _93 = spec.tv_nsec;
  _94 = (long unsigned int) _93;
  _95 = _92 + _94;
  spec ={v} {CLOBBER};
  data_transfer_d2h_start = _95;
  C_gpu.47_43 = C_gpu;
  cudaMemcpy (C_outputFromGpu_44(D), C_gpu.47_43, 134217728, 2);
  clock_gettime (1, &spec);
  _96 = spec.tv_sec;
  _97 = (long unsigned int) _96;
  _98 = _97 * 1000000000;
  _99 = spec.tv_nsec;
  _100 = (long unsigned int) _99;
  _101 = _98 + _100;
  spec ={v} {CLOBBER};
  data_transfer_d2h_stop = _101;
  A_gpu.45_47 = A_gpu;
  cudaFree (A_gpu.45_47);
  B_gpu.46_49 = B_gpu;
  cudaFree (B_gpu.46_49);
  C_gpu.47_51 = C_gpu;
  cudaFree (C_gpu.47_51);
  A_gpu ={v} {CLOBBER};
  B_gpu ={v} {CLOBBER};
  C_gpu ={v} {CLOBBER};
  block ={v} {CLOBBER};
  grid ={v} {CLOBBER};
  return;

}



;; Function void __sti____cudaRegisterAll_39_tmpxft_0000336e_00000000_7_gemm_cpp1_ii_132e4611() (_ZL76__sti____cudaRegisterAll_39_tmpxft_0000336e_00000000_7_gemm_cpp1_ii_132e4611v, funcdef_no=3304, decl_uid=67450, cgraph_uid=3125) (executed once)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
READONLY = &READONLY
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__fatDeviceText.0+64 = NONLOCAL
__fatDeviceText.64+64 = NONLOCAL
__fatDeviceText.128+64 = NONLOCAL
ESCAPED = &__fatDeviceText.0+64
_3 = NONLOCAL
_ZL20__cudaFatCubinHandle = NONLOCAL
_ZL20__cudaFatCubinHandle = _3
ESCAPED = _3
__ref = NONLOCAL
__ref = _3
ESCAPED = _3
__nv_fatbinhandle_for_managed_rt = NONLOCAL
__nv_fatbinhandle_for_managed_rt = _3
ESCAPED = _3
ESCAPED = _3
ESCAPED = &_Z16gemm_cuda_kerneliiiddPdS_S_
ESCAPED = &READONLY
ESCAPED = &READONLY
ESCAPED = &NONLOCAL
ESCAPED = &NULL
ESCAPED = &NULL
ESCAPED = &NULL
ESCAPED = &NULL
ESCAPED = &NULL
ESCAPED = &_ZL26__cudaUnregisterBinaryUtilv

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
READONLY = { READONLY }
ESCAPED = { NULL READONLY ESCAPED NONLOCAL __fatDeviceText.0+64 __fatDeviceText.64+64 __fatDeviceText.128+64 _Z16gemm_cuda_kerneliiiddPdS_S_ _ZL26__cudaUnregisterBinaryUtilv }
NONLOCAL = { ESCAPED NONLOCAL } same as _3
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__cudaRegisterFatBinary = { }
__fatDeviceText.0+64 = { ESCAPED NONLOCAL }
__fatDeviceText.64+64 = { ESCAPED NONLOCAL }
__fatDeviceText.128+64 = { ESCAPED NONLOCAL }
_3 = { ESCAPED NONLOCAL }
_ZL20__cudaFatCubinHandle = { ESCAPED NONLOCAL } same as _3
__ref = { ESCAPED NONLOCAL } same as _3
__nv_fatbinhandle_for_managed_rt = { ESCAPED NONLOCAL } same as _3
__cudaRegisterFunction = { }
_Z16gemm_cuda_kerneliiiddPdS_S_ = { ESCAPED NONLOCAL }
atexit = { }
_ZL26__cudaUnregisterBinaryUtilv = { ESCAPED NONLOCAL }


Alias information for void __sti____cudaRegisterAll_39_tmpxft_0000336e_00000000_7_gemm_cpp1_ii_132e4611()

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.67438 } (includes global vars)

Flow-insensitive points-to information

_3, points-to non-local, points-to escaped, points-to vars: { }

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
void __sti____cudaRegisterAll_39_tmpxft_0000336e_00000000_7_gemm_cpp1_ii_132e4611() ()
{
  static volatile void * * __ref;
  void * * _3;

  <bb 2>:
  _3 = __cudaRegisterFatBinary (&__fatDeviceText);
  __cudaFatCubinHandle = _3;
  __ref = _3;
  __nv_fatbinhandle_for_managed_rt = _3;
  __cudaRegisterFunction (_3, gemm_cuda_kernel, "_Z16gemm_cuda_kerneliiiddPdS_S_", "_Z16gemm_cuda_kerneliiiddPdS_S_", -1, 0B, 0B, 0B, 0B, 0B);
  atexit (__cudaUnregisterBinaryUtil);
  return;

}


