data <- read.table(header=TRUE, text='
subject sex condition before after change
1   F   placebo   10.1   6.9   -3.2
2   F   placebo    6.3   4.2   -2.1
3   M   aspirin   12.4   6.3   -6.1
4   F   placebo    8.1   6.1   -2.0
5   M   aspirin   15.2   9.9   -5.3
6   F   aspirin   10.9   7.0   -3.9
7   F   aspirin   11.6   8.5   -3.1
8   M   aspirin    9.5   3.0   -6.5
9   F   placebo   11.5   9.0   -2.5
10   M   placebo   11.9  11.0   -0.9
11   F   aspirin   11.4   8.0   -3.4
12   M   aspirin   10.0   4.4   -5.6
13   M   aspirin   12.5   5.4   -7.1
14   M   placebo   10.6  10.6    0.0
15   M   aspirin    9.1   4.3   -4.8
16   F   placebo   12.1  10.2   -1.9
17   F   placebo   11.0   8.8   -2.2
18   F   placebo   11.9  10.2   -1.7
19   M   aspirin    9.1   3.6   -5.5
20   M   placebo   13.5  12.4   -1.1
21   M   aspirin   12.0   7.5   -4.5
22   F   placebo    9.1   7.6   -1.5
23   M   placebo    9.9   8.0   -1.9
24   F   placebo    7.6   5.2   -2.4
25   F   placebo   11.8   9.7   -2.1
26   F   placebo   11.8  10.7   -1.1
27   F   aspirin   10.1   7.9   -2.2
28   M   aspirin   11.6   8.3   -3.3
29   F   aspirin   11.3   6.8   -4.5
30   F   placebo   10.3   8.3   -2.0
')
;
data <- read.table(header=TRUE, text='
subject sex condition before after change
1   F   placebo   10.1   6.9   -3.2
2   F   placebo    6.3   4.2   -2.1
3   M   aspirin   12.4   6.3   -6.1
4   F   placebo    8.1   6.1   -2.0
5   M   aspirin   15.2   9.9   -5.3
6   F   aspirin   10.9   7.0   -3.9
7   F   aspirin   11.6   8.5   -3.1
8   M   aspirin    9.5   3.0   -6.5
9   F   placebo   11.5   9.0   -2.5
10   M   placebo   11.9  11.0   -0.9
11   F   aspirin   11.4   8.0   -3.4
12   M   aspirin   10.0   4.4   -5.6
13   M   aspirin   12.5   5.4   -7.1
14   M   placebo   10.6  10.6    0.0
15   M   aspirin    9.1   4.3   -4.8
16   F   placebo   12.1  10.2   -1.9
17   F   placebo   11.0   8.8   -2.2
18   F   placebo   11.9  10.2   -1.7
19   M   aspirin    9.1   3.6   -5.5
20   M   placebo   13.5  12.4   -1.1
21   M   aspirin   12.0   7.5   -4.5
22   F   placebo    9.1   7.6   -1.5
23   M   placebo    9.9   8.0   -1.9
24   F   placebo    7.6   5.2   -2.4
25   F   placebo   11.8   9.7   -2.1
26   F   placebo   11.8  10.7   -1.1
27   F   aspirin   10.1   7.9   -2.2
28   M   aspirin   11.6   8.3   -3.3
29   F   aspirin   11.3   6.8   -4.5
30   F   placebo   10.3   8.3   -2.0
')
ggplot(tgc2, aes(x=dose, y=len, fill=supp)) +
geom_bar(position=position_dodge(), stat="identity",
colour="black", # Use black outlines,
size=.3) +      # Thinner lines
geom_errorbar(aes(ymin=len-se, ymax=len+se),
size=.3,    # Thinner lines
width=.2,
position=position_dodge(.9)) +
xlab("Dose (mg)") +
ylab("Tooth length") +
scale_fill_hue(name="Supplement type", # Legend label, use darker colors
breaks=c("OJ", "VC"),
labels=c("Orange juice", "Ascorbic acid")) +
ggtitle("The Effect of Vitamin C on\nTooth Growth in Guinea Pigs") +
scale_y_continuous(breaks=0:20*4) +
theme_bw() +
theme(legend.position=c(0.0,0.9),legend.direction="vertical")
ggplot(tgc2, aes(x=dose, y=len, fill=supp)) +
geom_bar(position=position_dodge(), stat="identity",
colour="black", # Use black outlines,
size=.3) +      # Thinner lines
geom_errorbar(aes(ymin=len-se, ymax=len+se),
size=.3,    # Thinner lines
width=.2,
position=position_dodge(.9)) +
xlab("Dose (mg)") +
ylab("Tooth length") +
scale_fill_hue(name="Supplement type", # Legend label, use darker colors
breaks=c("OJ", "VC"),
labels=c("Orange juice", "Ascorbic acid")) +
ggtitle("The Effect of Vitamin C on\nTooth Growth in Guinea Pigs") +
scale_y_continuous(breaks=0:20*4) +
theme_bw() +
theme(legend.position=c(0.1,5),legend.direction="vertical")
data <- read.table(header=TRUE, text='
subject sex condition before after change
1   F   placebo   10.1   6.9   -3.2
2   F   placebo    6.3   4.2   -2.1
3   M   aspirin   12.4   6.3   -6.1
4   F   placebo    8.1   6.1   -2.0
5   M   aspirin   15.2   9.9   -5.3
6   F   aspirin   10.9   7.0   -3.9
7   F   aspirin   11.6   8.5   -3.1
8   M   aspirin    9.5   3.0   -6.5
9   F   placebo   11.5   9.0   -2.5
10   M   placebo   11.9  11.0   -0.9
11   F   aspirin   11.4   8.0   -3.4
12   M   aspirin   10.0   4.4   -5.6
13   M   aspirin   12.5   5.4   -7.1
14   M   placebo   10.6  10.6    0.0
15   M   aspirin    9.1   4.3   -4.8
16   F   placebo   12.1  10.2   -1.9
17   F   placebo   11.0   8.8   -2.2
18   F   placebo   11.9  10.2   -1.7
19   M   aspirin    9.1   3.6   -5.5
20   M   placebo   13.5  12.4   -1.1
21   M   aspirin   12.0   7.5   -4.5
22   F   placebo    9.1   7.6   -1.5
23   M   placebo    9.9   8.0   -1.9
24   F   placebo    7.6   5.2   -2.4
25   F   placebo   11.8   9.7   -2.1
26   F   placebo   11.8  10.7   -1.1
27   F   aspirin   10.1   7.9   -2.2
28   M   aspirin   11.6   8.3   -3.3
29   F   aspirin   11.3   6.8   -4.5
30   F   placebo   10.3   8.3   -2.0
')
library(plyr)
installed.packages(knitr)
```{r pressure, echo=FALSE}
installed.packages(knitr)
install.packages("knitr")
install.packages("knitr")
cd /tmp
op <- par(mfrow=c(2,2))
curve(x^3-3*x, -2, 2)
curve(x^2-2, add = TRUE, col = "violet")
plot(cos, xlim = c(-pi,3*pi), n = 1001, col = "blue")
chippy <- function(x) sin(cos(x)*exp(-x/2))
curve(chippy, -8, 7, n=2001)
curve(chippy, -8, -5)
for(ll in c("","x","y","xy"))
curve(log(1+x), 1,100, log=ll, sub=paste("log= '",ll,"'",sep=""))
par(op)
op <- par(mfrow=c(2,2))
curve(x^3-3*x, -2, 2)
curve(x^2-2, add = TRUE, col = "violet")
plot(cos, xlim = c(-pi,3*pi), n = 1001, col = "blue")
chippy <- function(x) sin(cos(x)*exp(-x/2))
curve(chippy, -8, 7, n=2001)
curve(chippy, -8, -5)
for(ll in c("","x","y","xy"))
curve(log(1+x), 1,100, log=ll, sub=paste("log= '",ll,"'",sep=""))
par(op)
curve(x^3-3*x, -2, 2)
curve(x^2+5, -2, 2)
curve(x^2+5, -20, 20)
curve(x^2+5, -200, 200)
library(plyr)
library(ggplot2)
# Multiple plot function
#
# ggplot objects can be passed in ..., or to plotlist (as a list of ggplot objects)
# - cols:   Number of columns in layout
# - layout: A matrix specifying the layout. If present, 'cols' is ignored.
#
# If the layout is something like matrix(c(1,2,3,3), nrow=2, byrow=TRUE),
# then plot 1 will go in the upper left, 2 will go in the upper right, and
# 3 will go all the way across the bottom.
#
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
# Latency.
# plot(latency_data$execution,latency_data$average_time_per_copy_us)
# lines(latency_data$execution,latency_data$average_time_per_copy_us)
# abline(h=mean(latency_data$average_time_per_copy_us), col="blue")
latency_int_data = read.csv("/dados/rogerio/USP/doutorado/prova-de-conceito/testes-prova-conceito/cuda-data-transfers/latency-int.csv");
latency_int_data
View(latency_int_data)
latency_char_data_data = read.csv("/dados/rogerio/USP/doutorado/prova-de-conceito/testes-prova-conceito/cuda-data-transfers/latency-char.csv");
latency_char_data_data
latency_char_data_data = read.csv("/dados/rogerio/USP/doutorado/prova-de-conceito/testes-prova-conceito/cuda-data-transfers/latency-char.csv");
latency_char_data_data
View(latency_char_data_data)
latency-gettimeofday-pageable-h2d <- subset(latency_char_data_data, time_method == "gettimeofday")
latency_gettimeofday_pageable_h2d <- subset(latency_char_data_data, time_method == "gettimeofday")
latency_gettimeofday_pageable_h2d
latency_gettimeofday_pageable_h2d <- subset(latency_char_data_data, time_method == "gettimeofday" & mem_mode == "pageable" & copy_direction = "h2d")
latency_gettimeofday_pageable_h2d <- subset(latency_char_data_data, time_method == "gettimeofday" & mem_mode == "pageable" & copy_direction == "h2d")
latency_gettimeofday_pageable_h2d
mean(latency_gettimeofday_pageable_h2d$avg_time_per_copy_ns)
min(latency_gettimeofday_pageable_h2d$avg_time_per_copy_ns)
max(latency_gettimeofday_pageable_h2d$avg_time_per_copy_ns)
latency-gettimeofday-pageable-d2h <- subset(latency_char_data_data, time_method == "gettimeofday" & mem_mode == "pageable" & copy_direction == "d2h")
latency_gettimeofday_pageable_d2h
mean(latency_gettimeofday_pageable_d2h$avg_time_per_copy_ns)
min(latency_gettimeofday_pageable_d2h$avg_time_per_copy_ns)
max(latency_gettimeofday_pageable_d2h$avg_time_per_copy_ns)
latency-gettimeofday-pageable-d2h <- subset(latency_char_data_data, time_method == "gettimeofday" & mem_mode == "pageable" & copy_direction == "d2h")
latency_gettimeofday_pageable_d2h <- subset(latency_char_data_data, time_method == "gettimeofday" & mem_mode == "pageable" & copy_direction == "d2h")
latency_gettimeofday_pageable_d2h
mean(latency_gettimeofday_pageable_d2h$avg_time_per_copy_ns)
min(latency_gettimeofday_pageable_d2h$avg_time_per_copy_ns)
max(latency_gettimeofday_pageable_d2h$avg_time_per_copy_ns)
# h2d
latency_gettimeofday_pinned_h2d <- subset(latency_char_data_data, time_method == "gettimeofday" & mem_mode == "pageable" & copy_direction == "d2h")
latency_gettimeofday_pinned_h2d
mean(latency_gettimeofday_pinned_h2d$avg_time_per_copy_ns)
min(latency_gettimeofday_pinned_h2d$avg_time_per_copy_ns)
max(latency_gettimeofday_pinned_h2d$avg_time_per_copy_ns)
latency_gettimeofday_pinned_d2h <- subset(latency_char_data_data, time_method == "gettimeofday" & mem_mode == "pageable" & copy_direction == "d2h")
latency_gettimeofday_pinned_d2h
mean(latency_gettimeofday_pinned_d2h$avg_time_per_copy_ns)
min(latency_gettimeofday_pinned_d2h$avg_time_per_copy_ns)
max(latency_gettimeofday_pinned_d2h$avg_time_per_copy_ns)
latency_gettimeofday_pinned_h2d <- subset(latency_char_data_data, time_method == "gettimeofday" & mem_mode == "pinned" & copy_direction == "h2d")
latency_gettimeofday_pinned_h2d
mean(latency_gettimeofday_pinned_h2d$avg_time_per_copy_ns)
min(latency_gettimeofday_pinned_h2d$avg_time_per_copy_ns)
max(latency_gettimeofday_pinned_h2d$avg_time_per_copy_ns)
latency_gettimeofday_pinned_d2h <- subset(latency_char_data_data, time_method == "gettimeofday" & mem_mode == "pageable" & copy_direction == "d2h")
latency_gettimeofday_pinned_d2h
mean(latency_gettimeofday_pinned_d2h$avg_time_per_copy_ns)
min(latency_gettimeofday_pinned_d2h$avg_time_per_copy_ns)
max(latency_gettimeofday_pinned_d2h$avg_time_per_copy_ns)
latency_gettime_pageable_h2d <- subset(latency_char_data_data, time_method == "gettime" & mem_mode == "pageable" & copy_direction == "h2d")
latency_gettime_pageable_h2d
mean(latency_gettime_pageable_h2d$avg_time_per_copy_ns)
min(latency_gettime_pageable_h2d$avg_time_per_copy_ns)
max(latency_gettime_pageable_h2d$avg_time_per_copy_ns)
mean(latency_gettime_pinned_d2h$avg_time_per_copy_ns)
min(latency_gettime_pinned_d2h$avg_time_per_copy_ns)
max(latency_gettime_pinned_d2h$avg_time_per_copy_ns)
latency_gettime_pinned_d2h <- subset(latency_char_data_data, time_method == "gettime" & mem_mode == "pageable" & copy_direction == "d2h")
latency_gettime_pinned_d2h
mean(latency_gettime_pinned_d2h$avg_time_per_copy_ns)
min(latency_gettime_pinned_d2h$avg_time_per_copy_ns)
max(latency_gettime_pinned_d2h$avg_time_per_copy_ns)
latency-gettime-pageable-d2h <- subset(latency_char_data_data, time_method == "gettime" & mem_mode == "pageable" & copy_direction == "d2h")
latency-gettime-pageable-d2h
mean(latency-gettime-pageable-d2h$avg_time_per_copy_ns)
min(latency-gettime-pageable-d2h$avg_time_per_copy_ns)
max(latency-gettime-pageable-d2h$avg_time_per_copy_ns)
latency_gettime_pageable_d2h <- subset(latency_char_data_data, time_method == "gettime" & mem_mode == "pageable" & copy_direction == "d2h")
latency_gettime_pageable_d2h
mean(latency_gettime_pageable_d2h$avg_time_per_copy_ns)
min(latency_gettime_pageable_d2h$avg_time_per_copy_ns)
max(latency_gettime_pageable_d2h$avg_time_per_copy_ns)
latency_gettime_pinned_h2d <- subset(latency_char_data_data, time_method == "gettime" & mem_mode == "pinned" & copy_direction == "h2d")
latency_gettime_pinned_h2d
mean(latency_gettime_pinned_h2d$avg_time_per_copy_ns)
min(latency_gettime_pinned_h2d$avg_time_per_copy_ns)
max(latency_gettime_pinned_h2d$avg_time_per_copy_ns)
latency_gettime_pinned_d2h <- subset(latency_char_data_data, time_method == "gettime" & mem_mode == "pinned" & copy_direction == "d2h")
latency_gettime_pinned_d2h
mean(latency_gettime_pinned_d2h$avg_time_per_copy_ns)
min(latency_gettime_pinned_d2h$avg_time_per_copy_ns)
max(latency_gettime_pinned_d2h$avg_time_per_copy_ns)
latency_char_data_data = read.csv("/dados/rogerio/USP/doutorado/prova-de-conceito/testes-prova-conceito/cuda-data-transfers/latency-char.csv");
latency_char_data_data
View(latency_char_data_data)
# Using the function getimeofday:
#--------------------------------
# -> Pageable:
#--------------------------------
# h2d
latency_gettimeofday_pageable_h2d <- subset(latency_char_data_data, time_method == "gettimeofday" & mem_mode == "pageable" & copy_direction == "h2d")
latency_gettimeofday_pageable_h2d
mean(latency_gettimeofday_pageable_h2d$avg_time_per_copy_ns)
min(latency_gettimeofday_pageable_h2d$avg_time_per_copy_ns)
max(latency_gettimeofday_pageable_h2d$avg_time_per_copy_ns)
latency_char_data_data = read.csv("/dados/rogerio/USP/doutorado/prova-de-conceito/testes-prova-conceito/cuda-data-transfers/latency-char.csv");
latency_char_data_data
View(latency_char_data_data)
# Using the function getimeofday:
#--------------------------------
# -> Pageable:
#--------------------------------
# h2d
latency_gettimeofday_pageable_h2d <- subset(latency_char_data_data, time_method == "gettimeofday" & mem_mode == "pageable" & copy_direction == "h2d")
latency_gettimeofday_pageable_h2d
mean(latency_gettimeofday_pageable_h2d$avg_time_per_copy_ns)
min(latency_gettimeofday_pageable_h2d$avg_time_per_copy_ns)
max(latency_gettimeofday_pageable_h2d$avg_time_per_copy_ns)
latency_gettimeofday_pageable_d2h <- subset(latency_char_data_data, time_method == "gettimeofday" & mem_mode == "pageable" & copy_direction == "d2h")
latency_gettimeofday_pageable_d2h
mean(latency_gettimeofday_pageable_d2h$avg_time_per_copy_ns)
min(latency_gettimeofday_pageable_d2h$avg_time_per_copy_ns)
max(latency_gettimeofday_pageable_d2h$avg_time_per_copy_ns)
latency_gettimeofday_pinned_h2d <- subset(latency_char_data_data, time_method == "gettimeofday" & mem_mode == "pinned" & copy_direction == "h2d")
latency_gettimeofday_pinned_h2d
mean(latency_gettimeofday_pinned_h2d$avg_time_per_copy_ns)
min(latency_gettimeofday_pinned_h2d$avg_time_per_copy_ns)
max(latency_gettimeofday_pinned_h2d$avg_time_per_copy_ns)
# d2h
latency_gettimeofday_pinned_d2h <- subset(latency_char_data_data, time_method == "gettimeofday" & mem_mode == "pinned" & copy_direction == "d2h")
latency_gettimeofday_pinned_d2h
mean(latency_gettimeofday_pinned_d2h$avg_time_per_copy_ns)
min(latency_gettimeofday_pinned_d2h$avg_time_per_copy_ns)
max(latency_gettimeofday_pinned_d2h$avg_time_per_copy_ns)
latency_gettime_pageable_h2d <- subset(latency_char_data_data, time_method == "gettime" & mem_mode == "pageable" & copy_direction == "h2d")
latency_gettime_pageable_h2d
mean(latency_gettime_pageable_h2d$avg_time_per_copy_ns)
min(latency_gettime_pageable_h2d$avg_time_per_copy_ns)
max(latency_gettime_pageable_h2d$avg_time_per_copy_ns)
latency_gettime_pageable_d2h <- subset(latency_char_data_data, time_method == "gettime" & mem_mode == "pageable" & copy_direction == "d2h")
latency_gettime_pageable_d2h
mean(latency_gettime_pageable_d2h$avg_time_per_copy_ns)
min(latency_gettime_pageable_d2h$avg_time_per_copy_ns)
max(latency_gettime_pageable_d2h$avg_time_per_copy_ns)
# h2d
latency_gettime_pinned_h2d <- subset(latency_char_data_data, time_method == "gettime" & mem_mode == "pinned" & copy_direction == "h2d")
latency_gettime_pinned_h2d
mean(latency_gettime_pinned_h2d$avg_time_per_copy_ns)
min(latency_gettime_pinned_h2d$avg_time_per_copy_ns)
max(latency_gettime_pinned_h2d$avg_time_per_copy_ns)
latency_gettime_pinned_d2h <- subset(latency_char_data_data, time_method == "gettime" & mem_mode == "pinned" & copy_direction == "d2h")
latency_gettime_pinned_d2h
mean(latency_gettime_pinned_d2h$avg_time_per_copy_ns)
min(latency_gettime_pinned_d2h$avg_time_per_copy_ns)
max(latency_gettime_pinned_d2h$avg_time_per_copy_ns)
latency_cudaevent_pageable_h2d <- subset(latency_char_data_data, time_method == "cudaevent" & mem_mode == "pageable" & copy_direction == "h2d")
latency_cudaevent_pageable_h2d
mean(latency_cudaevent_pageable_h2d$avg_time_per_copy_ns)
min(latency_cudaevent_pageable_h2d$avg_time_per_copy_ns)
max(latency_cudaevent_pageable_h2d$avg_time_per_copy_ns)
latency_cudaevent_pageable_d2h <- subset(latency_char_data_data, time_method == "cudaevent" & mem_mode == "pageable" & copy_direction == "d2h")
latency_cudaevent_pageable_d2h
mean(latency_cudaevent_pageable_d2h$avg_time_per_copy_ns)
min(latency_cudaevent_pageable_d2h$avg_time_per_copy_ns)
max(latency_cudaevent_pageable_d2h$avg_time_per_copy_ns)
latency_cudaevent_pinned_h2d <- subset(latency_char_data_data, time_method == "cudaevent" & mem_mode == "pinned" & copy_direction == "h2d")
latency_cudaevent_pinned_h2d
mean(latency_cudaevent_pinned_h2d$avg_time_per_copy_ns)
min(latency_cudaevent_pinned_h2d$avg_time_per_copy_ns)
max(latency_cudaevent_pinned_h2d$avg_time_per_copy_ns)
# d2h
latency_cudaevent_pinned_d2h <- subset(latency_char_data_data, time_method == "cudaevent" & mem_mode == "pinned" & copy_direction == "d2h")
latency_cudaevent_pinned_d2h
mean(latency_cudaevent_pinned_d2h$avg_time_per_copy_ns)
min(latency_cudaevent_pinned_d2h$avg_time_per_copy_ns)
max(latency_cudaevent_pinned_d2h$avg_time_per_copy_ns)
latency_test_mean_min_max = read.csv("/dados/rogerio/USP/doutorado/prova-de-conceito/testes-prova-conceito/cuda-data-transfers/latency-test-mean-min-max.csv");
latency_test_mean_min_max
View(latency_test_mean_min_max)
latency_test_mean_min_max = read.csv("/dados/rogerio/USP/doutorado/prova-de-conceito/testes-prova-conceito/cuda-data-transfers/latency-test-mean-min-max.csv");
latency_test_mean_min_max
View(latency_test_mean_min_max)
latency_test_mean_min_max = read.csv("/dados/rogerio/USP/doutorado/prova-de-conceito/testes-prova-conceito/cuda-data-transfers/latency-test-mean-min-max.csv");
latency_test_mean_min_max
View(latency_test_mean_min_max)
subset(latency_test_mean_min_max, mem_mode == "pageable" & copy_direction == "h2d")
subset(latency_test_mean_min_max, mem_alloc == "pageable" & copy_direction == "h2d")
# Latency, mean, min and max.
latency_test_mean_min_max = read.csv("/dados/rogerio/USP/doutorado/prova-de-conceito/testes-prova-conceito/cuda-data-transfers/latency-test-mean-min-max.csv");
latency_test_mean_min_max
View(latency_test_mean_min_max)
subset(latency_test_mean_min_max, mem_mode == "pageable" & copy_direction == "h2d")
pageable_h2d <- subset(latency_test_mean_min_max, mem_mode == "pageable" & copy_direction == "h2d")
mean(pageable_h2d$mean)
pageable_h2d
pageable_d2h <- subset(latency_test_mean_min_max, mem_mode == "pageable" & copy_direction == "d2h")
pageable_d2h
mean(pageable_d2h$mean)
pinned_h2d <- subset(latency_test_mean_min_max, mem_mode == "pinned" & copy_direction == "h2d")
pinned_h2d
mean(pinned_h2d$mean)
pinned_d2h <- subset(latency_test_mean_min_max, mem_mode == "pinned" & copy_direction == "d2h")
pinned_d2h
mean(pinned_d2h$mean)
library(plyr)
library(ggplot2)
# Multiple plot function
#
# ggplot objects can be passed in ..., or to plotlist (as a list of ggplot objects)
# - cols:   Number of columns in layout
# - layout: A matrix specifying the layout. If present, 'cols' is ignored.
#
# If the layout is something like matrix(c(1,2,3,3), nrow=2, byrow=TRUE),
# then plot 1 will go in the upper left, 2 will go in the upper right, and
# 3 will go all the way across the bottom.
#
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
setwd("/dados/rogerio/USP/doutorado/prova-de-conceito/testes-prova-conceito/openmp-hook/experiments/chunk_size_evaluation/graph");
data = read.csv("/dados/rogerio/USP/doutorado/prova-de-conceito/testes-prova-conceito/openmp-hook/experiments/chunk_size_evaluation/csv/data-chunk-size-evaluation-final.csv");
View(data)
# "exp" , "execution" , "benchmark" , "size_of_data" , "schedule" , "chunk_size" , "num_threads" , "version" , "num_threads" , "NI" , "NJ" , "NK" , "ORIG" , "OMP_OFF" , "OMP" , "CUDA_KERNEL1" , "CUDA_KERNEL2" , "CUDA_KERNEL3" , "DT_H2D" , "DT_D2H" , "WORK_FINISHED_BEFORE_OFFLOAD_DECISION" , "REACH_OFFLOAD_DECISION_POINT" , "DECIDED_BY_OFFLOADING" , "MADE_THE_OFFLOADING"
# Create data subsets for versions of code (OMP, OMP+OFF, CUDA).
data_omp <- subset(data, version == "OMP")
View(data_omp)
data_omp_off <- subset(data, version == "OMP+OFF")
View(data_omp_off)
data_omp_cuda <- subset(data, version == "CUDA")
View(data_omp_cuda)
cdata_omp <- ddply(data_omp, c("exp", "version", "schedule", "chunk_size" , "num_threads" , "size_of_data" , "NI" , "NJ" , "NK"), summarise,
N    = length(chunk_size),
mean_orig = mean(ORIG),
mean_omp = mean(OMP),
mean_omp_off = mean(OMP_OFF),
mean_cuda_kernel_1 = mean(CUDA_KERNEL1),
mean_cuda_kernel_2 = mean(CUDA_KERNEL2),
mean_cuda_kernel_3 = mean(CUDA_KERNEL3),
mean_cuda = mean_cuda_kernel_1 + mean_cuda_kernel_2 + mean_cuda_kernel_3,
mean_dt_h2d = mean(DT_H2D),
mean_dt_d2h = mean(DT_D2H),
sd_orig = 2 * sd(ORIG),
sd_omp = 2 * sd(OMP),
sd_omp_off = 2 * sd(OMP_OFF),
sd_cuda_kernel_1 = 2 * sd(CUDA_KERNEL1),
sd_cuda_kernel_2 = 2 * sd(CUDA_KERNEL2),
sd_cuda_kernel_3 = 2 * sd(CUDA_KERNEL3),
sd_dt_h2d = 2 * sd(DT_H2D),
sd_dt_d2h = 2 * sd(DT_D2H),
se_orig = sd_orig / sqrt(N),
se_omp = sd_omp / sqrt(N),
se_omp_off = sd_omp_off / sqrt(N),
se_cuda_kernel_1 = sd_cuda_kernel_1 / sqrt(N),
se_cuda_kernel_2 = sd_cuda_kernel_2 / sqrt(N),
se_cuda_kernel_3 = sd_cuda_kernel_3 / sqrt(N),
se_dt_h2d = sd_dt_h2d / sqrt(N),
se_dt_d2h = sd_dt_d2h / sqrt(N)
)
View(cdata_omp)
cdata_omp_off <- ddply(data_omp_off, c("exp", "version", "schedule", "chunk_size" , "num_threads" , "size_of_data" , "NI" , "NJ" , "NK"), summarise,
N    = length(chunk_size),
mean_orig = mean(ORIG),
mean_omp = mean(OMP),
mean_omp_off = mean(OMP_OFF),
mean_cuda_kernel_1 = mean(CUDA_KERNEL1),
mean_cuda_kernel_2 = mean(CUDA_KERNEL2),
mean_cuda_kernel_3 = mean(CUDA_KERNEL3),
mean_cuda = mean_cuda_kernel_1 + mean_cuda_kernel_2 + mean_cuda_kernel_3,
mean_dt_h2d = mean(DT_H2D),
mean_dt_d2h = mean(DT_D2H),
sd_orig = 2 * sd(ORIG),
sd_omp = 2 * sd(OMP),
sd_omp_off = 2 * sd(OMP_OFF),
sd_cuda_kernel_1 = 2 * sd(CUDA_KERNEL1),
sd_cuda_kernel_2 = 2 * sd(CUDA_KERNEL2),
sd_cuda_kernel_3 = 2 * sd(CUDA_KERNEL3),
sd_dt_h2d = 2 * sd(DT_H2D),
sd_dt_d2h = 2 * sd(DT_D2H),
se_orig = sd_orig / sqrt(N),
se_omp = sd_omp / sqrt(N),
se_omp_off = sd_omp_off / sqrt(N),
se_cuda_kernel_1 = sd_cuda_kernel_1 / sqrt(N),
se_cuda_kernel_2 = sd_cuda_kernel_2 / sqrt(N),
se_cuda_kernel_3 = sd_cuda_kernel_3 / sqrt(N),
se_dt_h2d = sd_dt_h2d / sqrt(N),
se_dt_d2h = sd_dt_d2h / sqrt(N)
)
View(cdata_omp_off)
